// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/node"
	"github.com/davidroman0O/go-tempolite/ent/sideeffecttask"
)

// SideEffectTask is the model entity for the SideEffectTask schema.
type SideEffectTask struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SideEffectTaskQuery when eager-loading is set.
	Edges                 SideEffectTaskEdges `json:"edges"`
	node_side_effect_task *string
	selectValues          sql.SelectValues
}

// SideEffectTaskEdges holds the relations/edges for other nodes in the graph.
type SideEffectTaskEdges struct {
	// Node holds the value of the node edge.
	Node *Node `json:"node,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NodeOrErr returns the Node value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SideEffectTaskEdges) NodeOrErr() (*Node, error) {
	if e.Node != nil {
		return e.Node, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: node.Label}
	}
	return nil, &NotLoadedError{edge: "node"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SideEffectTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sideeffecttask.FieldID:
			values[i] = new(sql.NullInt64)
		case sideeffecttask.ForeignKeys[0]: // node_side_effect_task
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SideEffectTask fields.
func (set *SideEffectTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sideeffecttask.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			set.ID = int(value.Int64)
		case sideeffecttask.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_side_effect_task", values[i])
			} else if value.Valid {
				set.node_side_effect_task = new(string)
				*set.node_side_effect_task = value.String
			}
		default:
			set.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SideEffectTask.
// This includes values selected through modifiers, order, etc.
func (set *SideEffectTask) Value(name string) (ent.Value, error) {
	return set.selectValues.Get(name)
}

// QueryNode queries the "node" edge of the SideEffectTask entity.
func (set *SideEffectTask) QueryNode() *NodeQuery {
	return NewSideEffectTaskClient(set.config).QueryNode(set)
}

// Update returns a builder for updating this SideEffectTask.
// Note that you need to call SideEffectTask.Unwrap() before calling this method if this SideEffectTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (set *SideEffectTask) Update() *SideEffectTaskUpdateOne {
	return NewSideEffectTaskClient(set.config).UpdateOne(set)
}

// Unwrap unwraps the SideEffectTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (set *SideEffectTask) Unwrap() *SideEffectTask {
	_tx, ok := set.config.driver.(*txDriver)
	if !ok {
		panic("ent: SideEffectTask is not a transactional entity")
	}
	set.config.driver = _tx.drv
	return set
}

// String implements the fmt.Stringer.
func (set *SideEffectTask) String() string {
	var builder strings.Builder
	builder.WriteString("SideEffectTask(")
	builder.WriteString(fmt.Sprintf("id=%v", set.ID))
	builder.WriteByte(')')
	return builder.String()
}

// SideEffectTasks is a parsable slice of SideEffectTask.
type SideEffectTasks []*SideEffectTask
