// Code generated by ent, DO NOT EDIT.

package sagatransaction

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldContainsFold(FieldID, id))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldEQ(FieldOrder, v))
}

// NextTransactionName applies equality check predicate on the "next_transaction_name" field. It's identical to NextTransactionNameEQ.
func NextTransactionName(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldEQ(FieldNextTransactionName, v))
}

// FailureCompensationName applies equality check predicate on the "failure_compensation_name" field. It's identical to FailureCompensationNameEQ.
func FailureCompensationName(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldEQ(FieldFailureCompensationName, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldLTE(FieldOrder, v))
}

// NextTransactionNameEQ applies the EQ predicate on the "next_transaction_name" field.
func NextTransactionNameEQ(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldEQ(FieldNextTransactionName, v))
}

// NextTransactionNameNEQ applies the NEQ predicate on the "next_transaction_name" field.
func NextTransactionNameNEQ(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldNEQ(FieldNextTransactionName, v))
}

// NextTransactionNameIn applies the In predicate on the "next_transaction_name" field.
func NextTransactionNameIn(vs ...string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldIn(FieldNextTransactionName, vs...))
}

// NextTransactionNameNotIn applies the NotIn predicate on the "next_transaction_name" field.
func NextTransactionNameNotIn(vs ...string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldNotIn(FieldNextTransactionName, vs...))
}

// NextTransactionNameGT applies the GT predicate on the "next_transaction_name" field.
func NextTransactionNameGT(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldGT(FieldNextTransactionName, v))
}

// NextTransactionNameGTE applies the GTE predicate on the "next_transaction_name" field.
func NextTransactionNameGTE(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldGTE(FieldNextTransactionName, v))
}

// NextTransactionNameLT applies the LT predicate on the "next_transaction_name" field.
func NextTransactionNameLT(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldLT(FieldNextTransactionName, v))
}

// NextTransactionNameLTE applies the LTE predicate on the "next_transaction_name" field.
func NextTransactionNameLTE(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldLTE(FieldNextTransactionName, v))
}

// NextTransactionNameContains applies the Contains predicate on the "next_transaction_name" field.
func NextTransactionNameContains(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldContains(FieldNextTransactionName, v))
}

// NextTransactionNameHasPrefix applies the HasPrefix predicate on the "next_transaction_name" field.
func NextTransactionNameHasPrefix(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldHasPrefix(FieldNextTransactionName, v))
}

// NextTransactionNameHasSuffix applies the HasSuffix predicate on the "next_transaction_name" field.
func NextTransactionNameHasSuffix(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldHasSuffix(FieldNextTransactionName, v))
}

// NextTransactionNameEqualFold applies the EqualFold predicate on the "next_transaction_name" field.
func NextTransactionNameEqualFold(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldEqualFold(FieldNextTransactionName, v))
}

// NextTransactionNameContainsFold applies the ContainsFold predicate on the "next_transaction_name" field.
func NextTransactionNameContainsFold(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldContainsFold(FieldNextTransactionName, v))
}

// FailureCompensationNameEQ applies the EQ predicate on the "failure_compensation_name" field.
func FailureCompensationNameEQ(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldEQ(FieldFailureCompensationName, v))
}

// FailureCompensationNameNEQ applies the NEQ predicate on the "failure_compensation_name" field.
func FailureCompensationNameNEQ(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldNEQ(FieldFailureCompensationName, v))
}

// FailureCompensationNameIn applies the In predicate on the "failure_compensation_name" field.
func FailureCompensationNameIn(vs ...string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldIn(FieldFailureCompensationName, vs...))
}

// FailureCompensationNameNotIn applies the NotIn predicate on the "failure_compensation_name" field.
func FailureCompensationNameNotIn(vs ...string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldNotIn(FieldFailureCompensationName, vs...))
}

// FailureCompensationNameGT applies the GT predicate on the "failure_compensation_name" field.
func FailureCompensationNameGT(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldGT(FieldFailureCompensationName, v))
}

// FailureCompensationNameGTE applies the GTE predicate on the "failure_compensation_name" field.
func FailureCompensationNameGTE(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldGTE(FieldFailureCompensationName, v))
}

// FailureCompensationNameLT applies the LT predicate on the "failure_compensation_name" field.
func FailureCompensationNameLT(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldLT(FieldFailureCompensationName, v))
}

// FailureCompensationNameLTE applies the LTE predicate on the "failure_compensation_name" field.
func FailureCompensationNameLTE(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldLTE(FieldFailureCompensationName, v))
}

// FailureCompensationNameContains applies the Contains predicate on the "failure_compensation_name" field.
func FailureCompensationNameContains(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldContains(FieldFailureCompensationName, v))
}

// FailureCompensationNameHasPrefix applies the HasPrefix predicate on the "failure_compensation_name" field.
func FailureCompensationNameHasPrefix(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldHasPrefix(FieldFailureCompensationName, v))
}

// FailureCompensationNameHasSuffix applies the HasSuffix predicate on the "failure_compensation_name" field.
func FailureCompensationNameHasSuffix(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldHasSuffix(FieldFailureCompensationName, v))
}

// FailureCompensationNameEqualFold applies the EqualFold predicate on the "failure_compensation_name" field.
func FailureCompensationNameEqualFold(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldEqualFold(FieldFailureCompensationName, v))
}

// FailureCompensationNameContainsFold applies the ContainsFold predicate on the "failure_compensation_name" field.
func FailureCompensationNameContainsFold(v string) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.FieldContainsFold(FieldFailureCompensationName, v))
}

// HasExecutionUnit applies the HasEdge predicate on the "execution_unit" edge.
func HasExecutionUnit() predicate.SagaTransaction {
	return predicate.SagaTransaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExecutionUnitTable, ExecutionUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionUnitWith applies the HasEdge predicate on the "execution_unit" edge with a given conditions (other predicates).
func HasExecutionUnitWith(preds ...predicate.ExecutionUnit) predicate.SagaTransaction {
	return predicate.SagaTransaction(func(s *sql.Selector) {
		step := newExecutionUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.SagaTransaction {
	return predicate.SagaTransaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.SagaTransaction {
	return predicate.SagaTransaction(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompensation applies the HasEdge predicate on the "compensation" edge.
func HasCompensation() predicate.SagaTransaction {
	return predicate.SagaTransaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CompensationTable, CompensationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompensationWith applies the HasEdge predicate on the "compensation" edge with a given conditions (other predicates).
func HasCompensationWith(preds ...predicate.SagaCompensation) predicate.SagaTransaction {
	return predicate.SagaTransaction(func(s *sql.Selector) {
		step := newCompensationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SagaTransaction) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SagaTransaction) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SagaTransaction) predicate.SagaTransaction {
	return predicate.SagaTransaction(sql.NotPredicates(p))
}
