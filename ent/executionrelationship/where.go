// Code generated by ent, DO NOT EDIT.

package executionrelationship

import (
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldLTE(FieldID, id))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldEQ(FieldParentID, v))
}

// ChildID applies equality check predicate on the "child_id" field. It's identical to ChildIDEQ.
func ChildID(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldEQ(FieldChildID, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldGT(FieldParentID, v))
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldGTE(FieldParentID, v))
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldLT(FieldParentID, v))
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldLTE(FieldParentID, v))
}

// ParentIDContains applies the Contains predicate on the "parent_id" field.
func ParentIDContains(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldContains(FieldParentID, v))
}

// ParentIDHasPrefix applies the HasPrefix predicate on the "parent_id" field.
func ParentIDHasPrefix(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldHasPrefix(FieldParentID, v))
}

// ParentIDHasSuffix applies the HasSuffix predicate on the "parent_id" field.
func ParentIDHasSuffix(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldHasSuffix(FieldParentID, v))
}

// ParentIDEqualFold applies the EqualFold predicate on the "parent_id" field.
func ParentIDEqualFold(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldEqualFold(FieldParentID, v))
}

// ParentIDContainsFold applies the ContainsFold predicate on the "parent_id" field.
func ParentIDContainsFold(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldContainsFold(FieldParentID, v))
}

// ChildIDEQ applies the EQ predicate on the "child_id" field.
func ChildIDEQ(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldEQ(FieldChildID, v))
}

// ChildIDNEQ applies the NEQ predicate on the "child_id" field.
func ChildIDNEQ(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldNEQ(FieldChildID, v))
}

// ChildIDIn applies the In predicate on the "child_id" field.
func ChildIDIn(vs ...string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldIn(FieldChildID, vs...))
}

// ChildIDNotIn applies the NotIn predicate on the "child_id" field.
func ChildIDNotIn(vs ...string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldNotIn(FieldChildID, vs...))
}

// ChildIDGT applies the GT predicate on the "child_id" field.
func ChildIDGT(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldGT(FieldChildID, v))
}

// ChildIDGTE applies the GTE predicate on the "child_id" field.
func ChildIDGTE(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldGTE(FieldChildID, v))
}

// ChildIDLT applies the LT predicate on the "child_id" field.
func ChildIDLT(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldLT(FieldChildID, v))
}

// ChildIDLTE applies the LTE predicate on the "child_id" field.
func ChildIDLTE(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldLTE(FieldChildID, v))
}

// ChildIDContains applies the Contains predicate on the "child_id" field.
func ChildIDContains(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldContains(FieldChildID, v))
}

// ChildIDHasPrefix applies the HasPrefix predicate on the "child_id" field.
func ChildIDHasPrefix(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldHasPrefix(FieldChildID, v))
}

// ChildIDHasSuffix applies the HasSuffix predicate on the "child_id" field.
func ChildIDHasSuffix(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldHasSuffix(FieldChildID, v))
}

// ChildIDEqualFold applies the EqualFold predicate on the "child_id" field.
func ChildIDEqualFold(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldEqualFold(FieldChildID, v))
}

// ChildIDContainsFold applies the ContainsFold predicate on the "child_id" field.
func ChildIDContainsFold(v string) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldContainsFold(FieldChildID, v))
}

// ParentTypeEQ applies the EQ predicate on the "parent_type" field.
func ParentTypeEQ(v ParentType) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldEQ(FieldParentType, v))
}

// ParentTypeNEQ applies the NEQ predicate on the "parent_type" field.
func ParentTypeNEQ(v ParentType) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldNEQ(FieldParentType, v))
}

// ParentTypeIn applies the In predicate on the "parent_type" field.
func ParentTypeIn(vs ...ParentType) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldIn(FieldParentType, vs...))
}

// ParentTypeNotIn applies the NotIn predicate on the "parent_type" field.
func ParentTypeNotIn(vs ...ParentType) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldNotIn(FieldParentType, vs...))
}

// ChildTypeEQ applies the EQ predicate on the "child_type" field.
func ChildTypeEQ(v ChildType) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldEQ(FieldChildType, v))
}

// ChildTypeNEQ applies the NEQ predicate on the "child_type" field.
func ChildTypeNEQ(v ChildType) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldNEQ(FieldChildType, v))
}

// ChildTypeIn applies the In predicate on the "child_type" field.
func ChildTypeIn(vs ...ChildType) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldIn(FieldChildType, vs...))
}

// ChildTypeNotIn applies the NotIn predicate on the "child_type" field.
func ChildTypeNotIn(vs ...ChildType) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.FieldNotIn(FieldChildType, vs...))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExecutionRelationship) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExecutionRelationship) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExecutionRelationship) predicate.ExecutionRelationship {
	return predicate.ExecutionRelationship(sql.NotPredicates(p))
}
