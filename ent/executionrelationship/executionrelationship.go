// Code generated by ent, DO NOT EDIT.

package executionrelationship

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the executionrelationship type in the database.
	Label = "execution_relationship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldChildID holds the string denoting the child_id field in the database.
	FieldChildID = "child_id"
	// FieldParentType holds the string denoting the parent_type field in the database.
	FieldParentType = "parent_type"
	// FieldChildType holds the string denoting the child_type field in the database.
	FieldChildType = "child_type"
	// Table holds the table name of the executionrelationship in the database.
	Table = "execution_relationships"
)

// Columns holds all SQL columns for executionrelationship fields.
var Columns = []string{
	FieldID,
	FieldParentID,
	FieldChildID,
	FieldParentType,
	FieldChildType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// ParentType defines the type for the "parent_type" enum field.
type ParentType string

// ParentType values.
const (
	ParentTypeWorkflow   ParentType = "workflow"
	ParentTypeActivity   ParentType = "activity"
	ParentTypeSaga       ParentType = "saga"
	ParentTypeSideEffect ParentType = "side_effect"
)

func (pt ParentType) String() string {
	return string(pt)
}

// ParentTypeValidator is a validator for the "parent_type" field enum values. It is called by the builders before save.
func ParentTypeValidator(pt ParentType) error {
	switch pt {
	case ParentTypeWorkflow, ParentTypeActivity, ParentTypeSaga, ParentTypeSideEffect:
		return nil
	default:
		return fmt.Errorf("executionrelationship: invalid enum value for parent_type field: %q", pt)
	}
}

// ChildType defines the type for the "child_type" enum field.
type ChildType string

// ChildType values.
const (
	ChildTypeWorkflow   ChildType = "workflow"
	ChildTypeActivity   ChildType = "activity"
	ChildTypeSaga       ChildType = "saga"
	ChildTypeSideEffect ChildType = "side_effect"
)

func (ct ChildType) String() string {
	return string(ct)
}

// ChildTypeValidator is a validator for the "child_type" field enum values. It is called by the builders before save.
func ChildTypeValidator(ct ChildType) error {
	switch ct {
	case ChildTypeWorkflow, ChildTypeActivity, ChildTypeSaga, ChildTypeSideEffect:
		return nil
	default:
		return fmt.Errorf("executionrelationship: invalid enum value for child_type field: %q", ct)
	}
}

// OrderOption defines the ordering options for the ExecutionRelationship queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByChildID orders the results by the child_id field.
func ByChildID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChildID, opts...).ToFunc()
}

// ByParentType orders the results by the parent_type field.
func ByParentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentType, opts...).ToFunc()
}

// ByChildType orders the results by the child_type field.
func ByChildType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChildType, opts...).ToFunc()
}
