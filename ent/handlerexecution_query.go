// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/handlerexecution"
	"github.com/davidroman0O/go-tempolite/ent/handlertask"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/sagastepexecution"
)

// HandlerExecutionQuery is the builder for querying HandlerExecution entities.
type HandlerExecutionQuery struct {
	config
	ctx                   *QueryContext
	order                 []handlerexecution.OrderOption
	inters                []Interceptor
	predicates            []predicate.HandlerExecution
	withExecutionContext  *ExecutionContextQuery
	withParent            *HandlerExecutionQuery
	withChildren          *HandlerExecutionQuery
	withTasks             *HandlerTaskQuery
	withSagaStepExecution *SagaStepExecutionQuery
	withFKs               bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HandlerExecutionQuery builder.
func (heq *HandlerExecutionQuery) Where(ps ...predicate.HandlerExecution) *HandlerExecutionQuery {
	heq.predicates = append(heq.predicates, ps...)
	return heq
}

// Limit the number of records to be returned by this query.
func (heq *HandlerExecutionQuery) Limit(limit int) *HandlerExecutionQuery {
	heq.ctx.Limit = &limit
	return heq
}

// Offset to start from.
func (heq *HandlerExecutionQuery) Offset(offset int) *HandlerExecutionQuery {
	heq.ctx.Offset = &offset
	return heq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (heq *HandlerExecutionQuery) Unique(unique bool) *HandlerExecutionQuery {
	heq.ctx.Unique = &unique
	return heq
}

// Order specifies how the records should be ordered.
func (heq *HandlerExecutionQuery) Order(o ...handlerexecution.OrderOption) *HandlerExecutionQuery {
	heq.order = append(heq.order, o...)
	return heq
}

// QueryExecutionContext chains the current query on the "execution_context" edge.
func (heq *HandlerExecutionQuery) QueryExecutionContext() *ExecutionContextQuery {
	query := (&ExecutionContextClient{config: heq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := heq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := heq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(handlerexecution.Table, handlerexecution.FieldID, selector),
			sqlgraph.To(executioncontext.Table, executioncontext.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, handlerexecution.ExecutionContextTable, handlerexecution.ExecutionContextColumn),
		)
		fromU = sqlgraph.SetNeighbors(heq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (heq *HandlerExecutionQuery) QueryParent() *HandlerExecutionQuery {
	query := (&HandlerExecutionClient{config: heq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := heq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := heq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(handlerexecution.Table, handlerexecution.FieldID, selector),
			sqlgraph.To(handlerexecution.Table, handlerexecution.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, handlerexecution.ParentTable, handlerexecution.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(heq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (heq *HandlerExecutionQuery) QueryChildren() *HandlerExecutionQuery {
	query := (&HandlerExecutionClient{config: heq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := heq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := heq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(handlerexecution.Table, handlerexecution.FieldID, selector),
			sqlgraph.To(handlerexecution.Table, handlerexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, handlerexecution.ChildrenTable, handlerexecution.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(heq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (heq *HandlerExecutionQuery) QueryTasks() *HandlerTaskQuery {
	query := (&HandlerTaskClient{config: heq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := heq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := heq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(handlerexecution.Table, handlerexecution.FieldID, selector),
			sqlgraph.To(handlertask.Table, handlertask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, handlerexecution.TasksTable, handlerexecution.TasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(heq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySagaStepExecution chains the current query on the "saga_step_execution" edge.
func (heq *HandlerExecutionQuery) QuerySagaStepExecution() *SagaStepExecutionQuery {
	query := (&SagaStepExecutionClient{config: heq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := heq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := heq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(handlerexecution.Table, handlerexecution.FieldID, selector),
			sqlgraph.To(sagastepexecution.Table, sagastepexecution.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, handlerexecution.SagaStepExecutionTable, handlerexecution.SagaStepExecutionColumn),
		)
		fromU = sqlgraph.SetNeighbors(heq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HandlerExecution entity from the query.
// Returns a *NotFoundError when no HandlerExecution was found.
func (heq *HandlerExecutionQuery) First(ctx context.Context) (*HandlerExecution, error) {
	nodes, err := heq.Limit(1).All(setContextOp(ctx, heq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{handlerexecution.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (heq *HandlerExecutionQuery) FirstX(ctx context.Context) *HandlerExecution {
	node, err := heq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HandlerExecution ID from the query.
// Returns a *NotFoundError when no HandlerExecution ID was found.
func (heq *HandlerExecutionQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = heq.Limit(1).IDs(setContextOp(ctx, heq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{handlerexecution.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (heq *HandlerExecutionQuery) FirstIDX(ctx context.Context) string {
	id, err := heq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HandlerExecution entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HandlerExecution entity is found.
// Returns a *NotFoundError when no HandlerExecution entities are found.
func (heq *HandlerExecutionQuery) Only(ctx context.Context) (*HandlerExecution, error) {
	nodes, err := heq.Limit(2).All(setContextOp(ctx, heq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{handlerexecution.Label}
	default:
		return nil, &NotSingularError{handlerexecution.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (heq *HandlerExecutionQuery) OnlyX(ctx context.Context) *HandlerExecution {
	node, err := heq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HandlerExecution ID in the query.
// Returns a *NotSingularError when more than one HandlerExecution ID is found.
// Returns a *NotFoundError when no entities are found.
func (heq *HandlerExecutionQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = heq.Limit(2).IDs(setContextOp(ctx, heq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{handlerexecution.Label}
	default:
		err = &NotSingularError{handlerexecution.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (heq *HandlerExecutionQuery) OnlyIDX(ctx context.Context) string {
	id, err := heq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HandlerExecutions.
func (heq *HandlerExecutionQuery) All(ctx context.Context) ([]*HandlerExecution, error) {
	ctx = setContextOp(ctx, heq.ctx, ent.OpQueryAll)
	if err := heq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HandlerExecution, *HandlerExecutionQuery]()
	return withInterceptors[[]*HandlerExecution](ctx, heq, qr, heq.inters)
}

// AllX is like All, but panics if an error occurs.
func (heq *HandlerExecutionQuery) AllX(ctx context.Context) []*HandlerExecution {
	nodes, err := heq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HandlerExecution IDs.
func (heq *HandlerExecutionQuery) IDs(ctx context.Context) (ids []string, err error) {
	if heq.ctx.Unique == nil && heq.path != nil {
		heq.Unique(true)
	}
	ctx = setContextOp(ctx, heq.ctx, ent.OpQueryIDs)
	if err = heq.Select(handlerexecution.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (heq *HandlerExecutionQuery) IDsX(ctx context.Context) []string {
	ids, err := heq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (heq *HandlerExecutionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, heq.ctx, ent.OpQueryCount)
	if err := heq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, heq, querierCount[*HandlerExecutionQuery](), heq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (heq *HandlerExecutionQuery) CountX(ctx context.Context) int {
	count, err := heq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (heq *HandlerExecutionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, heq.ctx, ent.OpQueryExist)
	switch _, err := heq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (heq *HandlerExecutionQuery) ExistX(ctx context.Context) bool {
	exist, err := heq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HandlerExecutionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (heq *HandlerExecutionQuery) Clone() *HandlerExecutionQuery {
	if heq == nil {
		return nil
	}
	return &HandlerExecutionQuery{
		config:                heq.config,
		ctx:                   heq.ctx.Clone(),
		order:                 append([]handlerexecution.OrderOption{}, heq.order...),
		inters:                append([]Interceptor{}, heq.inters...),
		predicates:            append([]predicate.HandlerExecution{}, heq.predicates...),
		withExecutionContext:  heq.withExecutionContext.Clone(),
		withParent:            heq.withParent.Clone(),
		withChildren:          heq.withChildren.Clone(),
		withTasks:             heq.withTasks.Clone(),
		withSagaStepExecution: heq.withSagaStepExecution.Clone(),
		// clone intermediate query.
		sql:  heq.sql.Clone(),
		path: heq.path,
	}
}

// WithExecutionContext tells the query-builder to eager-load the nodes that are connected to
// the "execution_context" edge. The optional arguments are used to configure the query builder of the edge.
func (heq *HandlerExecutionQuery) WithExecutionContext(opts ...func(*ExecutionContextQuery)) *HandlerExecutionQuery {
	query := (&ExecutionContextClient{config: heq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	heq.withExecutionContext = query
	return heq
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (heq *HandlerExecutionQuery) WithParent(opts ...func(*HandlerExecutionQuery)) *HandlerExecutionQuery {
	query := (&HandlerExecutionClient{config: heq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	heq.withParent = query
	return heq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (heq *HandlerExecutionQuery) WithChildren(opts ...func(*HandlerExecutionQuery)) *HandlerExecutionQuery {
	query := (&HandlerExecutionClient{config: heq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	heq.withChildren = query
	return heq
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (heq *HandlerExecutionQuery) WithTasks(opts ...func(*HandlerTaskQuery)) *HandlerExecutionQuery {
	query := (&HandlerTaskClient{config: heq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	heq.withTasks = query
	return heq
}

// WithSagaStepExecution tells the query-builder to eager-load the nodes that are connected to
// the "saga_step_execution" edge. The optional arguments are used to configure the query builder of the edge.
func (heq *HandlerExecutionQuery) WithSagaStepExecution(opts ...func(*SagaStepExecutionQuery)) *HandlerExecutionQuery {
	query := (&SagaStepExecutionClient{config: heq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	heq.withSagaStepExecution = query
	return heq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RunID string `json:"run_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HandlerExecution.Query().
//		GroupBy(handlerexecution.FieldRunID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (heq *HandlerExecutionQuery) GroupBy(field string, fields ...string) *HandlerExecutionGroupBy {
	heq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HandlerExecutionGroupBy{build: heq}
	grbuild.flds = &heq.ctx.Fields
	grbuild.label = handlerexecution.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RunID string `json:"run_id,omitempty"`
//	}
//
//	client.HandlerExecution.Query().
//		Select(handlerexecution.FieldRunID).
//		Scan(ctx, &v)
func (heq *HandlerExecutionQuery) Select(fields ...string) *HandlerExecutionSelect {
	heq.ctx.Fields = append(heq.ctx.Fields, fields...)
	sbuild := &HandlerExecutionSelect{HandlerExecutionQuery: heq}
	sbuild.label = handlerexecution.Label
	sbuild.flds, sbuild.scan = &heq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HandlerExecutionSelect configured with the given aggregations.
func (heq *HandlerExecutionQuery) Aggregate(fns ...AggregateFunc) *HandlerExecutionSelect {
	return heq.Select().Aggregate(fns...)
}

func (heq *HandlerExecutionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range heq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, heq); err != nil {
				return err
			}
		}
	}
	for _, f := range heq.ctx.Fields {
		if !handlerexecution.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if heq.path != nil {
		prev, err := heq.path(ctx)
		if err != nil {
			return err
		}
		heq.sql = prev
	}
	return nil
}

func (heq *HandlerExecutionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HandlerExecution, error) {
	var (
		nodes       = []*HandlerExecution{}
		withFKs     = heq.withFKs
		_spec       = heq.querySpec()
		loadedTypes = [5]bool{
			heq.withExecutionContext != nil,
			heq.withParent != nil,
			heq.withChildren != nil,
			heq.withTasks != nil,
			heq.withSagaStepExecution != nil,
		}
	)
	if heq.withExecutionContext != nil || heq.withParent != nil || heq.withSagaStepExecution != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, handlerexecution.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HandlerExecution).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HandlerExecution{config: heq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, heq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := heq.withExecutionContext; query != nil {
		if err := heq.loadExecutionContext(ctx, query, nodes, nil,
			func(n *HandlerExecution, e *ExecutionContext) { n.Edges.ExecutionContext = e }); err != nil {
			return nil, err
		}
	}
	if query := heq.withParent; query != nil {
		if err := heq.loadParent(ctx, query, nodes, nil,
			func(n *HandlerExecution, e *HandlerExecution) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := heq.withChildren; query != nil {
		if err := heq.loadChildren(ctx, query, nodes,
			func(n *HandlerExecution) { n.Edges.Children = []*HandlerExecution{} },
			func(n *HandlerExecution, e *HandlerExecution) { n.Edges.Children = append(n.Edges.Children, e) }); err != nil {
			return nil, err
		}
	}
	if query := heq.withTasks; query != nil {
		if err := heq.loadTasks(ctx, query, nodes,
			func(n *HandlerExecution) { n.Edges.Tasks = []*HandlerTask{} },
			func(n *HandlerExecution, e *HandlerTask) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := heq.withSagaStepExecution; query != nil {
		if err := heq.loadSagaStepExecution(ctx, query, nodes, nil,
			func(n *HandlerExecution, e *SagaStepExecution) { n.Edges.SagaStepExecution = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (heq *HandlerExecutionQuery) loadExecutionContext(ctx context.Context, query *ExecutionContextQuery, nodes []*HandlerExecution, init func(*HandlerExecution), assign func(*HandlerExecution, *ExecutionContext)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*HandlerExecution)
	for i := range nodes {
		if nodes[i].execution_context_handler_executions == nil {
			continue
		}
		fk := *nodes[i].execution_context_handler_executions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(executioncontext.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "execution_context_handler_executions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (heq *HandlerExecutionQuery) loadParent(ctx context.Context, query *HandlerExecutionQuery, nodes []*HandlerExecution, init func(*HandlerExecution), assign func(*HandlerExecution, *HandlerExecution)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*HandlerExecution)
	for i := range nodes {
		if nodes[i].handler_execution_children == nil {
			continue
		}
		fk := *nodes[i].handler_execution_children
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(handlerexecution.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "handler_execution_children" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (heq *HandlerExecutionQuery) loadChildren(ctx context.Context, query *HandlerExecutionQuery, nodes []*HandlerExecution, init func(*HandlerExecution), assign func(*HandlerExecution, *HandlerExecution)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*HandlerExecution)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HandlerExecution(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(handlerexecution.ChildrenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.handler_execution_children
		if fk == nil {
			return fmt.Errorf(`foreign-key "handler_execution_children" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "handler_execution_children" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (heq *HandlerExecutionQuery) loadTasks(ctx context.Context, query *HandlerTaskQuery, nodes []*HandlerExecution, init func(*HandlerExecution), assign func(*HandlerExecution, *HandlerTask)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*HandlerExecution)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HandlerTask(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(handlerexecution.TasksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.handler_execution_tasks
		if fk == nil {
			return fmt.Errorf(`foreign-key "handler_execution_tasks" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "handler_execution_tasks" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (heq *HandlerExecutionQuery) loadSagaStepExecution(ctx context.Context, query *SagaStepExecutionQuery, nodes []*HandlerExecution, init func(*HandlerExecution), assign func(*HandlerExecution, *SagaStepExecution)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*HandlerExecution)
	for i := range nodes {
		if nodes[i].handler_execution_saga_step_execution == nil {
			continue
		}
		fk := *nodes[i].handler_execution_saga_step_execution
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sagastepexecution.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "handler_execution_saga_step_execution" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (heq *HandlerExecutionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := heq.querySpec()
	_spec.Node.Columns = heq.ctx.Fields
	if len(heq.ctx.Fields) > 0 {
		_spec.Unique = heq.ctx.Unique != nil && *heq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, heq.driver, _spec)
}

func (heq *HandlerExecutionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(handlerexecution.Table, handlerexecution.Columns, sqlgraph.NewFieldSpec(handlerexecution.FieldID, field.TypeString))
	_spec.From = heq.sql
	if unique := heq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if heq.path != nil {
		_spec.Unique = true
	}
	if fields := heq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, handlerexecution.FieldID)
		for i := range fields {
			if fields[i] != handlerexecution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := heq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := heq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := heq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := heq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (heq *HandlerExecutionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(heq.driver.Dialect())
	t1 := builder.Table(handlerexecution.Table)
	columns := heq.ctx.Fields
	if len(columns) == 0 {
		columns = handlerexecution.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if heq.sql != nil {
		selector = heq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if heq.ctx.Unique != nil && *heq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range heq.predicates {
		p(selector)
	}
	for _, p := range heq.order {
		p(selector)
	}
	if offset := heq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := heq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HandlerExecutionGroupBy is the group-by builder for HandlerExecution entities.
type HandlerExecutionGroupBy struct {
	selector
	build *HandlerExecutionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hegb *HandlerExecutionGroupBy) Aggregate(fns ...AggregateFunc) *HandlerExecutionGroupBy {
	hegb.fns = append(hegb.fns, fns...)
	return hegb
}

// Scan applies the selector query and scans the result into the given value.
func (hegb *HandlerExecutionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hegb.build.ctx, ent.OpQueryGroupBy)
	if err := hegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HandlerExecutionQuery, *HandlerExecutionGroupBy](ctx, hegb.build, hegb, hegb.build.inters, v)
}

func (hegb *HandlerExecutionGroupBy) sqlScan(ctx context.Context, root *HandlerExecutionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hegb.fns))
	for _, fn := range hegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hegb.flds)+len(hegb.fns))
		for _, f := range *hegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HandlerExecutionSelect is the builder for selecting fields of HandlerExecution entities.
type HandlerExecutionSelect struct {
	*HandlerExecutionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hes *HandlerExecutionSelect) Aggregate(fns ...AggregateFunc) *HandlerExecutionSelect {
	hes.fns = append(hes.fns, fns...)
	return hes
}

// Scan applies the selector query and scans the result into the given value.
func (hes *HandlerExecutionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hes.ctx, ent.OpQuerySelect)
	if err := hes.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HandlerExecutionQuery, *HandlerExecutionSelect](ctx, hes.HandlerExecutionQuery, hes, hes.inters, v)
}

func (hes *HandlerExecutionSelect) sqlScan(ctx context.Context, root *HandlerExecutionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hes.fns))
	for _, fn := range hes.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
