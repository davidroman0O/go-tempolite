// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/executionunit"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/sagacompensation"
	"github.com/davidroman0O/go-tempolite/ent/sagatransaction"
	"github.com/davidroman0O/go-tempolite/ent/task"
)

// ExecutionUnitQuery is the builder for querying ExecutionUnit entities.
type ExecutionUnitQuery struct {
	config
	ctx                   *QueryContext
	order                 []executionunit.OrderOption
	inters                []Interceptor
	predicates            []predicate.ExecutionUnit
	withExecutionContext  *ExecutionContextQuery
	withParent            *ExecutionUnitQuery
	withChildren          *ExecutionUnitQuery
	withTasks             *TaskQuery
	withSagaTransactions  *SagaTransactionQuery
	withSagaCompensations *SagaCompensationQuery
	withFKs               bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ExecutionUnitQuery builder.
func (euq *ExecutionUnitQuery) Where(ps ...predicate.ExecutionUnit) *ExecutionUnitQuery {
	euq.predicates = append(euq.predicates, ps...)
	return euq
}

// Limit the number of records to be returned by this query.
func (euq *ExecutionUnitQuery) Limit(limit int) *ExecutionUnitQuery {
	euq.ctx.Limit = &limit
	return euq
}

// Offset to start from.
func (euq *ExecutionUnitQuery) Offset(offset int) *ExecutionUnitQuery {
	euq.ctx.Offset = &offset
	return euq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (euq *ExecutionUnitQuery) Unique(unique bool) *ExecutionUnitQuery {
	euq.ctx.Unique = &unique
	return euq
}

// Order specifies how the records should be ordered.
func (euq *ExecutionUnitQuery) Order(o ...executionunit.OrderOption) *ExecutionUnitQuery {
	euq.order = append(euq.order, o...)
	return euq
}

// QueryExecutionContext chains the current query on the "execution_context" edge.
func (euq *ExecutionUnitQuery) QueryExecutionContext() *ExecutionContextQuery {
	query := (&ExecutionContextClient{config: euq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(executionunit.Table, executionunit.FieldID, selector),
			sqlgraph.To(executioncontext.Table, executioncontext.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, executionunit.ExecutionContextTable, executionunit.ExecutionContextColumn),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (euq *ExecutionUnitQuery) QueryParent() *ExecutionUnitQuery {
	query := (&ExecutionUnitClient{config: euq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(executionunit.Table, executionunit.FieldID, selector),
			sqlgraph.To(executionunit.Table, executionunit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, executionunit.ParentTable, executionunit.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (euq *ExecutionUnitQuery) QueryChildren() *ExecutionUnitQuery {
	query := (&ExecutionUnitClient{config: euq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(executionunit.Table, executionunit.FieldID, selector),
			sqlgraph.To(executionunit.Table, executionunit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, executionunit.ChildrenTable, executionunit.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (euq *ExecutionUnitQuery) QueryTasks() *TaskQuery {
	query := (&TaskClient{config: euq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(executionunit.Table, executionunit.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, executionunit.TasksTable, executionunit.TasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySagaTransactions chains the current query on the "saga_transactions" edge.
func (euq *ExecutionUnitQuery) QuerySagaTransactions() *SagaTransactionQuery {
	query := (&SagaTransactionClient{config: euq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(executionunit.Table, executionunit.FieldID, selector),
			sqlgraph.To(sagatransaction.Table, sagatransaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, executionunit.SagaTransactionsTable, executionunit.SagaTransactionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySagaCompensations chains the current query on the "saga_compensations" edge.
func (euq *ExecutionUnitQuery) QuerySagaCompensations() *SagaCompensationQuery {
	query := (&SagaCompensationClient{config: euq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := euq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := euq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(executionunit.Table, executionunit.FieldID, selector),
			sqlgraph.To(sagacompensation.Table, sagacompensation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, executionunit.SagaCompensationsTable, executionunit.SagaCompensationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(euq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ExecutionUnit entity from the query.
// Returns a *NotFoundError when no ExecutionUnit was found.
func (euq *ExecutionUnitQuery) First(ctx context.Context) (*ExecutionUnit, error) {
	nodes, err := euq.Limit(1).All(setContextOp(ctx, euq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{executionunit.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (euq *ExecutionUnitQuery) FirstX(ctx context.Context) *ExecutionUnit {
	node, err := euq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ExecutionUnit ID from the query.
// Returns a *NotFoundError when no ExecutionUnit ID was found.
func (euq *ExecutionUnitQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = euq.Limit(1).IDs(setContextOp(ctx, euq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{executionunit.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (euq *ExecutionUnitQuery) FirstIDX(ctx context.Context) string {
	id, err := euq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ExecutionUnit entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ExecutionUnit entity is found.
// Returns a *NotFoundError when no ExecutionUnit entities are found.
func (euq *ExecutionUnitQuery) Only(ctx context.Context) (*ExecutionUnit, error) {
	nodes, err := euq.Limit(2).All(setContextOp(ctx, euq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{executionunit.Label}
	default:
		return nil, &NotSingularError{executionunit.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (euq *ExecutionUnitQuery) OnlyX(ctx context.Context) *ExecutionUnit {
	node, err := euq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ExecutionUnit ID in the query.
// Returns a *NotSingularError when more than one ExecutionUnit ID is found.
// Returns a *NotFoundError when no entities are found.
func (euq *ExecutionUnitQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = euq.Limit(2).IDs(setContextOp(ctx, euq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{executionunit.Label}
	default:
		err = &NotSingularError{executionunit.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (euq *ExecutionUnitQuery) OnlyIDX(ctx context.Context) string {
	id, err := euq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ExecutionUnits.
func (euq *ExecutionUnitQuery) All(ctx context.Context) ([]*ExecutionUnit, error) {
	ctx = setContextOp(ctx, euq.ctx, ent.OpQueryAll)
	if err := euq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ExecutionUnit, *ExecutionUnitQuery]()
	return withInterceptors[[]*ExecutionUnit](ctx, euq, qr, euq.inters)
}

// AllX is like All, but panics if an error occurs.
func (euq *ExecutionUnitQuery) AllX(ctx context.Context) []*ExecutionUnit {
	nodes, err := euq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ExecutionUnit IDs.
func (euq *ExecutionUnitQuery) IDs(ctx context.Context) (ids []string, err error) {
	if euq.ctx.Unique == nil && euq.path != nil {
		euq.Unique(true)
	}
	ctx = setContextOp(ctx, euq.ctx, ent.OpQueryIDs)
	if err = euq.Select(executionunit.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (euq *ExecutionUnitQuery) IDsX(ctx context.Context) []string {
	ids, err := euq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (euq *ExecutionUnitQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, euq.ctx, ent.OpQueryCount)
	if err := euq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, euq, querierCount[*ExecutionUnitQuery](), euq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (euq *ExecutionUnitQuery) CountX(ctx context.Context) int {
	count, err := euq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (euq *ExecutionUnitQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, euq.ctx, ent.OpQueryExist)
	switch _, err := euq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (euq *ExecutionUnitQuery) ExistX(ctx context.Context) bool {
	exist, err := euq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ExecutionUnitQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (euq *ExecutionUnitQuery) Clone() *ExecutionUnitQuery {
	if euq == nil {
		return nil
	}
	return &ExecutionUnitQuery{
		config:                euq.config,
		ctx:                   euq.ctx.Clone(),
		order:                 append([]executionunit.OrderOption{}, euq.order...),
		inters:                append([]Interceptor{}, euq.inters...),
		predicates:            append([]predicate.ExecutionUnit{}, euq.predicates...),
		withExecutionContext:  euq.withExecutionContext.Clone(),
		withParent:            euq.withParent.Clone(),
		withChildren:          euq.withChildren.Clone(),
		withTasks:             euq.withTasks.Clone(),
		withSagaTransactions:  euq.withSagaTransactions.Clone(),
		withSagaCompensations: euq.withSagaCompensations.Clone(),
		// clone intermediate query.
		sql:  euq.sql.Clone(),
		path: euq.path,
	}
}

// WithExecutionContext tells the query-builder to eager-load the nodes that are connected to
// the "execution_context" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *ExecutionUnitQuery) WithExecutionContext(opts ...func(*ExecutionContextQuery)) *ExecutionUnitQuery {
	query := (&ExecutionContextClient{config: euq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	euq.withExecutionContext = query
	return euq
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *ExecutionUnitQuery) WithParent(opts ...func(*ExecutionUnitQuery)) *ExecutionUnitQuery {
	query := (&ExecutionUnitClient{config: euq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	euq.withParent = query
	return euq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *ExecutionUnitQuery) WithChildren(opts ...func(*ExecutionUnitQuery)) *ExecutionUnitQuery {
	query := (&ExecutionUnitClient{config: euq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	euq.withChildren = query
	return euq
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *ExecutionUnitQuery) WithTasks(opts ...func(*TaskQuery)) *ExecutionUnitQuery {
	query := (&TaskClient{config: euq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	euq.withTasks = query
	return euq
}

// WithSagaTransactions tells the query-builder to eager-load the nodes that are connected to
// the "saga_transactions" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *ExecutionUnitQuery) WithSagaTransactions(opts ...func(*SagaTransactionQuery)) *ExecutionUnitQuery {
	query := (&SagaTransactionClient{config: euq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	euq.withSagaTransactions = query
	return euq
}

// WithSagaCompensations tells the query-builder to eager-load the nodes that are connected to
// the "saga_compensations" edge. The optional arguments are used to configure the query builder of the edge.
func (euq *ExecutionUnitQuery) WithSagaCompensations(opts ...func(*SagaCompensationQuery)) *ExecutionUnitQuery {
	query := (&SagaCompensationClient{config: euq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	euq.withSagaCompensations = query
	return euq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type executionunit.Type `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ExecutionUnit.Query().
//		GroupBy(executionunit.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (euq *ExecutionUnitQuery) GroupBy(field string, fields ...string) *ExecutionUnitGroupBy {
	euq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ExecutionUnitGroupBy{build: euq}
	grbuild.flds = &euq.ctx.Fields
	grbuild.label = executionunit.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type executionunit.Type `json:"type,omitempty"`
//	}
//
//	client.ExecutionUnit.Query().
//		Select(executionunit.FieldType).
//		Scan(ctx, &v)
func (euq *ExecutionUnitQuery) Select(fields ...string) *ExecutionUnitSelect {
	euq.ctx.Fields = append(euq.ctx.Fields, fields...)
	sbuild := &ExecutionUnitSelect{ExecutionUnitQuery: euq}
	sbuild.label = executionunit.Label
	sbuild.flds, sbuild.scan = &euq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ExecutionUnitSelect configured with the given aggregations.
func (euq *ExecutionUnitQuery) Aggregate(fns ...AggregateFunc) *ExecutionUnitSelect {
	return euq.Select().Aggregate(fns...)
}

func (euq *ExecutionUnitQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range euq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, euq); err != nil {
				return err
			}
		}
	}
	for _, f := range euq.ctx.Fields {
		if !executionunit.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if euq.path != nil {
		prev, err := euq.path(ctx)
		if err != nil {
			return err
		}
		euq.sql = prev
	}
	return nil
}

func (euq *ExecutionUnitQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ExecutionUnit, error) {
	var (
		nodes       = []*ExecutionUnit{}
		withFKs     = euq.withFKs
		_spec       = euq.querySpec()
		loadedTypes = [6]bool{
			euq.withExecutionContext != nil,
			euq.withParent != nil,
			euq.withChildren != nil,
			euq.withTasks != nil,
			euq.withSagaTransactions != nil,
			euq.withSagaCompensations != nil,
		}
	)
	if euq.withExecutionContext != nil || euq.withParent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, executionunit.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ExecutionUnit).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ExecutionUnit{config: euq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, euq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := euq.withExecutionContext; query != nil {
		if err := euq.loadExecutionContext(ctx, query, nodes, nil,
			func(n *ExecutionUnit, e *ExecutionContext) { n.Edges.ExecutionContext = e }); err != nil {
			return nil, err
		}
	}
	if query := euq.withParent; query != nil {
		if err := euq.loadParent(ctx, query, nodes, nil,
			func(n *ExecutionUnit, e *ExecutionUnit) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := euq.withChildren; query != nil {
		if err := euq.loadChildren(ctx, query, nodes,
			func(n *ExecutionUnit) { n.Edges.Children = []*ExecutionUnit{} },
			func(n *ExecutionUnit, e *ExecutionUnit) { n.Edges.Children = append(n.Edges.Children, e) }); err != nil {
			return nil, err
		}
	}
	if query := euq.withTasks; query != nil {
		if err := euq.loadTasks(ctx, query, nodes,
			func(n *ExecutionUnit) { n.Edges.Tasks = []*Task{} },
			func(n *ExecutionUnit, e *Task) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := euq.withSagaTransactions; query != nil {
		if err := euq.loadSagaTransactions(ctx, query, nodes,
			func(n *ExecutionUnit) { n.Edges.SagaTransactions = []*SagaTransaction{} },
			func(n *ExecutionUnit, e *SagaTransaction) {
				n.Edges.SagaTransactions = append(n.Edges.SagaTransactions, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := euq.withSagaCompensations; query != nil {
		if err := euq.loadSagaCompensations(ctx, query, nodes,
			func(n *ExecutionUnit) { n.Edges.SagaCompensations = []*SagaCompensation{} },
			func(n *ExecutionUnit, e *SagaCompensation) {
				n.Edges.SagaCompensations = append(n.Edges.SagaCompensations, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (euq *ExecutionUnitQuery) loadExecutionContext(ctx context.Context, query *ExecutionContextQuery, nodes []*ExecutionUnit, init func(*ExecutionUnit), assign func(*ExecutionUnit, *ExecutionContext)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ExecutionUnit)
	for i := range nodes {
		if nodes[i].execution_context_execution_units == nil {
			continue
		}
		fk := *nodes[i].execution_context_execution_units
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(executioncontext.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "execution_context_execution_units" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (euq *ExecutionUnitQuery) loadParent(ctx context.Context, query *ExecutionUnitQuery, nodes []*ExecutionUnit, init func(*ExecutionUnit), assign func(*ExecutionUnit, *ExecutionUnit)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ExecutionUnit)
	for i := range nodes {
		if nodes[i].execution_unit_children == nil {
			continue
		}
		fk := *nodes[i].execution_unit_children
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(executionunit.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "execution_unit_children" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (euq *ExecutionUnitQuery) loadChildren(ctx context.Context, query *ExecutionUnitQuery, nodes []*ExecutionUnit, init func(*ExecutionUnit), assign func(*ExecutionUnit, *ExecutionUnit)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ExecutionUnit)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ExecutionUnit(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(executionunit.ChildrenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.execution_unit_children
		if fk == nil {
			return fmt.Errorf(`foreign-key "execution_unit_children" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "execution_unit_children" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (euq *ExecutionUnitQuery) loadTasks(ctx context.Context, query *TaskQuery, nodes []*ExecutionUnit, init func(*ExecutionUnit), assign func(*ExecutionUnit, *Task)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ExecutionUnit)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Task(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(executionunit.TasksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.execution_unit_tasks
		if fk == nil {
			return fmt.Errorf(`foreign-key "execution_unit_tasks" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "execution_unit_tasks" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (euq *ExecutionUnitQuery) loadSagaTransactions(ctx context.Context, query *SagaTransactionQuery, nodes []*ExecutionUnit, init func(*ExecutionUnit), assign func(*ExecutionUnit, *SagaTransaction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ExecutionUnit)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.SagaTransaction(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(executionunit.SagaTransactionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.execution_unit_saga_transactions
		if fk == nil {
			return fmt.Errorf(`foreign-key "execution_unit_saga_transactions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "execution_unit_saga_transactions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (euq *ExecutionUnitQuery) loadSagaCompensations(ctx context.Context, query *SagaCompensationQuery, nodes []*ExecutionUnit, init func(*ExecutionUnit), assign func(*ExecutionUnit, *SagaCompensation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ExecutionUnit)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.SagaCompensation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(executionunit.SagaCompensationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.execution_unit_saga_compensations
		if fk == nil {
			return fmt.Errorf(`foreign-key "execution_unit_saga_compensations" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "execution_unit_saga_compensations" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (euq *ExecutionUnitQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := euq.querySpec()
	_spec.Node.Columns = euq.ctx.Fields
	if len(euq.ctx.Fields) > 0 {
		_spec.Unique = euq.ctx.Unique != nil && *euq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, euq.driver, _spec)
}

func (euq *ExecutionUnitQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(executionunit.Table, executionunit.Columns, sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString))
	_spec.From = euq.sql
	if unique := euq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if euq.path != nil {
		_spec.Unique = true
	}
	if fields := euq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, executionunit.FieldID)
		for i := range fields {
			if fields[i] != executionunit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := euq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := euq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := euq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := euq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (euq *ExecutionUnitQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(euq.driver.Dialect())
	t1 := builder.Table(executionunit.Table)
	columns := euq.ctx.Fields
	if len(columns) == 0 {
		columns = executionunit.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if euq.sql != nil {
		selector = euq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if euq.ctx.Unique != nil && *euq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range euq.predicates {
		p(selector)
	}
	for _, p := range euq.order {
		p(selector)
	}
	if offset := euq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := euq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ExecutionUnitGroupBy is the group-by builder for ExecutionUnit entities.
type ExecutionUnitGroupBy struct {
	selector
	build *ExecutionUnitQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eugb *ExecutionUnitGroupBy) Aggregate(fns ...AggregateFunc) *ExecutionUnitGroupBy {
	eugb.fns = append(eugb.fns, fns...)
	return eugb
}

// Scan applies the selector query and scans the result into the given value.
func (eugb *ExecutionUnitGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eugb.build.ctx, ent.OpQueryGroupBy)
	if err := eugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExecutionUnitQuery, *ExecutionUnitGroupBy](ctx, eugb.build, eugb, eugb.build.inters, v)
}

func (eugb *ExecutionUnitGroupBy) sqlScan(ctx context.Context, root *ExecutionUnitQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(eugb.fns))
	for _, fn := range eugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*eugb.flds)+len(eugb.fns))
		for _, f := range *eugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*eugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ExecutionUnitSelect is the builder for selecting fields of ExecutionUnit entities.
type ExecutionUnitSelect struct {
	*ExecutionUnitQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (eus *ExecutionUnitSelect) Aggregate(fns ...AggregateFunc) *ExecutionUnitSelect {
	eus.fns = append(eus.fns, fns...)
	return eus
}

// Scan applies the selector query and scans the result into the given value.
func (eus *ExecutionUnitSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eus.ctx, ent.OpQuerySelect)
	if err := eus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExecutionUnitQuery, *ExecutionUnitSelect](ctx, eus.ExecutionUnitQuery, eus, eus.inters, v)
}

func (eus *ExecutionUnitSelect) sqlScan(ctx context.Context, root *ExecutionUnitQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(eus.fns))
	for _, fn := range eus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*eus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
