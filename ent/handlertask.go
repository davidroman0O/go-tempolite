// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/handlertask"
	"github.com/davidroman0O/go-tempolite/ent/taskcontext"
)

// HandlerTask is the model entity for the HandlerTask schema.
type HandlerTask struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HandlerName holds the value of the "handlerName" field.
	HandlerName string `json:"handlerName,omitempty"`
	// Status holds the value of the "status" field.
	Status handlertask.Status `json:"status,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload []byte `json:"payload,omitempty"`
	// Result holds the value of the "result" field.
	Result []byte `json:"result,omitempty"`
	// Error holds the value of the "error" field.
	Error []byte `json:"error,omitempty"`
	// NumIn holds the value of the "numIn" field.
	NumIn int `json:"numIn,omitempty"`
	// NumOut holds the value of the "numOut" field.
	NumOut int `json:"numOut,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HandlerTaskQuery when eager-loading is set.
	Edges                          HandlerTaskEdges `json:"edges"`
	handler_task_task_context      *string
	handler_task_execution_context *string
	selectValues                   sql.SelectValues
}

// HandlerTaskEdges holds the relations/edges for other nodes in the graph.
type HandlerTaskEdges struct {
	// TaskContext holds the value of the task_context edge.
	TaskContext *TaskContext `json:"task_context,omitempty"`
	// ExecutionContext holds the value of the execution_context edge.
	ExecutionContext *ExecutionContext `json:"execution_context,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TaskContextOrErr returns the TaskContext value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HandlerTaskEdges) TaskContextOrErr() (*TaskContext, error) {
	if e.TaskContext != nil {
		return e.TaskContext, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: taskcontext.Label}
	}
	return nil, &NotLoadedError{edge: "task_context"}
}

// ExecutionContextOrErr returns the ExecutionContext value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HandlerTaskEdges) ExecutionContextOrErr() (*ExecutionContext, error) {
	if e.ExecutionContext != nil {
		return e.ExecutionContext, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: executioncontext.Label}
	}
	return nil, &NotLoadedError{edge: "execution_context"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HandlerTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case handlertask.FieldPayload, handlertask.FieldResult, handlertask.FieldError:
			values[i] = new([]byte)
		case handlertask.FieldNumIn, handlertask.FieldNumOut:
			values[i] = new(sql.NullInt64)
		case handlertask.FieldID, handlertask.FieldHandlerName, handlertask.FieldStatus:
			values[i] = new(sql.NullString)
		case handlertask.ForeignKeys[0]: // handler_task_task_context
			values[i] = new(sql.NullString)
		case handlertask.ForeignKeys[1]: // handler_task_execution_context
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HandlerTask fields.
func (ht *HandlerTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case handlertask.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ht.ID = value.String
			}
		case handlertask.FieldHandlerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handlerName", values[i])
			} else if value.Valid {
				ht.HandlerName = value.String
			}
		case handlertask.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ht.Status = handlertask.Status(value.String)
			}
		case handlertask.FieldPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value != nil {
				ht.Payload = *value
			}
		case handlertask.FieldResult:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value != nil {
				ht.Result = *value
			}
		case handlertask.FieldError:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value != nil {
				ht.Error = *value
			}
		case handlertask.FieldNumIn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field numIn", values[i])
			} else if value.Valid {
				ht.NumIn = int(value.Int64)
			}
		case handlertask.FieldNumOut:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field numOut", values[i])
			} else if value.Valid {
				ht.NumOut = int(value.Int64)
			}
		case handlertask.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handler_task_task_context", values[i])
			} else if value.Valid {
				ht.handler_task_task_context = new(string)
				*ht.handler_task_task_context = value.String
			}
		case handlertask.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handler_task_execution_context", values[i])
			} else if value.Valid {
				ht.handler_task_execution_context = new(string)
				*ht.handler_task_execution_context = value.String
			}
		default:
			ht.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HandlerTask.
// This includes values selected through modifiers, order, etc.
func (ht *HandlerTask) Value(name string) (ent.Value, error) {
	return ht.selectValues.Get(name)
}

// QueryTaskContext queries the "task_context" edge of the HandlerTask entity.
func (ht *HandlerTask) QueryTaskContext() *TaskContextQuery {
	return NewHandlerTaskClient(ht.config).QueryTaskContext(ht)
}

// QueryExecutionContext queries the "execution_context" edge of the HandlerTask entity.
func (ht *HandlerTask) QueryExecutionContext() *ExecutionContextQuery {
	return NewHandlerTaskClient(ht.config).QueryExecutionContext(ht)
}

// Update returns a builder for updating this HandlerTask.
// Note that you need to call HandlerTask.Unwrap() before calling this method if this HandlerTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (ht *HandlerTask) Update() *HandlerTaskUpdateOne {
	return NewHandlerTaskClient(ht.config).UpdateOne(ht)
}

// Unwrap unwraps the HandlerTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ht *HandlerTask) Unwrap() *HandlerTask {
	_tx, ok := ht.config.driver.(*txDriver)
	if !ok {
		panic("ent: HandlerTask is not a transactional entity")
	}
	ht.config.driver = _tx.drv
	return ht
}

// String implements the fmt.Stringer.
func (ht *HandlerTask) String() string {
	var builder strings.Builder
	builder.WriteString("HandlerTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ht.ID))
	builder.WriteString("handlerName=")
	builder.WriteString(ht.HandlerName)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ht.Status))
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(fmt.Sprintf("%v", ht.Payload))
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", ht.Result))
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(fmt.Sprintf("%v", ht.Error))
	builder.WriteString(", ")
	builder.WriteString("numIn=")
	builder.WriteString(fmt.Sprintf("%v", ht.NumIn))
	builder.WriteString(", ")
	builder.WriteString("numOut=")
	builder.WriteString(fmt.Sprintf("%v", ht.NumOut))
	builder.WriteByte(')')
	return builder.String()
}

// HandlerTasks is a parsable slice of HandlerTask.
type HandlerTasks []*HandlerTask
