// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/handlerexecution"
	"github.com/davidroman0O/go-tempolite/ent/handlertask"
)

// HandlerTask is the model entity for the HandlerTask schema.
type HandlerTask struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HandlerName holds the value of the "handler_name" field.
	HandlerName string `json:"handler_name,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload []byte `json:"payload,omitempty"`
	// Result holds the value of the "result" field.
	Result []byte `json:"result,omitempty"`
	// Error holds the value of the "error" field.
	Error []byte `json:"error,omitempty"`
	// Status holds the value of the "status" field.
	Status handlertask.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HandlerTaskQuery when eager-loading is set.
	Edges                   HandlerTaskEdges `json:"edges"`
	handler_execution_tasks *string
	selectValues            sql.SelectValues
}

// HandlerTaskEdges holds the relations/edges for other nodes in the graph.
type HandlerTaskEdges struct {
	// HandlerExecution holds the value of the handler_execution edge.
	HandlerExecution *HandlerExecution `json:"handler_execution,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HandlerExecutionOrErr returns the HandlerExecution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HandlerTaskEdges) HandlerExecutionOrErr() (*HandlerExecution, error) {
	if e.HandlerExecution != nil {
		return e.HandlerExecution, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: handlerexecution.Label}
	}
	return nil, &NotLoadedError{edge: "handler_execution"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HandlerTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case handlertask.FieldPayload, handlertask.FieldResult, handlertask.FieldError:
			values[i] = new([]byte)
		case handlertask.FieldID, handlertask.FieldHandlerName, handlertask.FieldStatus:
			values[i] = new(sql.NullString)
		case handlertask.FieldCreatedAt, handlertask.FieldCompletedAt:
			values[i] = new(sql.NullTime)
		case handlertask.ForeignKeys[0]: // handler_execution_tasks
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HandlerTask fields.
func (ht *HandlerTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case handlertask.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ht.ID = value.String
			}
		case handlertask.FieldHandlerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handler_name", values[i])
			} else if value.Valid {
				ht.HandlerName = value.String
			}
		case handlertask.FieldPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value != nil {
				ht.Payload = *value
			}
		case handlertask.FieldResult:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value != nil {
				ht.Result = *value
			}
		case handlertask.FieldError:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value != nil {
				ht.Error = *value
			}
		case handlertask.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ht.Status = handlertask.Status(value.String)
			}
		case handlertask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ht.CreatedAt = value.Time
			}
		case handlertask.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				ht.CompletedAt = value.Time
			}
		case handlertask.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handler_execution_tasks", values[i])
			} else if value.Valid {
				ht.handler_execution_tasks = new(string)
				*ht.handler_execution_tasks = value.String
			}
		default:
			ht.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HandlerTask.
// This includes values selected through modifiers, order, etc.
func (ht *HandlerTask) Value(name string) (ent.Value, error) {
	return ht.selectValues.Get(name)
}

// QueryHandlerExecution queries the "handler_execution" edge of the HandlerTask entity.
func (ht *HandlerTask) QueryHandlerExecution() *HandlerExecutionQuery {
	return NewHandlerTaskClient(ht.config).QueryHandlerExecution(ht)
}

// Update returns a builder for updating this HandlerTask.
// Note that you need to call HandlerTask.Unwrap() before calling this method if this HandlerTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (ht *HandlerTask) Update() *HandlerTaskUpdateOne {
	return NewHandlerTaskClient(ht.config).UpdateOne(ht)
}

// Unwrap unwraps the HandlerTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ht *HandlerTask) Unwrap() *HandlerTask {
	_tx, ok := ht.config.driver.(*txDriver)
	if !ok {
		panic("ent: HandlerTask is not a transactional entity")
	}
	ht.config.driver = _tx.drv
	return ht
}

// String implements the fmt.Stringer.
func (ht *HandlerTask) String() string {
	var builder strings.Builder
	builder.WriteString("HandlerTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ht.ID))
	builder.WriteString("handler_name=")
	builder.WriteString(ht.HandlerName)
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(fmt.Sprintf("%v", ht.Payload))
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", ht.Result))
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(fmt.Sprintf("%v", ht.Error))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ht.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ht.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(ht.CompletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// HandlerTasks is a parsable slice of HandlerTask.
type HandlerTasks []*HandlerTask
