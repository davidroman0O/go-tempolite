// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/handlertask"
	"github.com/davidroman0O/go-tempolite/ent/taskcontext"
)

// HandlerTaskCreate is the builder for creating a HandlerTask entity.
type HandlerTaskCreate struct {
	config
	mutation *HandlerTaskMutation
	hooks    []Hook
}

// SetHandlerName sets the "handlerName" field.
func (htc *HandlerTaskCreate) SetHandlerName(s string) *HandlerTaskCreate {
	htc.mutation.SetHandlerName(s)
	return htc
}

// SetStatus sets the "status" field.
func (htc *HandlerTaskCreate) SetStatus(h handlertask.Status) *HandlerTaskCreate {
	htc.mutation.SetStatus(h)
	return htc
}

// SetPayload sets the "payload" field.
func (htc *HandlerTaskCreate) SetPayload(b []byte) *HandlerTaskCreate {
	htc.mutation.SetPayload(b)
	return htc
}

// SetResult sets the "result" field.
func (htc *HandlerTaskCreate) SetResult(b []byte) *HandlerTaskCreate {
	htc.mutation.SetResult(b)
	return htc
}

// SetError sets the "error" field.
func (htc *HandlerTaskCreate) SetError(b []byte) *HandlerTaskCreate {
	htc.mutation.SetError(b)
	return htc
}

// SetNumIn sets the "numIn" field.
func (htc *HandlerTaskCreate) SetNumIn(i int) *HandlerTaskCreate {
	htc.mutation.SetNumIn(i)
	return htc
}

// SetNumOut sets the "numOut" field.
func (htc *HandlerTaskCreate) SetNumOut(i int) *HandlerTaskCreate {
	htc.mutation.SetNumOut(i)
	return htc
}

// SetID sets the "id" field.
func (htc *HandlerTaskCreate) SetID(s string) *HandlerTaskCreate {
	htc.mutation.SetID(s)
	return htc
}

// SetTaskContextID sets the "task_context" edge to the TaskContext entity by ID.
func (htc *HandlerTaskCreate) SetTaskContextID(id string) *HandlerTaskCreate {
	htc.mutation.SetTaskContextID(id)
	return htc
}

// SetNillableTaskContextID sets the "task_context" edge to the TaskContext entity by ID if the given value is not nil.
func (htc *HandlerTaskCreate) SetNillableTaskContextID(id *string) *HandlerTaskCreate {
	if id != nil {
		htc = htc.SetTaskContextID(*id)
	}
	return htc
}

// SetTaskContext sets the "task_context" edge to the TaskContext entity.
func (htc *HandlerTaskCreate) SetTaskContext(t *TaskContext) *HandlerTaskCreate {
	return htc.SetTaskContextID(t.ID)
}

// SetExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID.
func (htc *HandlerTaskCreate) SetExecutionContextID(id string) *HandlerTaskCreate {
	htc.mutation.SetExecutionContextID(id)
	return htc
}

// SetNillableExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID if the given value is not nil.
func (htc *HandlerTaskCreate) SetNillableExecutionContextID(id *string) *HandlerTaskCreate {
	if id != nil {
		htc = htc.SetExecutionContextID(*id)
	}
	return htc
}

// SetExecutionContext sets the "execution_context" edge to the ExecutionContext entity.
func (htc *HandlerTaskCreate) SetExecutionContext(e *ExecutionContext) *HandlerTaskCreate {
	return htc.SetExecutionContextID(e.ID)
}

// Mutation returns the HandlerTaskMutation object of the builder.
func (htc *HandlerTaskCreate) Mutation() *HandlerTaskMutation {
	return htc.mutation
}

// Save creates the HandlerTask in the database.
func (htc *HandlerTaskCreate) Save(ctx context.Context) (*HandlerTask, error) {
	return withHooks(ctx, htc.sqlSave, htc.mutation, htc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (htc *HandlerTaskCreate) SaveX(ctx context.Context) *HandlerTask {
	v, err := htc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (htc *HandlerTaskCreate) Exec(ctx context.Context) error {
	_, err := htc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htc *HandlerTaskCreate) ExecX(ctx context.Context) {
	if err := htc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htc *HandlerTaskCreate) check() error {
	if _, ok := htc.mutation.HandlerName(); !ok {
		return &ValidationError{Name: "handlerName", err: errors.New(`ent: missing required field "HandlerTask.handlerName"`)}
	}
	if _, ok := htc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "HandlerTask.status"`)}
	}
	if v, ok := htc.mutation.Status(); ok {
		if err := handlertask.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "HandlerTask.status": %w`, err)}
		}
	}
	if _, ok := htc.mutation.NumIn(); !ok {
		return &ValidationError{Name: "numIn", err: errors.New(`ent: missing required field "HandlerTask.numIn"`)}
	}
	if _, ok := htc.mutation.NumOut(); !ok {
		return &ValidationError{Name: "numOut", err: errors.New(`ent: missing required field "HandlerTask.numOut"`)}
	}
	return nil
}

func (htc *HandlerTaskCreate) sqlSave(ctx context.Context) (*HandlerTask, error) {
	if err := htc.check(); err != nil {
		return nil, err
	}
	_node, _spec := htc.createSpec()
	if err := sqlgraph.CreateNode(ctx, htc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected HandlerTask.ID type: %T", _spec.ID.Value)
		}
	}
	htc.mutation.id = &_node.ID
	htc.mutation.done = true
	return _node, nil
}

func (htc *HandlerTaskCreate) createSpec() (*HandlerTask, *sqlgraph.CreateSpec) {
	var (
		_node = &HandlerTask{config: htc.config}
		_spec = sqlgraph.NewCreateSpec(handlertask.Table, sqlgraph.NewFieldSpec(handlertask.FieldID, field.TypeString))
	)
	if id, ok := htc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := htc.mutation.HandlerName(); ok {
		_spec.SetField(handlertask.FieldHandlerName, field.TypeString, value)
		_node.HandlerName = value
	}
	if value, ok := htc.mutation.Status(); ok {
		_spec.SetField(handlertask.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := htc.mutation.Payload(); ok {
		_spec.SetField(handlertask.FieldPayload, field.TypeBytes, value)
		_node.Payload = value
	}
	if value, ok := htc.mutation.Result(); ok {
		_spec.SetField(handlertask.FieldResult, field.TypeBytes, value)
		_node.Result = value
	}
	if value, ok := htc.mutation.Error(); ok {
		_spec.SetField(handlertask.FieldError, field.TypeBytes, value)
		_node.Error = value
	}
	if value, ok := htc.mutation.NumIn(); ok {
		_spec.SetField(handlertask.FieldNumIn, field.TypeInt, value)
		_node.NumIn = value
	}
	if value, ok := htc.mutation.NumOut(); ok {
		_spec.SetField(handlertask.FieldNumOut, field.TypeInt, value)
		_node.NumOut = value
	}
	if nodes := htc.mutation.TaskContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   handlertask.TaskContextTable,
			Columns: []string{handlertask.TaskContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcontext.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.handler_task_task_context = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := htc.mutation.ExecutionContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   handlertask.ExecutionContextTable,
			Columns: []string{handlertask.ExecutionContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.handler_task_execution_context = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HandlerTaskCreateBulk is the builder for creating many HandlerTask entities in bulk.
type HandlerTaskCreateBulk struct {
	config
	err      error
	builders []*HandlerTaskCreate
}

// Save creates the HandlerTask entities in the database.
func (htcb *HandlerTaskCreateBulk) Save(ctx context.Context) ([]*HandlerTask, error) {
	if htcb.err != nil {
		return nil, htcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(htcb.builders))
	nodes := make([]*HandlerTask, len(htcb.builders))
	mutators := make([]Mutator, len(htcb.builders))
	for i := range htcb.builders {
		func(i int, root context.Context) {
			builder := htcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HandlerTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, htcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, htcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, htcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (htcb *HandlerTaskCreateBulk) SaveX(ctx context.Context) []*HandlerTask {
	v, err := htcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (htcb *HandlerTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := htcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htcb *HandlerTaskCreateBulk) ExecX(ctx context.Context) {
	if err := htcb.Exec(ctx); err != nil {
		panic(err)
	}
}
