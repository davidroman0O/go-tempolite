// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/executionunit"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/sagacompensation"
	"github.com/davidroman0O/go-tempolite/ent/sagatransaction"
	"github.com/davidroman0O/go-tempolite/ent/task"
)

// SagaCompensationUpdate is the builder for updating SagaCompensation entities.
type SagaCompensationUpdate struct {
	config
	hooks    []Hook
	mutation *SagaCompensationMutation
}

// Where appends a list predicates to the SagaCompensationUpdate builder.
func (scu *SagaCompensationUpdate) Where(ps ...predicate.SagaCompensation) *SagaCompensationUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetOrder sets the "order" field.
func (scu *SagaCompensationUpdate) SetOrder(i int) *SagaCompensationUpdate {
	scu.mutation.ResetOrder()
	scu.mutation.SetOrder(i)
	return scu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (scu *SagaCompensationUpdate) SetNillableOrder(i *int) *SagaCompensationUpdate {
	if i != nil {
		scu.SetOrder(*i)
	}
	return scu
}

// AddOrder adds i to the "order" field.
func (scu *SagaCompensationUpdate) AddOrder(i int) *SagaCompensationUpdate {
	scu.mutation.AddOrder(i)
	return scu
}

// SetNextCompensationName sets the "next_compensation_name" field.
func (scu *SagaCompensationUpdate) SetNextCompensationName(s string) *SagaCompensationUpdate {
	scu.mutation.SetNextCompensationName(s)
	return scu
}

// SetNillableNextCompensationName sets the "next_compensation_name" field if the given value is not nil.
func (scu *SagaCompensationUpdate) SetNillableNextCompensationName(s *string) *SagaCompensationUpdate {
	if s != nil {
		scu.SetNextCompensationName(*s)
	}
	return scu
}

// SetExecutionUnitID sets the "execution_unit" edge to the ExecutionUnit entity by ID.
func (scu *SagaCompensationUpdate) SetExecutionUnitID(id string) *SagaCompensationUpdate {
	scu.mutation.SetExecutionUnitID(id)
	return scu
}

// SetNillableExecutionUnitID sets the "execution_unit" edge to the ExecutionUnit entity by ID if the given value is not nil.
func (scu *SagaCompensationUpdate) SetNillableExecutionUnitID(id *string) *SagaCompensationUpdate {
	if id != nil {
		scu = scu.SetExecutionUnitID(*id)
	}
	return scu
}

// SetExecutionUnit sets the "execution_unit" edge to the ExecutionUnit entity.
func (scu *SagaCompensationUpdate) SetExecutionUnit(e *ExecutionUnit) *SagaCompensationUpdate {
	return scu.SetExecutionUnitID(e.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (scu *SagaCompensationUpdate) SetTaskID(id string) *SagaCompensationUpdate {
	scu.mutation.SetTaskID(id)
	return scu
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (scu *SagaCompensationUpdate) SetNillableTaskID(id *string) *SagaCompensationUpdate {
	if id != nil {
		scu = scu.SetTaskID(*id)
	}
	return scu
}

// SetTask sets the "task" edge to the Task entity.
func (scu *SagaCompensationUpdate) SetTask(t *Task) *SagaCompensationUpdate {
	return scu.SetTaskID(t.ID)
}

// SetTransactionID sets the "transaction" edge to the SagaTransaction entity by ID.
func (scu *SagaCompensationUpdate) SetTransactionID(id string) *SagaCompensationUpdate {
	scu.mutation.SetTransactionID(id)
	return scu
}

// SetNillableTransactionID sets the "transaction" edge to the SagaTransaction entity by ID if the given value is not nil.
func (scu *SagaCompensationUpdate) SetNillableTransactionID(id *string) *SagaCompensationUpdate {
	if id != nil {
		scu = scu.SetTransactionID(*id)
	}
	return scu
}

// SetTransaction sets the "transaction" edge to the SagaTransaction entity.
func (scu *SagaCompensationUpdate) SetTransaction(s *SagaTransaction) *SagaCompensationUpdate {
	return scu.SetTransactionID(s.ID)
}

// Mutation returns the SagaCompensationMutation object of the builder.
func (scu *SagaCompensationUpdate) Mutation() *SagaCompensationMutation {
	return scu.mutation
}

// ClearExecutionUnit clears the "execution_unit" edge to the ExecutionUnit entity.
func (scu *SagaCompensationUpdate) ClearExecutionUnit() *SagaCompensationUpdate {
	scu.mutation.ClearExecutionUnit()
	return scu
}

// ClearTask clears the "task" edge to the Task entity.
func (scu *SagaCompensationUpdate) ClearTask() *SagaCompensationUpdate {
	scu.mutation.ClearTask()
	return scu
}

// ClearTransaction clears the "transaction" edge to the SagaTransaction entity.
func (scu *SagaCompensationUpdate) ClearTransaction() *SagaCompensationUpdate {
	scu.mutation.ClearTransaction()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SagaCompensationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SagaCompensationUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SagaCompensationUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SagaCompensationUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (scu *SagaCompensationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sagacompensation.Table, sagacompensation.Columns, sqlgraph.NewFieldSpec(sagacompensation.FieldID, field.TypeString))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.Order(); ok {
		_spec.SetField(sagacompensation.FieldOrder, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedOrder(); ok {
		_spec.AddField(sagacompensation.FieldOrder, field.TypeInt, value)
	}
	if value, ok := scu.mutation.NextCompensationName(); ok {
		_spec.SetField(sagacompensation.FieldNextCompensationName, field.TypeString, value)
	}
	if scu.mutation.ExecutionUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagacompensation.ExecutionUnitTable,
			Columns: []string{sagacompensation.ExecutionUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ExecutionUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagacompensation.ExecutionUnitTable,
			Columns: []string{sagacompensation.ExecutionUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sagacompensation.TaskTable,
			Columns: []string{sagacompensation.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sagacompensation.TaskTable,
			Columns: []string{sagacompensation.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagacompensation.TransactionTable,
			Columns: []string{sagacompensation.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagatransaction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagacompensation.TransactionTable,
			Columns: []string{sagacompensation.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagatransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagacompensation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// SagaCompensationUpdateOne is the builder for updating a single SagaCompensation entity.
type SagaCompensationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SagaCompensationMutation
}

// SetOrder sets the "order" field.
func (scuo *SagaCompensationUpdateOne) SetOrder(i int) *SagaCompensationUpdateOne {
	scuo.mutation.ResetOrder()
	scuo.mutation.SetOrder(i)
	return scuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (scuo *SagaCompensationUpdateOne) SetNillableOrder(i *int) *SagaCompensationUpdateOne {
	if i != nil {
		scuo.SetOrder(*i)
	}
	return scuo
}

// AddOrder adds i to the "order" field.
func (scuo *SagaCompensationUpdateOne) AddOrder(i int) *SagaCompensationUpdateOne {
	scuo.mutation.AddOrder(i)
	return scuo
}

// SetNextCompensationName sets the "next_compensation_name" field.
func (scuo *SagaCompensationUpdateOne) SetNextCompensationName(s string) *SagaCompensationUpdateOne {
	scuo.mutation.SetNextCompensationName(s)
	return scuo
}

// SetNillableNextCompensationName sets the "next_compensation_name" field if the given value is not nil.
func (scuo *SagaCompensationUpdateOne) SetNillableNextCompensationName(s *string) *SagaCompensationUpdateOne {
	if s != nil {
		scuo.SetNextCompensationName(*s)
	}
	return scuo
}

// SetExecutionUnitID sets the "execution_unit" edge to the ExecutionUnit entity by ID.
func (scuo *SagaCompensationUpdateOne) SetExecutionUnitID(id string) *SagaCompensationUpdateOne {
	scuo.mutation.SetExecutionUnitID(id)
	return scuo
}

// SetNillableExecutionUnitID sets the "execution_unit" edge to the ExecutionUnit entity by ID if the given value is not nil.
func (scuo *SagaCompensationUpdateOne) SetNillableExecutionUnitID(id *string) *SagaCompensationUpdateOne {
	if id != nil {
		scuo = scuo.SetExecutionUnitID(*id)
	}
	return scuo
}

// SetExecutionUnit sets the "execution_unit" edge to the ExecutionUnit entity.
func (scuo *SagaCompensationUpdateOne) SetExecutionUnit(e *ExecutionUnit) *SagaCompensationUpdateOne {
	return scuo.SetExecutionUnitID(e.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (scuo *SagaCompensationUpdateOne) SetTaskID(id string) *SagaCompensationUpdateOne {
	scuo.mutation.SetTaskID(id)
	return scuo
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (scuo *SagaCompensationUpdateOne) SetNillableTaskID(id *string) *SagaCompensationUpdateOne {
	if id != nil {
		scuo = scuo.SetTaskID(*id)
	}
	return scuo
}

// SetTask sets the "task" edge to the Task entity.
func (scuo *SagaCompensationUpdateOne) SetTask(t *Task) *SagaCompensationUpdateOne {
	return scuo.SetTaskID(t.ID)
}

// SetTransactionID sets the "transaction" edge to the SagaTransaction entity by ID.
func (scuo *SagaCompensationUpdateOne) SetTransactionID(id string) *SagaCompensationUpdateOne {
	scuo.mutation.SetTransactionID(id)
	return scuo
}

// SetNillableTransactionID sets the "transaction" edge to the SagaTransaction entity by ID if the given value is not nil.
func (scuo *SagaCompensationUpdateOne) SetNillableTransactionID(id *string) *SagaCompensationUpdateOne {
	if id != nil {
		scuo = scuo.SetTransactionID(*id)
	}
	return scuo
}

// SetTransaction sets the "transaction" edge to the SagaTransaction entity.
func (scuo *SagaCompensationUpdateOne) SetTransaction(s *SagaTransaction) *SagaCompensationUpdateOne {
	return scuo.SetTransactionID(s.ID)
}

// Mutation returns the SagaCompensationMutation object of the builder.
func (scuo *SagaCompensationUpdateOne) Mutation() *SagaCompensationMutation {
	return scuo.mutation
}

// ClearExecutionUnit clears the "execution_unit" edge to the ExecutionUnit entity.
func (scuo *SagaCompensationUpdateOne) ClearExecutionUnit() *SagaCompensationUpdateOne {
	scuo.mutation.ClearExecutionUnit()
	return scuo
}

// ClearTask clears the "task" edge to the Task entity.
func (scuo *SagaCompensationUpdateOne) ClearTask() *SagaCompensationUpdateOne {
	scuo.mutation.ClearTask()
	return scuo
}

// ClearTransaction clears the "transaction" edge to the SagaTransaction entity.
func (scuo *SagaCompensationUpdateOne) ClearTransaction() *SagaCompensationUpdateOne {
	scuo.mutation.ClearTransaction()
	return scuo
}

// Where appends a list predicates to the SagaCompensationUpdate builder.
func (scuo *SagaCompensationUpdateOne) Where(ps ...predicate.SagaCompensation) *SagaCompensationUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SagaCompensationUpdateOne) Select(field string, fields ...string) *SagaCompensationUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SagaCompensation entity.
func (scuo *SagaCompensationUpdateOne) Save(ctx context.Context) (*SagaCompensation, error) {
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SagaCompensationUpdateOne) SaveX(ctx context.Context) *SagaCompensation {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SagaCompensationUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SagaCompensationUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (scuo *SagaCompensationUpdateOne) sqlSave(ctx context.Context) (_node *SagaCompensation, err error) {
	_spec := sqlgraph.NewUpdateSpec(sagacompensation.Table, sagacompensation.Columns, sqlgraph.NewFieldSpec(sagacompensation.FieldID, field.TypeString))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SagaCompensation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sagacompensation.FieldID)
		for _, f := range fields {
			if !sagacompensation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sagacompensation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.Order(); ok {
		_spec.SetField(sagacompensation.FieldOrder, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedOrder(); ok {
		_spec.AddField(sagacompensation.FieldOrder, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.NextCompensationName(); ok {
		_spec.SetField(sagacompensation.FieldNextCompensationName, field.TypeString, value)
	}
	if scuo.mutation.ExecutionUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagacompensation.ExecutionUnitTable,
			Columns: []string{sagacompensation.ExecutionUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ExecutionUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagacompensation.ExecutionUnitTable,
			Columns: []string{sagacompensation.ExecutionUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sagacompensation.TaskTable,
			Columns: []string{sagacompensation.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sagacompensation.TaskTable,
			Columns: []string{sagacompensation.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagacompensation.TransactionTable,
			Columns: []string{sagacompensation.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagatransaction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagacompensation.TransactionTable,
			Columns: []string{sagacompensation.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagatransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SagaCompensation{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagacompensation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
