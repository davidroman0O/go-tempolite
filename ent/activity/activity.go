// Code generated by ent, DO NOT EDIT.

package activity

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the activity type in the database.
	Label = "activity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHandlerName holds the string denoting the handler_name field in the database.
	FieldHandlerName = "handler_name"
	// FieldInput holds the string denoting the input field in the database.
	FieldInput = "input"
	// FieldRetryPolicy holds the string denoting the retry_policy field in the database.
	FieldRetryPolicy = "retry_policy"
	// FieldTimeout holds the string denoting the timeout field in the database.
	FieldTimeout = "timeout"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeExecutions holds the string denoting the executions edge name in mutations.
	EdgeExecutions = "executions"
	// EdgeWorkflow holds the string denoting the workflow edge name in mutations.
	EdgeWorkflow = "workflow"
	// EdgeSagas holds the string denoting the sagas edge name in mutations.
	EdgeSagas = "sagas"
	// EdgeSideEffects holds the string denoting the side_effects edge name in mutations.
	EdgeSideEffects = "side_effects"
	// Table holds the table name of the activity in the database.
	Table = "activities"
	// ExecutionsTable is the table that holds the executions relation/edge.
	ExecutionsTable = "activity_executions"
	// ExecutionsInverseTable is the table name for the ActivityExecution entity.
	// It exists in this package in order to avoid circular dependency with the "activityexecution" package.
	ExecutionsInverseTable = "activity_executions"
	// ExecutionsColumn is the table column denoting the executions relation/edge.
	ExecutionsColumn = "activity_executions"
	// WorkflowTable is the table that holds the workflow relation/edge.
	WorkflowTable = "activities"
	// WorkflowInverseTable is the table name for the Workflow entity.
	// It exists in this package in order to avoid circular dependency with the "workflow" package.
	WorkflowInverseTable = "workflows"
	// WorkflowColumn is the table column denoting the workflow relation/edge.
	WorkflowColumn = "workflow_activities"
	// SagasTable is the table that holds the sagas relation/edge.
	SagasTable = "sagas"
	// SagasInverseTable is the table name for the Saga entity.
	// It exists in this package in order to avoid circular dependency with the "saga" package.
	SagasInverseTable = "sagas"
	// SagasColumn is the table column denoting the sagas relation/edge.
	SagasColumn = "activity_sagas"
	// SideEffectsTable is the table that holds the side_effects relation/edge.
	SideEffectsTable = "side_effects"
	// SideEffectsInverseTable is the table name for the SideEffect entity.
	// It exists in this package in order to avoid circular dependency with the "sideeffect" package.
	SideEffectsInverseTable = "side_effects"
	// SideEffectsColumn is the table column denoting the side_effects relation/edge.
	SideEffectsColumn = "activity_side_effects"
)

// Columns holds all SQL columns for activity fields.
var Columns = []string{
	FieldID,
	FieldHandlerName,
	FieldInput,
	FieldRetryPolicy,
	FieldTimeout,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "activities"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"run_workflow",
	"run_activities",
	"workflow_activities",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// HandlerNameValidator is a validator for the "handler_name" field. It is called by the builders before save.
	HandlerNameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Activity queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHandlerName orders the results by the handler_name field.
func ByHandlerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandlerName, opts...).ToFunc()
}

// ByTimeout orders the results by the timeout field.
func ByTimeout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeout, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByExecutionsCount orders the results by executions count.
func ByExecutionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExecutionsStep(), opts...)
	}
}

// ByExecutions orders the results by executions terms.
func ByExecutions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExecutionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkflowField orders the results by workflow field.
func ByWorkflowField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkflowStep(), sql.OrderByField(field, opts...))
	}
}

// BySagasCount orders the results by sagas count.
func BySagasCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSagasStep(), opts...)
	}
}

// BySagas orders the results by sagas terms.
func BySagas(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSagasStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySideEffectsCount orders the results by side_effects count.
func BySideEffectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSideEffectsStep(), opts...)
	}
}

// BySideEffects orders the results by side_effects terms.
func BySideEffects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSideEffectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newExecutionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExecutionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExecutionsTable, ExecutionsColumn),
	)
}
func newWorkflowStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkflowInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkflowTable, WorkflowColumn),
	)
}
func newSagasStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SagasInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SagasTable, SagasColumn),
	)
}
func newSideEffectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SideEffectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SideEffectsTable, SideEffectsColumn),
	)
}
