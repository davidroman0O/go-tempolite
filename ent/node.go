// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/compensationtask"
	"github.com/davidroman0O/go-tempolite/ent/handlertask"
	"github.com/davidroman0O/go-tempolite/ent/node"
	"github.com/davidroman0O/go-tempolite/ent/sagatask"
	"github.com/davidroman0O/go-tempolite/ent/sideeffecttask"
)

// Node is the model entity for the Node schema.
type Node struct {
	config
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NodeQuery when eager-loading is set.
	Edges                  NodeEdges `json:"edges"`
	node_children          *string
	node_handler_task      *string
	node_saga_step_task    *int
	node_side_effect_task  *int
	node_compensation_task *int
	selectValues           sql.SelectValues
}

// NodeEdges holds the relations/edges for other nodes in the graph.
type NodeEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Node `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Node `json:"children,omitempty"`
	// HandlerTask holds the value of the handler_task edge.
	HandlerTask *HandlerTask `json:"handler_task,omitempty"`
	// SagaStepTask holds the value of the saga_step_task edge.
	SagaStepTask *SagaTask `json:"saga_step_task,omitempty"`
	// SideEffectTask holds the value of the side_effect_task edge.
	SideEffectTask *SideEffectTask `json:"side_effect_task,omitempty"`
	// CompensationTask holds the value of the compensation_task edge.
	CompensationTask *CompensationTask `json:"compensation_task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NodeEdges) ParentOrErr() (*Node, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: node.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e NodeEdges) ChildrenOrErr() ([]*Node, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// HandlerTaskOrErr returns the HandlerTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NodeEdges) HandlerTaskOrErr() (*HandlerTask, error) {
	if e.HandlerTask != nil {
		return e.HandlerTask, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: handlertask.Label}
	}
	return nil, &NotLoadedError{edge: "handler_task"}
}

// SagaStepTaskOrErr returns the SagaStepTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NodeEdges) SagaStepTaskOrErr() (*SagaTask, error) {
	if e.SagaStepTask != nil {
		return e.SagaStepTask, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: sagatask.Label}
	}
	return nil, &NotLoadedError{edge: "saga_step_task"}
}

// SideEffectTaskOrErr returns the SideEffectTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NodeEdges) SideEffectTaskOrErr() (*SideEffectTask, error) {
	if e.SideEffectTask != nil {
		return e.SideEffectTask, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: sideeffecttask.Label}
	}
	return nil, &NotLoadedError{edge: "side_effect_task"}
}

// CompensationTaskOrErr returns the CompensationTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NodeEdges) CompensationTaskOrErr() (*CompensationTask, error) {
	if e.CompensationTask != nil {
		return e.CompensationTask, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: compensationtask.Label}
	}
	return nil, &NotLoadedError{edge: "compensation_task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Node) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case node.FieldID:
			values[i] = new(sql.NullString)
		case node.ForeignKeys[0]: // node_children
			values[i] = new(sql.NullString)
		case node.ForeignKeys[1]: // node_handler_task
			values[i] = new(sql.NullString)
		case node.ForeignKeys[2]: // node_saga_step_task
			values[i] = new(sql.NullInt64)
		case node.ForeignKeys[3]: // node_side_effect_task
			values[i] = new(sql.NullInt64)
		case node.ForeignKeys[4]: // node_compensation_task
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Node fields.
func (n *Node) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case node.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				n.ID = value.String
			}
		case node.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_children", values[i])
			} else if value.Valid {
				n.node_children = new(string)
				*n.node_children = value.String
			}
		case node.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_handler_task", values[i])
			} else if value.Valid {
				n.node_handler_task = new(string)
				*n.node_handler_task = value.String
			}
		case node.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field node_saga_step_task", value)
			} else if value.Valid {
				n.node_saga_step_task = new(int)
				*n.node_saga_step_task = int(value.Int64)
			}
		case node.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field node_side_effect_task", value)
			} else if value.Valid {
				n.node_side_effect_task = new(int)
				*n.node_side_effect_task = int(value.Int64)
			}
		case node.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field node_compensation_task", value)
			} else if value.Valid {
				n.node_compensation_task = new(int)
				*n.node_compensation_task = int(value.Int64)
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Node.
// This includes values selected through modifiers, order, etc.
func (n *Node) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the Node entity.
func (n *Node) QueryParent() *NodeQuery {
	return NewNodeClient(n.config).QueryParent(n)
}

// QueryChildren queries the "children" edge of the Node entity.
func (n *Node) QueryChildren() *NodeQuery {
	return NewNodeClient(n.config).QueryChildren(n)
}

// QueryHandlerTask queries the "handler_task" edge of the Node entity.
func (n *Node) QueryHandlerTask() *HandlerTaskQuery {
	return NewNodeClient(n.config).QueryHandlerTask(n)
}

// QuerySagaStepTask queries the "saga_step_task" edge of the Node entity.
func (n *Node) QuerySagaStepTask() *SagaTaskQuery {
	return NewNodeClient(n.config).QuerySagaStepTask(n)
}

// QuerySideEffectTask queries the "side_effect_task" edge of the Node entity.
func (n *Node) QuerySideEffectTask() *SideEffectTaskQuery {
	return NewNodeClient(n.config).QuerySideEffectTask(n)
}

// QueryCompensationTask queries the "compensation_task" edge of the Node entity.
func (n *Node) QueryCompensationTask() *CompensationTaskQuery {
	return NewNodeClient(n.config).QueryCompensationTask(n)
}

// Update returns a builder for updating this Node.
// Note that you need to call Node.Unwrap() before calling this method if this Node
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Node) Update() *NodeUpdateOne {
	return NewNodeClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Node entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Node) Unwrap() *Node {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Node is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Node) String() string {
	var builder strings.Builder
	builder.WriteString("Node(")
	builder.WriteString(fmt.Sprintf("id=%v", n.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Nodes is a parsable slice of Node.
type Nodes []*Node
