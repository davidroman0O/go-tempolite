// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/sideeffecttask"
)

// SideEffectTaskQuery is the builder for querying SideEffectTask entities.
type SideEffectTaskQuery struct {
	config
	ctx        *QueryContext
	order      []sideeffecttask.OrderOption
	inters     []Interceptor
	predicates []predicate.SideEffectTask
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SideEffectTaskQuery builder.
func (setq *SideEffectTaskQuery) Where(ps ...predicate.SideEffectTask) *SideEffectTaskQuery {
	setq.predicates = append(setq.predicates, ps...)
	return setq
}

// Limit the number of records to be returned by this query.
func (setq *SideEffectTaskQuery) Limit(limit int) *SideEffectTaskQuery {
	setq.ctx.Limit = &limit
	return setq
}

// Offset to start from.
func (setq *SideEffectTaskQuery) Offset(offset int) *SideEffectTaskQuery {
	setq.ctx.Offset = &offset
	return setq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (setq *SideEffectTaskQuery) Unique(unique bool) *SideEffectTaskQuery {
	setq.ctx.Unique = &unique
	return setq
}

// Order specifies how the records should be ordered.
func (setq *SideEffectTaskQuery) Order(o ...sideeffecttask.OrderOption) *SideEffectTaskQuery {
	setq.order = append(setq.order, o...)
	return setq
}

// First returns the first SideEffectTask entity from the query.
// Returns a *NotFoundError when no SideEffectTask was found.
func (setq *SideEffectTaskQuery) First(ctx context.Context) (*SideEffectTask, error) {
	nodes, err := setq.Limit(1).All(setContextOp(ctx, setq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sideeffecttask.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (setq *SideEffectTaskQuery) FirstX(ctx context.Context) *SideEffectTask {
	node, err := setq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SideEffectTask ID from the query.
// Returns a *NotFoundError when no SideEffectTask ID was found.
func (setq *SideEffectTaskQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = setq.Limit(1).IDs(setContextOp(ctx, setq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sideeffecttask.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (setq *SideEffectTaskQuery) FirstIDX(ctx context.Context) int {
	id, err := setq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SideEffectTask entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SideEffectTask entity is found.
// Returns a *NotFoundError when no SideEffectTask entities are found.
func (setq *SideEffectTaskQuery) Only(ctx context.Context) (*SideEffectTask, error) {
	nodes, err := setq.Limit(2).All(setContextOp(ctx, setq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sideeffecttask.Label}
	default:
		return nil, &NotSingularError{sideeffecttask.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (setq *SideEffectTaskQuery) OnlyX(ctx context.Context) *SideEffectTask {
	node, err := setq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SideEffectTask ID in the query.
// Returns a *NotSingularError when more than one SideEffectTask ID is found.
// Returns a *NotFoundError when no entities are found.
func (setq *SideEffectTaskQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = setq.Limit(2).IDs(setContextOp(ctx, setq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sideeffecttask.Label}
	default:
		err = &NotSingularError{sideeffecttask.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (setq *SideEffectTaskQuery) OnlyIDX(ctx context.Context) int {
	id, err := setq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SideEffectTasks.
func (setq *SideEffectTaskQuery) All(ctx context.Context) ([]*SideEffectTask, error) {
	ctx = setContextOp(ctx, setq.ctx, ent.OpQueryAll)
	if err := setq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SideEffectTask, *SideEffectTaskQuery]()
	return withInterceptors[[]*SideEffectTask](ctx, setq, qr, setq.inters)
}

// AllX is like All, but panics if an error occurs.
func (setq *SideEffectTaskQuery) AllX(ctx context.Context) []*SideEffectTask {
	nodes, err := setq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SideEffectTask IDs.
func (setq *SideEffectTaskQuery) IDs(ctx context.Context) (ids []int, err error) {
	if setq.ctx.Unique == nil && setq.path != nil {
		setq.Unique(true)
	}
	ctx = setContextOp(ctx, setq.ctx, ent.OpQueryIDs)
	if err = setq.Select(sideeffecttask.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (setq *SideEffectTaskQuery) IDsX(ctx context.Context) []int {
	ids, err := setq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (setq *SideEffectTaskQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, setq.ctx, ent.OpQueryCount)
	if err := setq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, setq, querierCount[*SideEffectTaskQuery](), setq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (setq *SideEffectTaskQuery) CountX(ctx context.Context) int {
	count, err := setq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (setq *SideEffectTaskQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, setq.ctx, ent.OpQueryExist)
	switch _, err := setq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (setq *SideEffectTaskQuery) ExistX(ctx context.Context) bool {
	exist, err := setq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SideEffectTaskQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (setq *SideEffectTaskQuery) Clone() *SideEffectTaskQuery {
	if setq == nil {
		return nil
	}
	return &SideEffectTaskQuery{
		config:     setq.config,
		ctx:        setq.ctx.Clone(),
		order:      append([]sideeffecttask.OrderOption{}, setq.order...),
		inters:     append([]Interceptor{}, setq.inters...),
		predicates: append([]predicate.SideEffectTask{}, setq.predicates...),
		// clone intermediate query.
		sql:  setq.sql.Clone(),
		path: setq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (setq *SideEffectTaskQuery) GroupBy(field string, fields ...string) *SideEffectTaskGroupBy {
	setq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SideEffectTaskGroupBy{build: setq}
	grbuild.flds = &setq.ctx.Fields
	grbuild.label = sideeffecttask.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (setq *SideEffectTaskQuery) Select(fields ...string) *SideEffectTaskSelect {
	setq.ctx.Fields = append(setq.ctx.Fields, fields...)
	sbuild := &SideEffectTaskSelect{SideEffectTaskQuery: setq}
	sbuild.label = sideeffecttask.Label
	sbuild.flds, sbuild.scan = &setq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SideEffectTaskSelect configured with the given aggregations.
func (setq *SideEffectTaskQuery) Aggregate(fns ...AggregateFunc) *SideEffectTaskSelect {
	return setq.Select().Aggregate(fns...)
}

func (setq *SideEffectTaskQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range setq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, setq); err != nil {
				return err
			}
		}
	}
	for _, f := range setq.ctx.Fields {
		if !sideeffecttask.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if setq.path != nil {
		prev, err := setq.path(ctx)
		if err != nil {
			return err
		}
		setq.sql = prev
	}
	return nil
}

func (setq *SideEffectTaskQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SideEffectTask, error) {
	var (
		nodes = []*SideEffectTask{}
		_spec = setq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SideEffectTask).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SideEffectTask{config: setq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, setq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (setq *SideEffectTaskQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := setq.querySpec()
	_spec.Node.Columns = setq.ctx.Fields
	if len(setq.ctx.Fields) > 0 {
		_spec.Unique = setq.ctx.Unique != nil && *setq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, setq.driver, _spec)
}

func (setq *SideEffectTaskQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(sideeffecttask.Table, sideeffecttask.Columns, sqlgraph.NewFieldSpec(sideeffecttask.FieldID, field.TypeInt))
	_spec.From = setq.sql
	if unique := setq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if setq.path != nil {
		_spec.Unique = true
	}
	if fields := setq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sideeffecttask.FieldID)
		for i := range fields {
			if fields[i] != sideeffecttask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := setq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := setq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := setq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := setq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (setq *SideEffectTaskQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(setq.driver.Dialect())
	t1 := builder.Table(sideeffecttask.Table)
	columns := setq.ctx.Fields
	if len(columns) == 0 {
		columns = sideeffecttask.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if setq.sql != nil {
		selector = setq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if setq.ctx.Unique != nil && *setq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range setq.predicates {
		p(selector)
	}
	for _, p := range setq.order {
		p(selector)
	}
	if offset := setq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := setq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SideEffectTaskGroupBy is the group-by builder for SideEffectTask entities.
type SideEffectTaskGroupBy struct {
	selector
	build *SideEffectTaskQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (setgb *SideEffectTaskGroupBy) Aggregate(fns ...AggregateFunc) *SideEffectTaskGroupBy {
	setgb.fns = append(setgb.fns, fns...)
	return setgb
}

// Scan applies the selector query and scans the result into the given value.
func (setgb *SideEffectTaskGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, setgb.build.ctx, ent.OpQueryGroupBy)
	if err := setgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SideEffectTaskQuery, *SideEffectTaskGroupBy](ctx, setgb.build, setgb, setgb.build.inters, v)
}

func (setgb *SideEffectTaskGroupBy) sqlScan(ctx context.Context, root *SideEffectTaskQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(setgb.fns))
	for _, fn := range setgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*setgb.flds)+len(setgb.fns))
		for _, f := range *setgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*setgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := setgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SideEffectTaskSelect is the builder for selecting fields of SideEffectTask entities.
type SideEffectTaskSelect struct {
	*SideEffectTaskQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sets *SideEffectTaskSelect) Aggregate(fns ...AggregateFunc) *SideEffectTaskSelect {
	sets.fns = append(sets.fns, fns...)
	return sets
}

// Scan applies the selector query and scans the result into the given value.
func (sets *SideEffectTaskSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sets.ctx, ent.OpQuerySelect)
	if err := sets.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SideEffectTaskQuery, *SideEffectTaskSelect](ctx, sets.SideEffectTaskQuery, sets, sets.inters, v)
}

func (sets *SideEffectTaskSelect) sqlScan(ctx context.Context, root *SideEffectTaskQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sets.fns))
	for _, fn := range sets.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sets.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sets.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
