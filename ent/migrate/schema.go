// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ExecutionContextsColumns holds the columns for the "execution_contexts" table.
	ExecutionContextsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "current_run_id", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"running", "completed", "failed"}},
		{Name: "start_time", Type: field.TypeTime},
		{Name: "end_time", Type: field.TypeTime, Nullable: true},
	}
	// ExecutionContextsTable holds the schema information for the "execution_contexts" table.
	ExecutionContextsTable = &schema.Table{
		Name:       "execution_contexts",
		Columns:    ExecutionContextsColumns,
		PrimaryKey: []*schema.Column{ExecutionContextsColumns[0]},
	}
	// ExecutionUnitsColumns holds the columns for the "execution_units" table.
	ExecutionUnitsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"handler", "side_effect", "saga"}},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "running", "completed", "failed"}},
		{Name: "start_time", Type: field.TypeTime},
		{Name: "end_time", Type: field.TypeTime, Nullable: true},
		{Name: "retry_count", Type: field.TypeInt, Default: 0},
		{Name: "max_retries", Type: field.TypeInt, Default: 3},
		{Name: "execution_context_execution_units", Type: field.TypeString, Nullable: true},
		{Name: "execution_unit_children", Type: field.TypeString, Nullable: true},
	}
	// ExecutionUnitsTable holds the schema information for the "execution_units" table.
	ExecutionUnitsTable = &schema.Table{
		Name:       "execution_units",
		Columns:    ExecutionUnitsColumns,
		PrimaryKey: []*schema.Column{ExecutionUnitsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "execution_units_execution_contexts_execution_units",
				Columns:    []*schema.Column{ExecutionUnitsColumns[7]},
				RefColumns: []*schema.Column{ExecutionContextsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "execution_units_execution_units_children",
				Columns:    []*schema.Column{ExecutionUnitsColumns[8]},
				RefColumns: []*schema.Column{ExecutionUnitsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SagaCompensationsColumns holds the columns for the "saga_compensations" table.
	SagaCompensationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "next_compensation_name", Type: field.TypeString},
		{Name: "execution_unit_saga_compensations", Type: field.TypeString, Nullable: true},
		{Name: "saga_compensation_task", Type: field.TypeString, Nullable: true},
		{Name: "saga_transaction_compensation", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// SagaCompensationsTable holds the schema information for the "saga_compensations" table.
	SagaCompensationsTable = &schema.Table{
		Name:       "saga_compensations",
		Columns:    SagaCompensationsColumns,
		PrimaryKey: []*schema.Column{SagaCompensationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "saga_compensations_execution_units_saga_compensations",
				Columns:    []*schema.Column{SagaCompensationsColumns[3]},
				RefColumns: []*schema.Column{ExecutionUnitsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "saga_compensations_tasks_task",
				Columns:    []*schema.Column{SagaCompensationsColumns[4]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "saga_compensations_saga_transactions_compensation",
				Columns:    []*schema.Column{SagaCompensationsColumns[5]},
				RefColumns: []*schema.Column{SagaTransactionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SagaTransactionsColumns holds the columns for the "saga_transactions" table.
	SagaTransactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "order", Type: field.TypeInt},
		{Name: "next_transaction_name", Type: field.TypeString},
		{Name: "failure_compensation_name", Type: field.TypeString},
		{Name: "execution_unit_saga_transactions", Type: field.TypeString, Nullable: true},
		{Name: "saga_transaction_task", Type: field.TypeString, Nullable: true},
	}
	// SagaTransactionsTable holds the schema information for the "saga_transactions" table.
	SagaTransactionsTable = &schema.Table{
		Name:       "saga_transactions",
		Columns:    SagaTransactionsColumns,
		PrimaryKey: []*schema.Column{SagaTransactionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "saga_transactions_execution_units_saga_transactions",
				Columns:    []*schema.Column{SagaTransactionsColumns[4]},
				RefColumns: []*schema.Column{ExecutionUnitsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "saga_transactions_tasks_task",
				Columns:    []*schema.Column{SagaTransactionsColumns[5]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"handler", "side_effect", "saga_transaction", "saga_compensation"}},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "in_progress", "completed", "failed"}},
		{Name: "handler_name", Type: field.TypeString},
		{Name: "payload", Type: field.TypeBytes},
		{Name: "result", Type: field.TypeBytes, Nullable: true},
		{Name: "error", Type: field.TypeBytes, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "completed_at", Type: field.TypeTime, Nullable: true},
		{Name: "execution_unit_tasks", Type: field.TypeString, Nullable: true},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:       "tasks",
		Columns:    TasksColumns,
		PrimaryKey: []*schema.Column{TasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tasks_execution_units_tasks",
				Columns:    []*schema.Column{TasksColumns[9]},
				RefColumns: []*schema.Column{ExecutionUnitsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ExecutionContextsTable,
		ExecutionUnitsTable,
		SagaCompensationsTable,
		SagaTransactionsTable,
		TasksTable,
	}
)

func init() {
	ExecutionUnitsTable.ForeignKeys[0].RefTable = ExecutionContextsTable
	ExecutionUnitsTable.ForeignKeys[1].RefTable = ExecutionUnitsTable
	SagaCompensationsTable.ForeignKeys[0].RefTable = ExecutionUnitsTable
	SagaCompensationsTable.ForeignKeys[1].RefTable = TasksTable
	SagaCompensationsTable.ForeignKeys[2].RefTable = SagaTransactionsTable
	SagaTransactionsTable.ForeignKeys[0].RefTable = ExecutionUnitsTable
	SagaTransactionsTable.ForeignKeys[1].RefTable = TasksTable
	TasksTable.ForeignKeys[0].RefTable = ExecutionUnitsTable
}
