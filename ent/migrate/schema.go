// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ActivitiesColumns holds the columns for the "activities" table.
	ActivitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "identity", Type: field.TypeString},
		{Name: "handler_name", Type: field.TypeString},
		{Name: "input", Type: field.TypeJSON},
		{Name: "retry_policy", Type: field.TypeJSON, Nullable: true},
		{Name: "timeout", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "workflow_activities", Type: field.TypeString, Nullable: true},
	}
	// ActivitiesTable holds the schema information for the "activities" table.
	ActivitiesTable = &schema.Table{
		Name:       "activities",
		Columns:    ActivitiesColumns,
		PrimaryKey: []*schema.Column{ActivitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "activities_workflows_activities",
				Columns:    []*schema.Column{ActivitiesColumns[7]},
				RefColumns: []*schema.Column{WorkflowsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ActivityExecutionsColumns holds the columns for the "activity_executions" table.
	ActivityExecutionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "run_id", Type: field.TypeString, Unique: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Pending", "Running", "Completed", "Failed", "Retried"}, Default: "Pending"},
		{Name: "attempt", Type: field.TypeInt, Default: 1},
		{Name: "output", Type: field.TypeJSON, Nullable: true},
		{Name: "error", Type: field.TypeString, Nullable: true},
		{Name: "started_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "activity_executions", Type: field.TypeString},
		{Name: "workflow_execution_activity_executions", Type: field.TypeString, Nullable: true},
	}
	// ActivityExecutionsTable holds the schema information for the "activity_executions" table.
	ActivityExecutionsTable = &schema.Table{
		Name:       "activity_executions",
		Columns:    ActivityExecutionsColumns,
		PrimaryKey: []*schema.Column{ActivityExecutionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "activity_executions_activities_executions",
				Columns:    []*schema.Column{ActivityExecutionsColumns[8]},
				RefColumns: []*schema.Column{ActivitiesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "activity_executions_workflow_executions_activity_executions",
				Columns:    []*schema.Column{ActivityExecutionsColumns[9]},
				RefColumns: []*schema.Column{WorkflowExecutionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RunsColumns holds the columns for the "runs" table.
	RunsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "run_id", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"workflow", "activity"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "run_workflow", Type: field.TypeString, Nullable: true},
		{Name: "run_activity", Type: field.TypeString, Nullable: true},
	}
	// RunsTable holds the schema information for the "runs" table.
	RunsTable = &schema.Table{
		Name:       "runs",
		Columns:    RunsColumns,
		PrimaryKey: []*schema.Column{RunsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "runs_workflows_workflow",
				Columns:    []*schema.Column{RunsColumns[4]},
				RefColumns: []*schema.Column{WorkflowsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "runs_activities_activity",
				Columns:    []*schema.Column{RunsColumns[5]},
				RefColumns: []*schema.Column{ActivitiesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SagasColumns holds the columns for the "sagas" table.
	SagasColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "input", Type: field.TypeJSON},
		{Name: "retry_policy", Type: field.TypeJSON, Nullable: true},
		{Name: "timeout", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "activity_sagas", Type: field.TypeString, Nullable: true},
	}
	// SagasTable holds the schema information for the "sagas" table.
	SagasTable = &schema.Table{
		Name:       "sagas",
		Columns:    SagasColumns,
		PrimaryKey: []*schema.Column{SagasColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sagas_activities_sagas",
				Columns:    []*schema.Column{SagasColumns[6]},
				RefColumns: []*schema.Column{ActivitiesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SagaExecutionsColumns holds the columns for the "saga_executions" table.
	SagaExecutionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "run_id", Type: field.TypeString, Unique: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Pending", "Running", "Completed", "Failed", "Compensating", "Compensated"}, Default: "Pending"},
		{Name: "attempt", Type: field.TypeInt, Default: 1},
		{Name: "output", Type: field.TypeJSON, Nullable: true},
		{Name: "started_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "saga_executions", Type: field.TypeString},
	}
	// SagaExecutionsTable holds the schema information for the "saga_executions" table.
	SagaExecutionsTable = &schema.Table{
		Name:       "saga_executions",
		Columns:    SagaExecutionsColumns,
		PrimaryKey: []*schema.Column{SagaExecutionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "saga_executions_sagas_executions",
				Columns:    []*schema.Column{SagaExecutionsColumns[7]},
				RefColumns: []*schema.Column{SagasColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SagaStepExecutionsColumns holds the columns for the "saga_step_executions" table.
	SagaStepExecutionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "handler_name", Type: field.TypeString},
		{Name: "step_type", Type: field.TypeEnum, Enums: []string{"Transaction", "Compensation"}},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Pending", "Running", "Completed", "Failed", "Compensated"}, Default: "Pending"},
		{Name: "sequence", Type: field.TypeInt},
		{Name: "attempt", Type: field.TypeInt, Default: 1},
		{Name: "input", Type: field.TypeJSON},
		{Name: "output", Type: field.TypeJSON, Nullable: true},
		{Name: "started_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "saga_execution_steps", Type: field.TypeString},
	}
	// SagaStepExecutionsTable holds the schema information for the "saga_step_executions" table.
	SagaStepExecutionsTable = &schema.Table{
		Name:       "saga_step_executions",
		Columns:    SagaStepExecutionsColumns,
		PrimaryKey: []*schema.Column{SagaStepExecutionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "saga_step_executions_saga_executions_steps",
				Columns:    []*schema.Column{SagaStepExecutionsColumns[10]},
				RefColumns: []*schema.Column{SagaExecutionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SideEffectsColumns holds the columns for the "side_effects" table.
	SideEffectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "identity", Type: field.TypeString},
		{Name: "handler_name", Type: field.TypeString},
		{Name: "input", Type: field.TypeJSON},
		{Name: "retry_policy", Type: field.TypeJSON, Nullable: true},
		{Name: "timeout", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "activity_side_effects", Type: field.TypeString, Nullable: true},
	}
	// SideEffectsTable holds the schema information for the "side_effects" table.
	SideEffectsTable = &schema.Table{
		Name:       "side_effects",
		Columns:    SideEffectsColumns,
		PrimaryKey: []*schema.Column{SideEffectsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "side_effects_activities_side_effects",
				Columns:    []*schema.Column{SideEffectsColumns[7]},
				RefColumns: []*schema.Column{ActivitiesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SideEffectExecutionsColumns holds the columns for the "side_effect_executions" table.
	SideEffectExecutionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "run_id", Type: field.TypeString, Unique: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Pending", "Running", "Completed", "Failed"}, Default: "Pending"},
		{Name: "attempt", Type: field.TypeInt, Default: 1},
		{Name: "output", Type: field.TypeJSON, Nullable: true},
		{Name: "started_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "activity_execution_side_effect_executions", Type: field.TypeString, Nullable: true},
		{Name: "side_effect_executions", Type: field.TypeString},
	}
	// SideEffectExecutionsTable holds the schema information for the "side_effect_executions" table.
	SideEffectExecutionsTable = &schema.Table{
		Name:       "side_effect_executions",
		Columns:    SideEffectExecutionsColumns,
		PrimaryKey: []*schema.Column{SideEffectExecutionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "side_effect_executions_activity_executions_side_effect_executions",
				Columns:    []*schema.Column{SideEffectExecutionsColumns[7]},
				RefColumns: []*schema.Column{ActivityExecutionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "side_effect_executions_side_effects_executions",
				Columns:    []*schema.Column{SideEffectExecutionsColumns[8]},
				RefColumns: []*schema.Column{SideEffectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SignalsColumns holds the columns for the "signals" table.
	SignalsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "data", Type: field.TypeJSON, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Pending", "Received", "Processed"}, Default: "Pending"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "workflow_execution_signals", Type: field.TypeString, Nullable: true},
	}
	// SignalsTable holds the schema information for the "signals" table.
	SignalsTable = &schema.Table{
		Name:       "signals",
		Columns:    SignalsColumns,
		PrimaryKey: []*schema.Column{SignalsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "signals_workflow_executions_signals",
				Columns:    []*schema.Column{SignalsColumns[6]},
				RefColumns: []*schema.Column{WorkflowExecutionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// WorkflowsColumns holds the columns for the "workflows" table.
	WorkflowsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "identity", Type: field.TypeString},
		{Name: "handler_name", Type: field.TypeString},
		{Name: "input", Type: field.TypeJSON},
		{Name: "retry_policy", Type: field.TypeJSON, Nullable: true},
		{Name: "timeout", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
	}
	// WorkflowsTable holds the schema information for the "workflows" table.
	WorkflowsTable = &schema.Table{
		Name:       "workflows",
		Columns:    WorkflowsColumns,
		PrimaryKey: []*schema.Column{WorkflowsColumns[0]},
	}
	// WorkflowExecutionsColumns holds the columns for the "workflow_executions" table.
	WorkflowExecutionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "run_id", Type: field.TypeString, Unique: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Pending", "Running", "Completed", "Failed", "Paused", "Retried", "Cancelled"}, Default: "Pending"},
		{Name: "output", Type: field.TypeJSON, Nullable: true},
		{Name: "error", Type: field.TypeString, Nullable: true},
		{Name: "started_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "workflow_executions", Type: field.TypeString},
	}
	// WorkflowExecutionsTable holds the schema information for the "workflow_executions" table.
	WorkflowExecutionsTable = &schema.Table{
		Name:       "workflow_executions",
		Columns:    WorkflowExecutionsColumns,
		PrimaryKey: []*schema.Column{WorkflowExecutionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "workflow_executions_workflows_executions",
				Columns:    []*schema.Column{WorkflowExecutionsColumns[7]},
				RefColumns: []*schema.Column{WorkflowsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ActivitiesTable,
		ActivityExecutionsTable,
		RunsTable,
		SagasTable,
		SagaExecutionsTable,
		SagaStepExecutionsTable,
		SideEffectsTable,
		SideEffectExecutionsTable,
		SignalsTable,
		WorkflowsTable,
		WorkflowExecutionsTable,
	}
)

func init() {
	ActivitiesTable.ForeignKeys[0].RefTable = WorkflowsTable
	ActivityExecutionsTable.ForeignKeys[0].RefTable = ActivitiesTable
	ActivityExecutionsTable.ForeignKeys[1].RefTable = WorkflowExecutionsTable
	RunsTable.ForeignKeys[0].RefTable = WorkflowsTable
	RunsTable.ForeignKeys[1].RefTable = ActivitiesTable
	SagasTable.ForeignKeys[0].RefTable = ActivitiesTable
	SagaExecutionsTable.ForeignKeys[0].RefTable = SagasTable
	SagaStepExecutionsTable.ForeignKeys[0].RefTable = SagaExecutionsTable
	SideEffectsTable.ForeignKeys[0].RefTable = ActivitiesTable
	SideEffectExecutionsTable.ForeignKeys[0].RefTable = ActivityExecutionsTable
	SideEffectExecutionsTable.ForeignKeys[1].RefTable = SideEffectsTable
	SignalsTable.ForeignKeys[0].RefTable = WorkflowExecutionsTable
	WorkflowExecutionsTable.ForeignKeys[0].RefTable = WorkflowsTable
}
