// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CompensationTasksColumns holds the columns for the "compensation_tasks" table.
	CompensationTasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// CompensationTasksTable holds the schema information for the "compensation_tasks" table.
	CompensationTasksTable = &schema.Table{
		Name:       "compensation_tasks",
		Columns:    CompensationTasksColumns,
		PrimaryKey: []*schema.Column{CompensationTasksColumns[0]},
	}
	// ExecutionContextsColumns holds the columns for the "execution_contexts" table.
	ExecutionContextsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "current_run_id", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"running", "completed", "failed"}},
		{Name: "start_time", Type: field.TypeTime},
		{Name: "end_time", Type: field.TypeTime, Nullable: true},
	}
	// ExecutionContextsTable holds the schema information for the "execution_contexts" table.
	ExecutionContextsTable = &schema.Table{
		Name:       "execution_contexts",
		Columns:    ExecutionContextsColumns,
		PrimaryKey: []*schema.Column{ExecutionContextsColumns[0]},
	}
	// HandlerExecutionsColumns holds the columns for the "handler_executions" table.
	HandlerExecutionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "run_id", Type: field.TypeString},
		{Name: "handler_name", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "running", "completed", "failed"}},
		{Name: "start_time", Type: field.TypeTime},
		{Name: "end_time", Type: field.TypeTime, Nullable: true},
		{Name: "retry_count", Type: field.TypeInt, Default: 0},
		{Name: "max_retries", Type: field.TypeInt, Default: 3},
		{Name: "execution_context_handler_executions", Type: field.TypeString, Nullable: true},
		{Name: "handler_execution_children", Type: field.TypeString, Nullable: true},
	}
	// HandlerExecutionsTable holds the schema information for the "handler_executions" table.
	HandlerExecutionsTable = &schema.Table{
		Name:       "handler_executions",
		Columns:    HandlerExecutionsColumns,
		PrimaryKey: []*schema.Column{HandlerExecutionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "handler_executions_execution_contexts_handler_executions",
				Columns:    []*schema.Column{HandlerExecutionsColumns[8]},
				RefColumns: []*schema.Column{ExecutionContextsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "handler_executions_handler_executions_children",
				Columns:    []*schema.Column{HandlerExecutionsColumns[9]},
				RefColumns: []*schema.Column{HandlerExecutionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// HandlerTasksColumns holds the columns for the "handler_tasks" table.
	HandlerTasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "handler_name", Type: field.TypeString},
		{Name: "payload", Type: field.TypeBytes},
		{Name: "result", Type: field.TypeBytes, Nullable: true},
		{Name: "error", Type: field.TypeBytes, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "in_progress", "completed", "failed"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "completed_at", Type: field.TypeTime, Nullable: true},
		{Name: "handler_execution_tasks", Type: field.TypeString, Nullable: true},
	}
	// HandlerTasksTable holds the schema information for the "handler_tasks" table.
	HandlerTasksTable = &schema.Table{
		Name:       "handler_tasks",
		Columns:    HandlerTasksColumns,
		PrimaryKey: []*schema.Column{HandlerTasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "handler_tasks_handler_executions_tasks",
				Columns:    []*schema.Column{HandlerTasksColumns[8]},
				RefColumns: []*schema.Column{HandlerExecutionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SagaTasksColumns holds the columns for the "saga_tasks" table.
	SagaTasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// SagaTasksTable holds the schema information for the "saga_tasks" table.
	SagaTasksTable = &schema.Table{
		Name:       "saga_tasks",
		Columns:    SagaTasksColumns,
		PrimaryKey: []*schema.Column{SagaTasksColumns[0]},
	}
	// SideEffectTasksColumns holds the columns for the "side_effect_tasks" table.
	SideEffectTasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// SideEffectTasksTable holds the schema information for the "side_effect_tasks" table.
	SideEffectTasksTable = &schema.Table{
		Name:       "side_effect_tasks",
		Columns:    SideEffectTasksColumns,
		PrimaryKey: []*schema.Column{SideEffectTasksColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CompensationTasksTable,
		ExecutionContextsTable,
		HandlerExecutionsTable,
		HandlerTasksTable,
		SagaTasksTable,
		SideEffectTasksTable,
	}
)

func init() {
	HandlerExecutionsTable.ForeignKeys[0].RefTable = ExecutionContextsTable
	HandlerExecutionsTable.ForeignKeys[1].RefTable = HandlerExecutionsTable
	HandlerTasksTable.ForeignKeys[0].RefTable = HandlerExecutionsTable
}
