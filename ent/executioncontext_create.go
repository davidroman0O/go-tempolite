// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/handlerexecution"
	"github.com/davidroman0O/go-tempolite/ent/sagaexecution"
	"github.com/davidroman0O/go-tempolite/ent/sideeffectresult"
)

// ExecutionContextCreate is the builder for creating a ExecutionContext entity.
type ExecutionContextCreate struct {
	config
	mutation *ExecutionContextMutation
	hooks    []Hook
}

// SetCurrentRunID sets the "current_run_id" field.
func (ecc *ExecutionContextCreate) SetCurrentRunID(s string) *ExecutionContextCreate {
	ecc.mutation.SetCurrentRunID(s)
	return ecc
}

// SetStatus sets the "status" field.
func (ecc *ExecutionContextCreate) SetStatus(e executioncontext.Status) *ExecutionContextCreate {
	ecc.mutation.SetStatus(e)
	return ecc
}

// SetStartTime sets the "start_time" field.
func (ecc *ExecutionContextCreate) SetStartTime(t time.Time) *ExecutionContextCreate {
	ecc.mutation.SetStartTime(t)
	return ecc
}

// SetEndTime sets the "end_time" field.
func (ecc *ExecutionContextCreate) SetEndTime(t time.Time) *ExecutionContextCreate {
	ecc.mutation.SetEndTime(t)
	return ecc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ecc *ExecutionContextCreate) SetNillableEndTime(t *time.Time) *ExecutionContextCreate {
	if t != nil {
		ecc.SetEndTime(*t)
	}
	return ecc
}

// SetID sets the "id" field.
func (ecc *ExecutionContextCreate) SetID(s string) *ExecutionContextCreate {
	ecc.mutation.SetID(s)
	return ecc
}

// AddHandlerExecutionIDs adds the "handler_executions" edge to the HandlerExecution entity by IDs.
func (ecc *ExecutionContextCreate) AddHandlerExecutionIDs(ids ...string) *ExecutionContextCreate {
	ecc.mutation.AddHandlerExecutionIDs(ids...)
	return ecc
}

// AddHandlerExecutions adds the "handler_executions" edges to the HandlerExecution entity.
func (ecc *ExecutionContextCreate) AddHandlerExecutions(h ...*HandlerExecution) *ExecutionContextCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ecc.AddHandlerExecutionIDs(ids...)
}

// AddSideEffectResultIDs adds the "side_effect_results" edge to the SideEffectResult entity by IDs.
func (ecc *ExecutionContextCreate) AddSideEffectResultIDs(ids ...string) *ExecutionContextCreate {
	ecc.mutation.AddSideEffectResultIDs(ids...)
	return ecc
}

// AddSideEffectResults adds the "side_effect_results" edges to the SideEffectResult entity.
func (ecc *ExecutionContextCreate) AddSideEffectResults(s ...*SideEffectResult) *ExecutionContextCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ecc.AddSideEffectResultIDs(ids...)
}

// AddSagaExecutionIDs adds the "saga_executions" edge to the SagaExecution entity by IDs.
func (ecc *ExecutionContextCreate) AddSagaExecutionIDs(ids ...string) *ExecutionContextCreate {
	ecc.mutation.AddSagaExecutionIDs(ids...)
	return ecc
}

// AddSagaExecutions adds the "saga_executions" edges to the SagaExecution entity.
func (ecc *ExecutionContextCreate) AddSagaExecutions(s ...*SagaExecution) *ExecutionContextCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ecc.AddSagaExecutionIDs(ids...)
}

// Mutation returns the ExecutionContextMutation object of the builder.
func (ecc *ExecutionContextCreate) Mutation() *ExecutionContextMutation {
	return ecc.mutation
}

// Save creates the ExecutionContext in the database.
func (ecc *ExecutionContextCreate) Save(ctx context.Context) (*ExecutionContext, error) {
	return withHooks(ctx, ecc.sqlSave, ecc.mutation, ecc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ecc *ExecutionContextCreate) SaveX(ctx context.Context) *ExecutionContext {
	v, err := ecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecc *ExecutionContextCreate) Exec(ctx context.Context) error {
	_, err := ecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecc *ExecutionContextCreate) ExecX(ctx context.Context) {
	if err := ecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecc *ExecutionContextCreate) check() error {
	if _, ok := ecc.mutation.CurrentRunID(); !ok {
		return &ValidationError{Name: "current_run_id", err: errors.New(`ent: missing required field "ExecutionContext.current_run_id"`)}
	}
	if _, ok := ecc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ExecutionContext.status"`)}
	}
	if v, ok := ecc.mutation.Status(); ok {
		if err := executioncontext.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ExecutionContext.status": %w`, err)}
		}
	}
	if _, ok := ecc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "ExecutionContext.start_time"`)}
	}
	return nil
}

func (ecc *ExecutionContextCreate) sqlSave(ctx context.Context) (*ExecutionContext, error) {
	if err := ecc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ExecutionContext.ID type: %T", _spec.ID.Value)
		}
	}
	ecc.mutation.id = &_node.ID
	ecc.mutation.done = true
	return _node, nil
}

func (ecc *ExecutionContextCreate) createSpec() (*ExecutionContext, *sqlgraph.CreateSpec) {
	var (
		_node = &ExecutionContext{config: ecc.config}
		_spec = sqlgraph.NewCreateSpec(executioncontext.Table, sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString))
	)
	if id, ok := ecc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ecc.mutation.CurrentRunID(); ok {
		_spec.SetField(executioncontext.FieldCurrentRunID, field.TypeString, value)
		_node.CurrentRunID = value
	}
	if value, ok := ecc.mutation.Status(); ok {
		_spec.SetField(executioncontext.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ecc.mutation.StartTime(); ok {
		_spec.SetField(executioncontext.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := ecc.mutation.EndTime(); ok {
		_spec.SetField(executioncontext.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if nodes := ecc.mutation.HandlerExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executioncontext.HandlerExecutionsTable,
			Columns: []string{executioncontext.HandlerExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(handlerexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ecc.mutation.SideEffectResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executioncontext.SideEffectResultsTable,
			Columns: []string{executioncontext.SideEffectResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffectresult.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ecc.mutation.SagaExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executioncontext.SagaExecutionsTable,
			Columns: []string{executioncontext.SagaExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExecutionContextCreateBulk is the builder for creating many ExecutionContext entities in bulk.
type ExecutionContextCreateBulk struct {
	config
	err      error
	builders []*ExecutionContextCreate
}

// Save creates the ExecutionContext entities in the database.
func (eccb *ExecutionContextCreateBulk) Save(ctx context.Context) ([]*ExecutionContext, error) {
	if eccb.err != nil {
		return nil, eccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eccb.builders))
	nodes := make([]*ExecutionContext, len(eccb.builders))
	mutators := make([]Mutator, len(eccb.builders))
	for i := range eccb.builders {
		func(i int, root context.Context) {
			builder := eccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExecutionContextMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eccb *ExecutionContextCreateBulk) SaveX(ctx context.Context) []*ExecutionContext {
	v, err := eccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eccb *ExecutionContextCreateBulk) Exec(ctx context.Context) error {
	_, err := eccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eccb *ExecutionContextCreateBulk) ExecX(ctx context.Context) {
	if err := eccb.Exec(ctx); err != nil {
		panic(err)
	}
}
