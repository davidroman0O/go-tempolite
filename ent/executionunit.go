// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/executionunit"
)

// ExecutionUnit is the model entity for the ExecutionUnit schema.
type ExecutionUnit struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type executionunit.Type `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status executionunit.Status `json:"status,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// RetryCount holds the value of the "retry_count" field.
	RetryCount int `json:"retry_count,omitempty"`
	// MaxRetries holds the value of the "max_retries" field.
	MaxRetries int `json:"max_retries,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExecutionUnitQuery when eager-loading is set.
	Edges                             ExecutionUnitEdges `json:"edges"`
	execution_context_execution_units *string
	execution_unit_children           *string
	selectValues                      sql.SelectValues
}

// ExecutionUnitEdges holds the relations/edges for other nodes in the graph.
type ExecutionUnitEdges struct {
	// ExecutionContext holds the value of the execution_context edge.
	ExecutionContext *ExecutionContext `json:"execution_context,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *ExecutionUnit `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*ExecutionUnit `json:"children,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// SagaTransactions holds the value of the saga_transactions edge.
	SagaTransactions []*SagaTransaction `json:"saga_transactions,omitempty"`
	// SagaCompensations holds the value of the saga_compensations edge.
	SagaCompensations []*SagaCompensation `json:"saga_compensations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// ExecutionContextOrErr returns the ExecutionContext value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExecutionUnitEdges) ExecutionContextOrErr() (*ExecutionContext, error) {
	if e.ExecutionContext != nil {
		return e.ExecutionContext, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: executioncontext.Label}
	}
	return nil, &NotLoadedError{edge: "execution_context"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExecutionUnitEdges) ParentOrErr() (*ExecutionUnit, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: executionunit.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e ExecutionUnitEdges) ChildrenOrErr() ([]*ExecutionUnit, error) {
	if e.loadedTypes[2] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e ExecutionUnitEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[3] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// SagaTransactionsOrErr returns the SagaTransactions value or an error if the edge
// was not loaded in eager-loading.
func (e ExecutionUnitEdges) SagaTransactionsOrErr() ([]*SagaTransaction, error) {
	if e.loadedTypes[4] {
		return e.SagaTransactions, nil
	}
	return nil, &NotLoadedError{edge: "saga_transactions"}
}

// SagaCompensationsOrErr returns the SagaCompensations value or an error if the edge
// was not loaded in eager-loading.
func (e ExecutionUnitEdges) SagaCompensationsOrErr() ([]*SagaCompensation, error) {
	if e.loadedTypes[5] {
		return e.SagaCompensations, nil
	}
	return nil, &NotLoadedError{edge: "saga_compensations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExecutionUnit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case executionunit.FieldRetryCount, executionunit.FieldMaxRetries:
			values[i] = new(sql.NullInt64)
		case executionunit.FieldID, executionunit.FieldType, executionunit.FieldStatus:
			values[i] = new(sql.NullString)
		case executionunit.FieldStartTime, executionunit.FieldEndTime:
			values[i] = new(sql.NullTime)
		case executionunit.ForeignKeys[0]: // execution_context_execution_units
			values[i] = new(sql.NullString)
		case executionunit.ForeignKeys[1]: // execution_unit_children
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExecutionUnit fields.
func (eu *ExecutionUnit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case executionunit.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				eu.ID = value.String
			}
		case executionunit.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				eu.Type = executionunit.Type(value.String)
			}
		case executionunit.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				eu.Status = executionunit.Status(value.String)
			}
		case executionunit.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				eu.StartTime = value.Time
			}
		case executionunit.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				eu.EndTime = value.Time
			}
		case executionunit.FieldRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retry_count", values[i])
			} else if value.Valid {
				eu.RetryCount = int(value.Int64)
			}
		case executionunit.FieldMaxRetries:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_retries", values[i])
			} else if value.Valid {
				eu.MaxRetries = int(value.Int64)
			}
		case executionunit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field execution_context_execution_units", values[i])
			} else if value.Valid {
				eu.execution_context_execution_units = new(string)
				*eu.execution_context_execution_units = value.String
			}
		case executionunit.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field execution_unit_children", values[i])
			} else if value.Valid {
				eu.execution_unit_children = new(string)
				*eu.execution_unit_children = value.String
			}
		default:
			eu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExecutionUnit.
// This includes values selected through modifiers, order, etc.
func (eu *ExecutionUnit) Value(name string) (ent.Value, error) {
	return eu.selectValues.Get(name)
}

// QueryExecutionContext queries the "execution_context" edge of the ExecutionUnit entity.
func (eu *ExecutionUnit) QueryExecutionContext() *ExecutionContextQuery {
	return NewExecutionUnitClient(eu.config).QueryExecutionContext(eu)
}

// QueryParent queries the "parent" edge of the ExecutionUnit entity.
func (eu *ExecutionUnit) QueryParent() *ExecutionUnitQuery {
	return NewExecutionUnitClient(eu.config).QueryParent(eu)
}

// QueryChildren queries the "children" edge of the ExecutionUnit entity.
func (eu *ExecutionUnit) QueryChildren() *ExecutionUnitQuery {
	return NewExecutionUnitClient(eu.config).QueryChildren(eu)
}

// QueryTasks queries the "tasks" edge of the ExecutionUnit entity.
func (eu *ExecutionUnit) QueryTasks() *TaskQuery {
	return NewExecutionUnitClient(eu.config).QueryTasks(eu)
}

// QuerySagaTransactions queries the "saga_transactions" edge of the ExecutionUnit entity.
func (eu *ExecutionUnit) QuerySagaTransactions() *SagaTransactionQuery {
	return NewExecutionUnitClient(eu.config).QuerySagaTransactions(eu)
}

// QuerySagaCompensations queries the "saga_compensations" edge of the ExecutionUnit entity.
func (eu *ExecutionUnit) QuerySagaCompensations() *SagaCompensationQuery {
	return NewExecutionUnitClient(eu.config).QuerySagaCompensations(eu)
}

// Update returns a builder for updating this ExecutionUnit.
// Note that you need to call ExecutionUnit.Unwrap() before calling this method if this ExecutionUnit
// was returned from a transaction, and the transaction was committed or rolled back.
func (eu *ExecutionUnit) Update() *ExecutionUnitUpdateOne {
	return NewExecutionUnitClient(eu.config).UpdateOne(eu)
}

// Unwrap unwraps the ExecutionUnit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eu *ExecutionUnit) Unwrap() *ExecutionUnit {
	_tx, ok := eu.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExecutionUnit is not a transactional entity")
	}
	eu.config.driver = _tx.drv
	return eu
}

// String implements the fmt.Stringer.
func (eu *ExecutionUnit) String() string {
	var builder strings.Builder
	builder.WriteString("ExecutionUnit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eu.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", eu.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", eu.Status))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(eu.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(eu.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("retry_count=")
	builder.WriteString(fmt.Sprintf("%v", eu.RetryCount))
	builder.WriteString(", ")
	builder.WriteString("max_retries=")
	builder.WriteString(fmt.Sprintf("%v", eu.MaxRetries))
	builder.WriteByte(')')
	return builder.String()
}

// ExecutionUnits is a parsable slice of ExecutionUnit.
type ExecutionUnits []*ExecutionUnit
