// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/activity"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/saga"
	"github.com/davidroman0O/go-tempolite/ent/sagaexecution"
	"github.com/davidroman0O/go-tempolite/ent/schema"
)

// SagaUpdate is the builder for updating Saga entities.
type SagaUpdate struct {
	config
	hooks    []Hook
	mutation *SagaMutation
}

// Where appends a list predicates to the SagaUpdate builder.
func (su *SagaUpdate) Where(ps ...predicate.Saga) *SagaUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SagaUpdate) SetName(s string) *SagaUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SagaUpdate) SetNillableName(s *string) *SagaUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetInput sets the "input" field.
func (su *SagaUpdate) SetInput(i []interface{}) *SagaUpdate {
	su.mutation.SetInput(i)
	return su
}

// AppendInput appends i to the "input" field.
func (su *SagaUpdate) AppendInput(i []interface{}) *SagaUpdate {
	su.mutation.AppendInput(i)
	return su
}

// SetRetryPolicy sets the "retry_policy" field.
func (su *SagaUpdate) SetRetryPolicy(sp schema.RetryPolicy) *SagaUpdate {
	su.mutation.SetRetryPolicy(sp)
	return su
}

// SetNillableRetryPolicy sets the "retry_policy" field if the given value is not nil.
func (su *SagaUpdate) SetNillableRetryPolicy(sp *schema.RetryPolicy) *SagaUpdate {
	if sp != nil {
		su.SetRetryPolicy(*sp)
	}
	return su
}

// ClearRetryPolicy clears the value of the "retry_policy" field.
func (su *SagaUpdate) ClearRetryPolicy() *SagaUpdate {
	su.mutation.ClearRetryPolicy()
	return su
}

// SetTimeout sets the "timeout" field.
func (su *SagaUpdate) SetTimeout(t time.Time) *SagaUpdate {
	su.mutation.SetTimeout(t)
	return su
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (su *SagaUpdate) SetNillableTimeout(t *time.Time) *SagaUpdate {
	if t != nil {
		su.SetTimeout(*t)
	}
	return su
}

// ClearTimeout clears the value of the "timeout" field.
func (su *SagaUpdate) ClearTimeout() *SagaUpdate {
	su.mutation.ClearTimeout()
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SagaUpdate) SetCreatedAt(t time.Time) *SagaUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SagaUpdate) SetNillableCreatedAt(t *time.Time) *SagaUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// AddExecutionIDs adds the "executions" edge to the SagaExecution entity by IDs.
func (su *SagaUpdate) AddExecutionIDs(ids ...string) *SagaUpdate {
	su.mutation.AddExecutionIDs(ids...)
	return su
}

// AddExecutions adds the "executions" edges to the SagaExecution entity.
func (su *SagaUpdate) AddExecutions(s ...*SagaExecution) *SagaUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddExecutionIDs(ids...)
}

// SetActivityID sets the "activity" edge to the Activity entity by ID.
func (su *SagaUpdate) SetActivityID(id string) *SagaUpdate {
	su.mutation.SetActivityID(id)
	return su
}

// SetNillableActivityID sets the "activity" edge to the Activity entity by ID if the given value is not nil.
func (su *SagaUpdate) SetNillableActivityID(id *string) *SagaUpdate {
	if id != nil {
		su = su.SetActivityID(*id)
	}
	return su
}

// SetActivity sets the "activity" edge to the Activity entity.
func (su *SagaUpdate) SetActivity(a *Activity) *SagaUpdate {
	return su.SetActivityID(a.ID)
}

// Mutation returns the SagaMutation object of the builder.
func (su *SagaUpdate) Mutation() *SagaMutation {
	return su.mutation
}

// ClearExecutions clears all "executions" edges to the SagaExecution entity.
func (su *SagaUpdate) ClearExecutions() *SagaUpdate {
	su.mutation.ClearExecutions()
	return su
}

// RemoveExecutionIDs removes the "executions" edge to SagaExecution entities by IDs.
func (su *SagaUpdate) RemoveExecutionIDs(ids ...string) *SagaUpdate {
	su.mutation.RemoveExecutionIDs(ids...)
	return su
}

// RemoveExecutions removes "executions" edges to SagaExecution entities.
func (su *SagaUpdate) RemoveExecutions(s ...*SagaExecution) *SagaUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveExecutionIDs(ids...)
}

// ClearActivity clears the "activity" edge to the Activity entity.
func (su *SagaUpdate) ClearActivity() *SagaUpdate {
	su.mutation.ClearActivity()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SagaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SagaUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SagaUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SagaUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SagaUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := saga.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Saga.name": %w`, err)}
		}
	}
	return nil
}

func (su *SagaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(saga.Table, saga.Columns, sqlgraph.NewFieldSpec(saga.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(saga.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Input(); ok {
		_spec.SetField(saga.FieldInput, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedInput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, saga.FieldInput, value)
		})
	}
	if value, ok := su.mutation.RetryPolicy(); ok {
		_spec.SetField(saga.FieldRetryPolicy, field.TypeJSON, value)
	}
	if su.mutation.RetryPolicyCleared() {
		_spec.ClearField(saga.FieldRetryPolicy, field.TypeJSON)
	}
	if value, ok := su.mutation.Timeout(); ok {
		_spec.SetField(saga.FieldTimeout, field.TypeTime, value)
	}
	if su.mutation.TimeoutCleared() {
		_spec.ClearField(saga.FieldTimeout, field.TypeTime)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(saga.FieldCreatedAt, field.TypeTime, value)
	}
	if su.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   saga.ExecutionsTable,
			Columns: []string{saga.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !su.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   saga.ExecutionsTable,
			Columns: []string{saga.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   saga.ExecutionsTable,
			Columns: []string{saga.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saga.ActivityTable,
			Columns: []string{saga.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saga.ActivityTable,
			Columns: []string{saga.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{saga.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SagaUpdateOne is the builder for updating a single Saga entity.
type SagaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SagaMutation
}

// SetName sets the "name" field.
func (suo *SagaUpdateOne) SetName(s string) *SagaUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SagaUpdateOne) SetNillableName(s *string) *SagaUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetInput sets the "input" field.
func (suo *SagaUpdateOne) SetInput(i []interface{}) *SagaUpdateOne {
	suo.mutation.SetInput(i)
	return suo
}

// AppendInput appends i to the "input" field.
func (suo *SagaUpdateOne) AppendInput(i []interface{}) *SagaUpdateOne {
	suo.mutation.AppendInput(i)
	return suo
}

// SetRetryPolicy sets the "retry_policy" field.
func (suo *SagaUpdateOne) SetRetryPolicy(sp schema.RetryPolicy) *SagaUpdateOne {
	suo.mutation.SetRetryPolicy(sp)
	return suo
}

// SetNillableRetryPolicy sets the "retry_policy" field if the given value is not nil.
func (suo *SagaUpdateOne) SetNillableRetryPolicy(sp *schema.RetryPolicy) *SagaUpdateOne {
	if sp != nil {
		suo.SetRetryPolicy(*sp)
	}
	return suo
}

// ClearRetryPolicy clears the value of the "retry_policy" field.
func (suo *SagaUpdateOne) ClearRetryPolicy() *SagaUpdateOne {
	suo.mutation.ClearRetryPolicy()
	return suo
}

// SetTimeout sets the "timeout" field.
func (suo *SagaUpdateOne) SetTimeout(t time.Time) *SagaUpdateOne {
	suo.mutation.SetTimeout(t)
	return suo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (suo *SagaUpdateOne) SetNillableTimeout(t *time.Time) *SagaUpdateOne {
	if t != nil {
		suo.SetTimeout(*t)
	}
	return suo
}

// ClearTimeout clears the value of the "timeout" field.
func (suo *SagaUpdateOne) ClearTimeout() *SagaUpdateOne {
	suo.mutation.ClearTimeout()
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SagaUpdateOne) SetCreatedAt(t time.Time) *SagaUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SagaUpdateOne) SetNillableCreatedAt(t *time.Time) *SagaUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// AddExecutionIDs adds the "executions" edge to the SagaExecution entity by IDs.
func (suo *SagaUpdateOne) AddExecutionIDs(ids ...string) *SagaUpdateOne {
	suo.mutation.AddExecutionIDs(ids...)
	return suo
}

// AddExecutions adds the "executions" edges to the SagaExecution entity.
func (suo *SagaUpdateOne) AddExecutions(s ...*SagaExecution) *SagaUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddExecutionIDs(ids...)
}

// SetActivityID sets the "activity" edge to the Activity entity by ID.
func (suo *SagaUpdateOne) SetActivityID(id string) *SagaUpdateOne {
	suo.mutation.SetActivityID(id)
	return suo
}

// SetNillableActivityID sets the "activity" edge to the Activity entity by ID if the given value is not nil.
func (suo *SagaUpdateOne) SetNillableActivityID(id *string) *SagaUpdateOne {
	if id != nil {
		suo = suo.SetActivityID(*id)
	}
	return suo
}

// SetActivity sets the "activity" edge to the Activity entity.
func (suo *SagaUpdateOne) SetActivity(a *Activity) *SagaUpdateOne {
	return suo.SetActivityID(a.ID)
}

// Mutation returns the SagaMutation object of the builder.
func (suo *SagaUpdateOne) Mutation() *SagaMutation {
	return suo.mutation
}

// ClearExecutions clears all "executions" edges to the SagaExecution entity.
func (suo *SagaUpdateOne) ClearExecutions() *SagaUpdateOne {
	suo.mutation.ClearExecutions()
	return suo
}

// RemoveExecutionIDs removes the "executions" edge to SagaExecution entities by IDs.
func (suo *SagaUpdateOne) RemoveExecutionIDs(ids ...string) *SagaUpdateOne {
	suo.mutation.RemoveExecutionIDs(ids...)
	return suo
}

// RemoveExecutions removes "executions" edges to SagaExecution entities.
func (suo *SagaUpdateOne) RemoveExecutions(s ...*SagaExecution) *SagaUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveExecutionIDs(ids...)
}

// ClearActivity clears the "activity" edge to the Activity entity.
func (suo *SagaUpdateOne) ClearActivity() *SagaUpdateOne {
	suo.mutation.ClearActivity()
	return suo
}

// Where appends a list predicates to the SagaUpdate builder.
func (suo *SagaUpdateOne) Where(ps ...predicate.Saga) *SagaUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SagaUpdateOne) Select(field string, fields ...string) *SagaUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Saga entity.
func (suo *SagaUpdateOne) Save(ctx context.Context) (*Saga, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SagaUpdateOne) SaveX(ctx context.Context) *Saga {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SagaUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SagaUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SagaUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := saga.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Saga.name": %w`, err)}
		}
	}
	return nil
}

func (suo *SagaUpdateOne) sqlSave(ctx context.Context) (_node *Saga, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(saga.Table, saga.Columns, sqlgraph.NewFieldSpec(saga.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Saga.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, saga.FieldID)
		for _, f := range fields {
			if !saga.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != saga.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(saga.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Input(); ok {
		_spec.SetField(saga.FieldInput, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedInput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, saga.FieldInput, value)
		})
	}
	if value, ok := suo.mutation.RetryPolicy(); ok {
		_spec.SetField(saga.FieldRetryPolicy, field.TypeJSON, value)
	}
	if suo.mutation.RetryPolicyCleared() {
		_spec.ClearField(saga.FieldRetryPolicy, field.TypeJSON)
	}
	if value, ok := suo.mutation.Timeout(); ok {
		_spec.SetField(saga.FieldTimeout, field.TypeTime, value)
	}
	if suo.mutation.TimeoutCleared() {
		_spec.ClearField(saga.FieldTimeout, field.TypeTime)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(saga.FieldCreatedAt, field.TypeTime, value)
	}
	if suo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   saga.ExecutionsTable,
			Columns: []string{saga.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !suo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   saga.ExecutionsTable,
			Columns: []string{saga.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   saga.ExecutionsTable,
			Columns: []string{saga.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saga.ActivityTable,
			Columns: []string{saga.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   saga.ActivityTable,
			Columns: []string{saga.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Saga{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{saga.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
