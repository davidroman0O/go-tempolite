// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/compensationtask"
	"github.com/davidroman0O/go-tempolite/ent/entry"
	"github.com/davidroman0O/go-tempolite/ent/handlertask"
	"github.com/davidroman0O/go-tempolite/ent/node"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/sagatask"
	"github.com/davidroman0O/go-tempolite/ent/sideeffecttask"
	"github.com/davidroman0O/go-tempolite/ent/taskcontext"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCompensationTask = "CompensationTask"
	TypeEntry            = "Entry"
	TypeExecutionContext = "ExecutionContext"
	TypeHandlerTask      = "HandlerTask"
	TypeNode             = "Node"
	TypeSagaTask         = "SagaTask"
	TypeSideEffectTask   = "SideEffectTask"
	TypeTaskContext      = "TaskContext"
)

// CompensationTaskMutation represents an operation that mutates the CompensationTask nodes in the graph.
type CompensationTaskMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	node          *string
	clearednode   bool
	done          bool
	oldValue      func(context.Context) (*CompensationTask, error)
	predicates    []predicate.CompensationTask
}

var _ ent.Mutation = (*CompensationTaskMutation)(nil)

// compensationtaskOption allows management of the mutation configuration using functional options.
type compensationtaskOption func(*CompensationTaskMutation)

// newCompensationTaskMutation creates new mutation for the CompensationTask entity.
func newCompensationTaskMutation(c config, op Op, opts ...compensationtaskOption) *CompensationTaskMutation {
	m := &CompensationTaskMutation{
		config:        c,
		op:            op,
		typ:           TypeCompensationTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCompensationTaskID sets the ID field of the mutation.
func withCompensationTaskID(id int) compensationtaskOption {
	return func(m *CompensationTaskMutation) {
		var (
			err   error
			once  sync.Once
			value *CompensationTask
		)
		m.oldValue = func(ctx context.Context) (*CompensationTask, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CompensationTask.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCompensationTask sets the old CompensationTask of the mutation.
func withCompensationTask(node *CompensationTask) compensationtaskOption {
	return func(m *CompensationTaskMutation) {
		m.oldValue = func(context.Context) (*CompensationTask, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CompensationTaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CompensationTaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CompensationTaskMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CompensationTaskMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CompensationTask.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNodeID sets the "node" edge to the Node entity by id.
func (m *CompensationTaskMutation) SetNodeID(id string) {
	m.node = &id
}

// ClearNode clears the "node" edge to the Node entity.
func (m *CompensationTaskMutation) ClearNode() {
	m.clearednode = true
}

// NodeCleared reports if the "node" edge to the Node entity was cleared.
func (m *CompensationTaskMutation) NodeCleared() bool {
	return m.clearednode
}

// NodeID returns the "node" edge ID in the mutation.
func (m *CompensationTaskMutation) NodeID() (id string, exists bool) {
	if m.node != nil {
		return *m.node, true
	}
	return
}

// NodeIDs returns the "node" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NodeID instead. It exists only for internal usage by the builders.
func (m *CompensationTaskMutation) NodeIDs() (ids []string) {
	if id := m.node; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNode resets all changes to the "node" edge.
func (m *CompensationTaskMutation) ResetNode() {
	m.node = nil
	m.clearednode = false
}

// Where appends a list predicates to the CompensationTaskMutation builder.
func (m *CompensationTaskMutation) Where(ps ...predicate.CompensationTask) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CompensationTaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CompensationTaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CompensationTask, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CompensationTaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CompensationTaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CompensationTask).
func (m *CompensationTaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CompensationTaskMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CompensationTaskMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CompensationTaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown CompensationTask field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompensationTaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CompensationTask field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CompensationTaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CompensationTaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompensationTaskMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown CompensationTask numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CompensationTaskMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CompensationTaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CompensationTaskMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CompensationTask nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CompensationTaskMutation) ResetField(name string) error {
	return fmt.Errorf("unknown CompensationTask field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CompensationTaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.node != nil {
		edges = append(edges, compensationtask.EdgeNode)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CompensationTaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case compensationtask.EdgeNode:
		if id := m.node; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CompensationTaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CompensationTaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CompensationTaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearednode {
		edges = append(edges, compensationtask.EdgeNode)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CompensationTaskMutation) EdgeCleared(name string) bool {
	switch name {
	case compensationtask.EdgeNode:
		return m.clearednode
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CompensationTaskMutation) ClearEdge(name string) error {
	switch name {
	case compensationtask.EdgeNode:
		m.ClearNode()
		return nil
	}
	return fmt.Errorf("unknown CompensationTask unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CompensationTaskMutation) ResetEdge(name string) error {
	switch name {
	case compensationtask.EdgeNode:
		m.ResetNode()
		return nil
	}
	return fmt.Errorf("unknown CompensationTask edge %s", name)
}

// EntryMutation represents an operation that mutates the Entry nodes in the graph.
type EntryMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	taskID                   *string
	_type                    *entry.Type
	clearedFields            map[string]struct{}
	execution_context        *string
	clearedexecution_context bool
	handler_task             *string
	clearedhandler_task      bool
	saga_step_task           *int
	clearedsaga_step_task    bool
	side_effect_task         *int
	clearedside_effect_task  bool
	compensation_task        *int
	clearedcompensation_task bool
	done                     bool
	oldValue                 func(context.Context) (*Entry, error)
	predicates               []predicate.Entry
}

var _ ent.Mutation = (*EntryMutation)(nil)

// entryOption allows management of the mutation configuration using functional options.
type entryOption func(*EntryMutation)

// newEntryMutation creates new mutation for the Entry entity.
func newEntryMutation(c config, op Op, opts ...entryOption) *EntryMutation {
	m := &EntryMutation{
		config:        c,
		op:            op,
		typ:           TypeEntry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntryID sets the ID field of the mutation.
func withEntryID(id int) entryOption {
	return func(m *EntryMutation) {
		var (
			err   error
			once  sync.Once
			value *Entry
		)
		m.oldValue = func(ctx context.Context) (*Entry, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Entry.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntry sets the old Entry of the mutation.
func withEntry(node *Entry) entryOption {
	return func(m *EntryMutation) {
		m.oldValue = func(context.Context) (*Entry, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Entry.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTaskID sets the "taskID" field.
func (m *EntryMutation) SetTaskID(s string) {
	m.taskID = &s
}

// TaskID returns the value of the "taskID" field in the mutation.
func (m *EntryMutation) TaskID() (r string, exists bool) {
	v := m.taskID
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskID returns the old "taskID" field's value of the Entry entity.
// If the Entry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntryMutation) OldTaskID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskID: %w", err)
	}
	return oldValue.TaskID, nil
}

// ResetTaskID resets all changes to the "taskID" field.
func (m *EntryMutation) ResetTaskID() {
	m.taskID = nil
}

// SetType sets the "type" field.
func (m *EntryMutation) SetType(e entry.Type) {
	m._type = &e
}

// GetType returns the value of the "type" field in the mutation.
func (m *EntryMutation) GetType() (r entry.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Entry entity.
// If the Entry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntryMutation) OldType(ctx context.Context) (v entry.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *EntryMutation) ResetType() {
	m._type = nil
}

// SetExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by id.
func (m *EntryMutation) SetExecutionContextID(id string) {
	m.execution_context = &id
}

// ClearExecutionContext clears the "execution_context" edge to the ExecutionContext entity.
func (m *EntryMutation) ClearExecutionContext() {
	m.clearedexecution_context = true
}

// ExecutionContextCleared reports if the "execution_context" edge to the ExecutionContext entity was cleared.
func (m *EntryMutation) ExecutionContextCleared() bool {
	return m.clearedexecution_context
}

// ExecutionContextID returns the "execution_context" edge ID in the mutation.
func (m *EntryMutation) ExecutionContextID() (id string, exists bool) {
	if m.execution_context != nil {
		return *m.execution_context, true
	}
	return
}

// ExecutionContextIDs returns the "execution_context" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExecutionContextID instead. It exists only for internal usage by the builders.
func (m *EntryMutation) ExecutionContextIDs() (ids []string) {
	if id := m.execution_context; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExecutionContext resets all changes to the "execution_context" edge.
func (m *EntryMutation) ResetExecutionContext() {
	m.execution_context = nil
	m.clearedexecution_context = false
}

// SetHandlerTaskID sets the "handler_task" edge to the HandlerTask entity by id.
func (m *EntryMutation) SetHandlerTaskID(id string) {
	m.handler_task = &id
}

// ClearHandlerTask clears the "handler_task" edge to the HandlerTask entity.
func (m *EntryMutation) ClearHandlerTask() {
	m.clearedhandler_task = true
}

// HandlerTaskCleared reports if the "handler_task" edge to the HandlerTask entity was cleared.
func (m *EntryMutation) HandlerTaskCleared() bool {
	return m.clearedhandler_task
}

// HandlerTaskID returns the "handler_task" edge ID in the mutation.
func (m *EntryMutation) HandlerTaskID() (id string, exists bool) {
	if m.handler_task != nil {
		return *m.handler_task, true
	}
	return
}

// HandlerTaskIDs returns the "handler_task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HandlerTaskID instead. It exists only for internal usage by the builders.
func (m *EntryMutation) HandlerTaskIDs() (ids []string) {
	if id := m.handler_task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHandlerTask resets all changes to the "handler_task" edge.
func (m *EntryMutation) ResetHandlerTask() {
	m.handler_task = nil
	m.clearedhandler_task = false
}

// SetSagaStepTaskID sets the "saga_step_task" edge to the SagaTask entity by id.
func (m *EntryMutation) SetSagaStepTaskID(id int) {
	m.saga_step_task = &id
}

// ClearSagaStepTask clears the "saga_step_task" edge to the SagaTask entity.
func (m *EntryMutation) ClearSagaStepTask() {
	m.clearedsaga_step_task = true
}

// SagaStepTaskCleared reports if the "saga_step_task" edge to the SagaTask entity was cleared.
func (m *EntryMutation) SagaStepTaskCleared() bool {
	return m.clearedsaga_step_task
}

// SagaStepTaskID returns the "saga_step_task" edge ID in the mutation.
func (m *EntryMutation) SagaStepTaskID() (id int, exists bool) {
	if m.saga_step_task != nil {
		return *m.saga_step_task, true
	}
	return
}

// SagaStepTaskIDs returns the "saga_step_task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SagaStepTaskID instead. It exists only for internal usage by the builders.
func (m *EntryMutation) SagaStepTaskIDs() (ids []int) {
	if id := m.saga_step_task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSagaStepTask resets all changes to the "saga_step_task" edge.
func (m *EntryMutation) ResetSagaStepTask() {
	m.saga_step_task = nil
	m.clearedsaga_step_task = false
}

// SetSideEffectTaskID sets the "side_effect_task" edge to the SideEffectTask entity by id.
func (m *EntryMutation) SetSideEffectTaskID(id int) {
	m.side_effect_task = &id
}

// ClearSideEffectTask clears the "side_effect_task" edge to the SideEffectTask entity.
func (m *EntryMutation) ClearSideEffectTask() {
	m.clearedside_effect_task = true
}

// SideEffectTaskCleared reports if the "side_effect_task" edge to the SideEffectTask entity was cleared.
func (m *EntryMutation) SideEffectTaskCleared() bool {
	return m.clearedside_effect_task
}

// SideEffectTaskID returns the "side_effect_task" edge ID in the mutation.
func (m *EntryMutation) SideEffectTaskID() (id int, exists bool) {
	if m.side_effect_task != nil {
		return *m.side_effect_task, true
	}
	return
}

// SideEffectTaskIDs returns the "side_effect_task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SideEffectTaskID instead. It exists only for internal usage by the builders.
func (m *EntryMutation) SideEffectTaskIDs() (ids []int) {
	if id := m.side_effect_task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSideEffectTask resets all changes to the "side_effect_task" edge.
func (m *EntryMutation) ResetSideEffectTask() {
	m.side_effect_task = nil
	m.clearedside_effect_task = false
}

// SetCompensationTaskID sets the "compensation_task" edge to the CompensationTask entity by id.
func (m *EntryMutation) SetCompensationTaskID(id int) {
	m.compensation_task = &id
}

// ClearCompensationTask clears the "compensation_task" edge to the CompensationTask entity.
func (m *EntryMutation) ClearCompensationTask() {
	m.clearedcompensation_task = true
}

// CompensationTaskCleared reports if the "compensation_task" edge to the CompensationTask entity was cleared.
func (m *EntryMutation) CompensationTaskCleared() bool {
	return m.clearedcompensation_task
}

// CompensationTaskID returns the "compensation_task" edge ID in the mutation.
func (m *EntryMutation) CompensationTaskID() (id int, exists bool) {
	if m.compensation_task != nil {
		return *m.compensation_task, true
	}
	return
}

// CompensationTaskIDs returns the "compensation_task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CompensationTaskID instead. It exists only for internal usage by the builders.
func (m *EntryMutation) CompensationTaskIDs() (ids []int) {
	if id := m.compensation_task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCompensationTask resets all changes to the "compensation_task" edge.
func (m *EntryMutation) ResetCompensationTask() {
	m.compensation_task = nil
	m.clearedcompensation_task = false
}

// Where appends a list predicates to the EntryMutation builder.
func (m *EntryMutation) Where(ps ...predicate.Entry) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Entry, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Entry).
func (m *EntryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntryMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.taskID != nil {
		fields = append(fields, entry.FieldTaskID)
	}
	if m._type != nil {
		fields = append(fields, entry.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entry.FieldTaskID:
		return m.TaskID()
	case entry.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entry.FieldTaskID:
		return m.OldTaskID(ctx)
	case entry.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Entry field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entry.FieldTaskID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskID(v)
		return nil
	case entry.FieldType:
		v, ok := value.(entry.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Entry field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Entry numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Entry nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntryMutation) ResetField(name string) error {
	switch name {
	case entry.FieldTaskID:
		m.ResetTaskID()
		return nil
	case entry.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Entry field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntryMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.execution_context != nil {
		edges = append(edges, entry.EdgeExecutionContext)
	}
	if m.handler_task != nil {
		edges = append(edges, entry.EdgeHandlerTask)
	}
	if m.saga_step_task != nil {
		edges = append(edges, entry.EdgeSagaStepTask)
	}
	if m.side_effect_task != nil {
		edges = append(edges, entry.EdgeSideEffectTask)
	}
	if m.compensation_task != nil {
		edges = append(edges, entry.EdgeCompensationTask)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case entry.EdgeExecutionContext:
		if id := m.execution_context; id != nil {
			return []ent.Value{*id}
		}
	case entry.EdgeHandlerTask:
		if id := m.handler_task; id != nil {
			return []ent.Value{*id}
		}
	case entry.EdgeSagaStepTask:
		if id := m.saga_step_task; id != nil {
			return []ent.Value{*id}
		}
	case entry.EdgeSideEffectTask:
		if id := m.side_effect_task; id != nil {
			return []ent.Value{*id}
		}
	case entry.EdgeCompensationTask:
		if id := m.compensation_task; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedexecution_context {
		edges = append(edges, entry.EdgeExecutionContext)
	}
	if m.clearedhandler_task {
		edges = append(edges, entry.EdgeHandlerTask)
	}
	if m.clearedsaga_step_task {
		edges = append(edges, entry.EdgeSagaStepTask)
	}
	if m.clearedside_effect_task {
		edges = append(edges, entry.EdgeSideEffectTask)
	}
	if m.clearedcompensation_task {
		edges = append(edges, entry.EdgeCompensationTask)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntryMutation) EdgeCleared(name string) bool {
	switch name {
	case entry.EdgeExecutionContext:
		return m.clearedexecution_context
	case entry.EdgeHandlerTask:
		return m.clearedhandler_task
	case entry.EdgeSagaStepTask:
		return m.clearedsaga_step_task
	case entry.EdgeSideEffectTask:
		return m.clearedside_effect_task
	case entry.EdgeCompensationTask:
		return m.clearedcompensation_task
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntryMutation) ClearEdge(name string) error {
	switch name {
	case entry.EdgeExecutionContext:
		m.ClearExecutionContext()
		return nil
	case entry.EdgeHandlerTask:
		m.ClearHandlerTask()
		return nil
	case entry.EdgeSagaStepTask:
		m.ClearSagaStepTask()
		return nil
	case entry.EdgeSideEffectTask:
		m.ClearSideEffectTask()
		return nil
	case entry.EdgeCompensationTask:
		m.ClearCompensationTask()
		return nil
	}
	return fmt.Errorf("unknown Entry unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntryMutation) ResetEdge(name string) error {
	switch name {
	case entry.EdgeExecutionContext:
		m.ResetExecutionContext()
		return nil
	case entry.EdgeHandlerTask:
		m.ResetHandlerTask()
		return nil
	case entry.EdgeSagaStepTask:
		m.ResetSagaStepTask()
		return nil
	case entry.EdgeSideEffectTask:
		m.ResetSideEffectTask()
		return nil
	case entry.EdgeCompensationTask:
		m.ResetCompensationTask()
		return nil
	}
	return fmt.Errorf("unknown Entry edge %s", name)
}

// ExecutionContextMutation represents an operation that mutates the ExecutionContext nodes in the graph.
type ExecutionContextMutation struct {
	config
	op            Op
	typ           string
	id            *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ExecutionContext, error)
	predicates    []predicate.ExecutionContext
}

var _ ent.Mutation = (*ExecutionContextMutation)(nil)

// executioncontextOption allows management of the mutation configuration using functional options.
type executioncontextOption func(*ExecutionContextMutation)

// newExecutionContextMutation creates new mutation for the ExecutionContext entity.
func newExecutionContextMutation(c config, op Op, opts ...executioncontextOption) *ExecutionContextMutation {
	m := &ExecutionContextMutation{
		config:        c,
		op:            op,
		typ:           TypeExecutionContext,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExecutionContextID sets the ID field of the mutation.
func withExecutionContextID(id string) executioncontextOption {
	return func(m *ExecutionContextMutation) {
		var (
			err   error
			once  sync.Once
			value *ExecutionContext
		)
		m.oldValue = func(ctx context.Context) (*ExecutionContext, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExecutionContext.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExecutionContext sets the old ExecutionContext of the mutation.
func withExecutionContext(node *ExecutionContext) executioncontextOption {
	return func(m *ExecutionContextMutation) {
		m.oldValue = func(context.Context) (*ExecutionContext, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExecutionContextMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExecutionContextMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ExecutionContext entities.
func (m *ExecutionContextMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExecutionContextMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExecutionContextMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExecutionContext.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the ExecutionContextMutation builder.
func (m *ExecutionContextMutation) Where(ps ...predicate.ExecutionContext) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExecutionContextMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExecutionContextMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExecutionContext, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExecutionContextMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExecutionContextMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExecutionContext).
func (m *ExecutionContextMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExecutionContextMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExecutionContextMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExecutionContextMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown ExecutionContext field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExecutionContextMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ExecutionContext field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExecutionContextMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExecutionContextMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExecutionContextMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown ExecutionContext numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExecutionContextMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExecutionContextMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExecutionContextMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ExecutionContext nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExecutionContextMutation) ResetField(name string) error {
	return fmt.Errorf("unknown ExecutionContext field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExecutionContextMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExecutionContextMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExecutionContextMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExecutionContextMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExecutionContextMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExecutionContextMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExecutionContextMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ExecutionContext unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExecutionContextMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ExecutionContext edge %s", name)
}

// HandlerTaskMutation represents an operation that mutates the HandlerTask nodes in the graph.
type HandlerTaskMutation struct {
	config
	op                       Op
	typ                      string
	id                       *string
	handlerName              *string
	status                   *handlertask.Status
	payload                  *[]byte
	result                   *[]byte
	error                    *[]byte
	numIn                    *int
	addnumIn                 *int
	numOut                   *int
	addnumOut                *int
	clearedFields            map[string]struct{}
	task_context             *string
	clearedtask_context      bool
	execution_context        *string
	clearedexecution_context bool
	node                     *string
	clearednode              bool
	done                     bool
	oldValue                 func(context.Context) (*HandlerTask, error)
	predicates               []predicate.HandlerTask
}

var _ ent.Mutation = (*HandlerTaskMutation)(nil)

// handlertaskOption allows management of the mutation configuration using functional options.
type handlertaskOption func(*HandlerTaskMutation)

// newHandlerTaskMutation creates new mutation for the HandlerTask entity.
func newHandlerTaskMutation(c config, op Op, opts ...handlertaskOption) *HandlerTaskMutation {
	m := &HandlerTaskMutation{
		config:        c,
		op:            op,
		typ:           TypeHandlerTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHandlerTaskID sets the ID field of the mutation.
func withHandlerTaskID(id string) handlertaskOption {
	return func(m *HandlerTaskMutation) {
		var (
			err   error
			once  sync.Once
			value *HandlerTask
		)
		m.oldValue = func(ctx context.Context) (*HandlerTask, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HandlerTask.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHandlerTask sets the old HandlerTask of the mutation.
func withHandlerTask(node *HandlerTask) handlertaskOption {
	return func(m *HandlerTaskMutation) {
		m.oldValue = func(context.Context) (*HandlerTask, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HandlerTaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HandlerTaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of HandlerTask entities.
func (m *HandlerTaskMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HandlerTaskMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HandlerTaskMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HandlerTask.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHandlerName sets the "handlerName" field.
func (m *HandlerTaskMutation) SetHandlerName(s string) {
	m.handlerName = &s
}

// HandlerName returns the value of the "handlerName" field in the mutation.
func (m *HandlerTaskMutation) HandlerName() (r string, exists bool) {
	v := m.handlerName
	if v == nil {
		return
	}
	return *v, true
}

// OldHandlerName returns the old "handlerName" field's value of the HandlerTask entity.
// If the HandlerTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HandlerTaskMutation) OldHandlerName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHandlerName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHandlerName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHandlerName: %w", err)
	}
	return oldValue.HandlerName, nil
}

// ResetHandlerName resets all changes to the "handlerName" field.
func (m *HandlerTaskMutation) ResetHandlerName() {
	m.handlerName = nil
}

// SetStatus sets the "status" field.
func (m *HandlerTaskMutation) SetStatus(h handlertask.Status) {
	m.status = &h
}

// Status returns the value of the "status" field in the mutation.
func (m *HandlerTaskMutation) Status() (r handlertask.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the HandlerTask entity.
// If the HandlerTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HandlerTaskMutation) OldStatus(ctx context.Context) (v handlertask.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *HandlerTaskMutation) ResetStatus() {
	m.status = nil
}

// SetPayload sets the "payload" field.
func (m *HandlerTaskMutation) SetPayload(b []byte) {
	m.payload = &b
}

// Payload returns the value of the "payload" field in the mutation.
func (m *HandlerTaskMutation) Payload() (r []byte, exists bool) {
	v := m.payload
	if v == nil {
		return
	}
	return *v, true
}

// OldPayload returns the old "payload" field's value of the HandlerTask entity.
// If the HandlerTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HandlerTaskMutation) OldPayload(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayload: %w", err)
	}
	return oldValue.Payload, nil
}

// ClearPayload clears the value of the "payload" field.
func (m *HandlerTaskMutation) ClearPayload() {
	m.payload = nil
	m.clearedFields[handlertask.FieldPayload] = struct{}{}
}

// PayloadCleared returns if the "payload" field was cleared in this mutation.
func (m *HandlerTaskMutation) PayloadCleared() bool {
	_, ok := m.clearedFields[handlertask.FieldPayload]
	return ok
}

// ResetPayload resets all changes to the "payload" field.
func (m *HandlerTaskMutation) ResetPayload() {
	m.payload = nil
	delete(m.clearedFields, handlertask.FieldPayload)
}

// SetResult sets the "result" field.
func (m *HandlerTaskMutation) SetResult(b []byte) {
	m.result = &b
}

// Result returns the value of the "result" field in the mutation.
func (m *HandlerTaskMutation) Result() (r []byte, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old "result" field's value of the HandlerTask entity.
// If the HandlerTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HandlerTaskMutation) OldResult(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResult: %w", err)
	}
	return oldValue.Result, nil
}

// ClearResult clears the value of the "result" field.
func (m *HandlerTaskMutation) ClearResult() {
	m.result = nil
	m.clearedFields[handlertask.FieldResult] = struct{}{}
}

// ResultCleared returns if the "result" field was cleared in this mutation.
func (m *HandlerTaskMutation) ResultCleared() bool {
	_, ok := m.clearedFields[handlertask.FieldResult]
	return ok
}

// ResetResult resets all changes to the "result" field.
func (m *HandlerTaskMutation) ResetResult() {
	m.result = nil
	delete(m.clearedFields, handlertask.FieldResult)
}

// SetError sets the "error" field.
func (m *HandlerTaskMutation) SetError(b []byte) {
	m.error = &b
}

// Error returns the value of the "error" field in the mutation.
func (m *HandlerTaskMutation) Error() (r []byte, exists bool) {
	v := m.error
	if v == nil {
		return
	}
	return *v, true
}

// OldError returns the old "error" field's value of the HandlerTask entity.
// If the HandlerTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HandlerTaskMutation) OldError(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldError is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldError requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldError: %w", err)
	}
	return oldValue.Error, nil
}

// ClearError clears the value of the "error" field.
func (m *HandlerTaskMutation) ClearError() {
	m.error = nil
	m.clearedFields[handlertask.FieldError] = struct{}{}
}

// ErrorCleared returns if the "error" field was cleared in this mutation.
func (m *HandlerTaskMutation) ErrorCleared() bool {
	_, ok := m.clearedFields[handlertask.FieldError]
	return ok
}

// ResetError resets all changes to the "error" field.
func (m *HandlerTaskMutation) ResetError() {
	m.error = nil
	delete(m.clearedFields, handlertask.FieldError)
}

// SetNumIn sets the "numIn" field.
func (m *HandlerTaskMutation) SetNumIn(i int) {
	m.numIn = &i
	m.addnumIn = nil
}

// NumIn returns the value of the "numIn" field in the mutation.
func (m *HandlerTaskMutation) NumIn() (r int, exists bool) {
	v := m.numIn
	if v == nil {
		return
	}
	return *v, true
}

// OldNumIn returns the old "numIn" field's value of the HandlerTask entity.
// If the HandlerTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HandlerTaskMutation) OldNumIn(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumIn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumIn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumIn: %w", err)
	}
	return oldValue.NumIn, nil
}

// AddNumIn adds i to the "numIn" field.
func (m *HandlerTaskMutation) AddNumIn(i int) {
	if m.addnumIn != nil {
		*m.addnumIn += i
	} else {
		m.addnumIn = &i
	}
}

// AddedNumIn returns the value that was added to the "numIn" field in this mutation.
func (m *HandlerTaskMutation) AddedNumIn() (r int, exists bool) {
	v := m.addnumIn
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumIn resets all changes to the "numIn" field.
func (m *HandlerTaskMutation) ResetNumIn() {
	m.numIn = nil
	m.addnumIn = nil
}

// SetNumOut sets the "numOut" field.
func (m *HandlerTaskMutation) SetNumOut(i int) {
	m.numOut = &i
	m.addnumOut = nil
}

// NumOut returns the value of the "numOut" field in the mutation.
func (m *HandlerTaskMutation) NumOut() (r int, exists bool) {
	v := m.numOut
	if v == nil {
		return
	}
	return *v, true
}

// OldNumOut returns the old "numOut" field's value of the HandlerTask entity.
// If the HandlerTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HandlerTaskMutation) OldNumOut(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumOut is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumOut requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumOut: %w", err)
	}
	return oldValue.NumOut, nil
}

// AddNumOut adds i to the "numOut" field.
func (m *HandlerTaskMutation) AddNumOut(i int) {
	if m.addnumOut != nil {
		*m.addnumOut += i
	} else {
		m.addnumOut = &i
	}
}

// AddedNumOut returns the value that was added to the "numOut" field in this mutation.
func (m *HandlerTaskMutation) AddedNumOut() (r int, exists bool) {
	v := m.addnumOut
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumOut resets all changes to the "numOut" field.
func (m *HandlerTaskMutation) ResetNumOut() {
	m.numOut = nil
	m.addnumOut = nil
}

// SetTaskContextID sets the "task_context" edge to the TaskContext entity by id.
func (m *HandlerTaskMutation) SetTaskContextID(id string) {
	m.task_context = &id
}

// ClearTaskContext clears the "task_context" edge to the TaskContext entity.
func (m *HandlerTaskMutation) ClearTaskContext() {
	m.clearedtask_context = true
}

// TaskContextCleared reports if the "task_context" edge to the TaskContext entity was cleared.
func (m *HandlerTaskMutation) TaskContextCleared() bool {
	return m.clearedtask_context
}

// TaskContextID returns the "task_context" edge ID in the mutation.
func (m *HandlerTaskMutation) TaskContextID() (id string, exists bool) {
	if m.task_context != nil {
		return *m.task_context, true
	}
	return
}

// TaskContextIDs returns the "task_context" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TaskContextID instead. It exists only for internal usage by the builders.
func (m *HandlerTaskMutation) TaskContextIDs() (ids []string) {
	if id := m.task_context; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTaskContext resets all changes to the "task_context" edge.
func (m *HandlerTaskMutation) ResetTaskContext() {
	m.task_context = nil
	m.clearedtask_context = false
}

// SetExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by id.
func (m *HandlerTaskMutation) SetExecutionContextID(id string) {
	m.execution_context = &id
}

// ClearExecutionContext clears the "execution_context" edge to the ExecutionContext entity.
func (m *HandlerTaskMutation) ClearExecutionContext() {
	m.clearedexecution_context = true
}

// ExecutionContextCleared reports if the "execution_context" edge to the ExecutionContext entity was cleared.
func (m *HandlerTaskMutation) ExecutionContextCleared() bool {
	return m.clearedexecution_context
}

// ExecutionContextID returns the "execution_context" edge ID in the mutation.
func (m *HandlerTaskMutation) ExecutionContextID() (id string, exists bool) {
	if m.execution_context != nil {
		return *m.execution_context, true
	}
	return
}

// ExecutionContextIDs returns the "execution_context" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExecutionContextID instead. It exists only for internal usage by the builders.
func (m *HandlerTaskMutation) ExecutionContextIDs() (ids []string) {
	if id := m.execution_context; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExecutionContext resets all changes to the "execution_context" edge.
func (m *HandlerTaskMutation) ResetExecutionContext() {
	m.execution_context = nil
	m.clearedexecution_context = false
}

// SetNodeID sets the "node" edge to the Node entity by id.
func (m *HandlerTaskMutation) SetNodeID(id string) {
	m.node = &id
}

// ClearNode clears the "node" edge to the Node entity.
func (m *HandlerTaskMutation) ClearNode() {
	m.clearednode = true
}

// NodeCleared reports if the "node" edge to the Node entity was cleared.
func (m *HandlerTaskMutation) NodeCleared() bool {
	return m.clearednode
}

// NodeID returns the "node" edge ID in the mutation.
func (m *HandlerTaskMutation) NodeID() (id string, exists bool) {
	if m.node != nil {
		return *m.node, true
	}
	return
}

// NodeIDs returns the "node" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NodeID instead. It exists only for internal usage by the builders.
func (m *HandlerTaskMutation) NodeIDs() (ids []string) {
	if id := m.node; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNode resets all changes to the "node" edge.
func (m *HandlerTaskMutation) ResetNode() {
	m.node = nil
	m.clearednode = false
}

// Where appends a list predicates to the HandlerTaskMutation builder.
func (m *HandlerTaskMutation) Where(ps ...predicate.HandlerTask) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HandlerTaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HandlerTaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.HandlerTask, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HandlerTaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HandlerTaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (HandlerTask).
func (m *HandlerTaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HandlerTaskMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.handlerName != nil {
		fields = append(fields, handlertask.FieldHandlerName)
	}
	if m.status != nil {
		fields = append(fields, handlertask.FieldStatus)
	}
	if m.payload != nil {
		fields = append(fields, handlertask.FieldPayload)
	}
	if m.result != nil {
		fields = append(fields, handlertask.FieldResult)
	}
	if m.error != nil {
		fields = append(fields, handlertask.FieldError)
	}
	if m.numIn != nil {
		fields = append(fields, handlertask.FieldNumIn)
	}
	if m.numOut != nil {
		fields = append(fields, handlertask.FieldNumOut)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HandlerTaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case handlertask.FieldHandlerName:
		return m.HandlerName()
	case handlertask.FieldStatus:
		return m.Status()
	case handlertask.FieldPayload:
		return m.Payload()
	case handlertask.FieldResult:
		return m.Result()
	case handlertask.FieldError:
		return m.Error()
	case handlertask.FieldNumIn:
		return m.NumIn()
	case handlertask.FieldNumOut:
		return m.NumOut()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HandlerTaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case handlertask.FieldHandlerName:
		return m.OldHandlerName(ctx)
	case handlertask.FieldStatus:
		return m.OldStatus(ctx)
	case handlertask.FieldPayload:
		return m.OldPayload(ctx)
	case handlertask.FieldResult:
		return m.OldResult(ctx)
	case handlertask.FieldError:
		return m.OldError(ctx)
	case handlertask.FieldNumIn:
		return m.OldNumIn(ctx)
	case handlertask.FieldNumOut:
		return m.OldNumOut(ctx)
	}
	return nil, fmt.Errorf("unknown HandlerTask field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HandlerTaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case handlertask.FieldHandlerName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHandlerName(v)
		return nil
	case handlertask.FieldStatus:
		v, ok := value.(handlertask.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case handlertask.FieldPayload:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayload(v)
		return nil
	case handlertask.FieldResult:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResult(v)
		return nil
	case handlertask.FieldError:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetError(v)
		return nil
	case handlertask.FieldNumIn:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumIn(v)
		return nil
	case handlertask.FieldNumOut:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumOut(v)
		return nil
	}
	return fmt.Errorf("unknown HandlerTask field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HandlerTaskMutation) AddedFields() []string {
	var fields []string
	if m.addnumIn != nil {
		fields = append(fields, handlertask.FieldNumIn)
	}
	if m.addnumOut != nil {
		fields = append(fields, handlertask.FieldNumOut)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HandlerTaskMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case handlertask.FieldNumIn:
		return m.AddedNumIn()
	case handlertask.FieldNumOut:
		return m.AddedNumOut()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HandlerTaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	case handlertask.FieldNumIn:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumIn(v)
		return nil
	case handlertask.FieldNumOut:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumOut(v)
		return nil
	}
	return fmt.Errorf("unknown HandlerTask numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HandlerTaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(handlertask.FieldPayload) {
		fields = append(fields, handlertask.FieldPayload)
	}
	if m.FieldCleared(handlertask.FieldResult) {
		fields = append(fields, handlertask.FieldResult)
	}
	if m.FieldCleared(handlertask.FieldError) {
		fields = append(fields, handlertask.FieldError)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HandlerTaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HandlerTaskMutation) ClearField(name string) error {
	switch name {
	case handlertask.FieldPayload:
		m.ClearPayload()
		return nil
	case handlertask.FieldResult:
		m.ClearResult()
		return nil
	case handlertask.FieldError:
		m.ClearError()
		return nil
	}
	return fmt.Errorf("unknown HandlerTask nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HandlerTaskMutation) ResetField(name string) error {
	switch name {
	case handlertask.FieldHandlerName:
		m.ResetHandlerName()
		return nil
	case handlertask.FieldStatus:
		m.ResetStatus()
		return nil
	case handlertask.FieldPayload:
		m.ResetPayload()
		return nil
	case handlertask.FieldResult:
		m.ResetResult()
		return nil
	case handlertask.FieldError:
		m.ResetError()
		return nil
	case handlertask.FieldNumIn:
		m.ResetNumIn()
		return nil
	case handlertask.FieldNumOut:
		m.ResetNumOut()
		return nil
	}
	return fmt.Errorf("unknown HandlerTask field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HandlerTaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.task_context != nil {
		edges = append(edges, handlertask.EdgeTaskContext)
	}
	if m.execution_context != nil {
		edges = append(edges, handlertask.EdgeExecutionContext)
	}
	if m.node != nil {
		edges = append(edges, handlertask.EdgeNode)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HandlerTaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case handlertask.EdgeTaskContext:
		if id := m.task_context; id != nil {
			return []ent.Value{*id}
		}
	case handlertask.EdgeExecutionContext:
		if id := m.execution_context; id != nil {
			return []ent.Value{*id}
		}
	case handlertask.EdgeNode:
		if id := m.node; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HandlerTaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HandlerTaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HandlerTaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedtask_context {
		edges = append(edges, handlertask.EdgeTaskContext)
	}
	if m.clearedexecution_context {
		edges = append(edges, handlertask.EdgeExecutionContext)
	}
	if m.clearednode {
		edges = append(edges, handlertask.EdgeNode)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HandlerTaskMutation) EdgeCleared(name string) bool {
	switch name {
	case handlertask.EdgeTaskContext:
		return m.clearedtask_context
	case handlertask.EdgeExecutionContext:
		return m.clearedexecution_context
	case handlertask.EdgeNode:
		return m.clearednode
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HandlerTaskMutation) ClearEdge(name string) error {
	switch name {
	case handlertask.EdgeTaskContext:
		m.ClearTaskContext()
		return nil
	case handlertask.EdgeExecutionContext:
		m.ClearExecutionContext()
		return nil
	case handlertask.EdgeNode:
		m.ClearNode()
		return nil
	}
	return fmt.Errorf("unknown HandlerTask unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HandlerTaskMutation) ResetEdge(name string) error {
	switch name {
	case handlertask.EdgeTaskContext:
		m.ResetTaskContext()
		return nil
	case handlertask.EdgeExecutionContext:
		m.ResetExecutionContext()
		return nil
	case handlertask.EdgeNode:
		m.ResetNode()
		return nil
	}
	return fmt.Errorf("unknown HandlerTask edge %s", name)
}

// NodeMutation represents an operation that mutates the Node nodes in the graph.
type NodeMutation struct {
	config
	op                       Op
	typ                      string
	id                       *string
	index                    *int
	addindex                 *int
	clearedFields            map[string]struct{}
	children                 map[string]struct{}
	removedchildren          map[string]struct{}
	clearedchildren          bool
	parent                   *string
	clearedparent            bool
	handler_task             *string
	clearedhandler_task      bool
	saga_step_task           *int
	clearedsaga_step_task    bool
	side_effect_task         *int
	clearedside_effect_task  bool
	compensation_task        *int
	clearedcompensation_task bool
	done                     bool
	oldValue                 func(context.Context) (*Node, error)
	predicates               []predicate.Node
}

var _ ent.Mutation = (*NodeMutation)(nil)

// nodeOption allows management of the mutation configuration using functional options.
type nodeOption func(*NodeMutation)

// newNodeMutation creates new mutation for the Node entity.
func newNodeMutation(c config, op Op, opts ...nodeOption) *NodeMutation {
	m := &NodeMutation{
		config:        c,
		op:            op,
		typ:           TypeNode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNodeID sets the ID field of the mutation.
func withNodeID(id string) nodeOption {
	return func(m *NodeMutation) {
		var (
			err   error
			once  sync.Once
			value *Node
		)
		m.oldValue = func(ctx context.Context) (*Node, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Node.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNode sets the old Node of the mutation.
func withNode(node *Node) nodeOption {
	return func(m *NodeMutation) {
		m.oldValue = func(context.Context) (*Node, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Node entities.
func (m *NodeMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NodeMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NodeMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Node.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIndex sets the "index" field.
func (m *NodeMutation) SetIndex(i int) {
	m.index = &i
	m.addindex = nil
}

// Index returns the value of the "index" field in the mutation.
func (m *NodeMutation) Index() (r int, exists bool) {
	v := m.index
	if v == nil {
		return
	}
	return *v, true
}

// OldIndex returns the old "index" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldIndex(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndex: %w", err)
	}
	return oldValue.Index, nil
}

// AddIndex adds i to the "index" field.
func (m *NodeMutation) AddIndex(i int) {
	if m.addindex != nil {
		*m.addindex += i
	} else {
		m.addindex = &i
	}
}

// AddedIndex returns the value that was added to the "index" field in this mutation.
func (m *NodeMutation) AddedIndex() (r int, exists bool) {
	v := m.addindex
	if v == nil {
		return
	}
	return *v, true
}

// ResetIndex resets all changes to the "index" field.
func (m *NodeMutation) ResetIndex() {
	m.index = nil
	m.addindex = nil
}

// AddChildIDs adds the "children" edge to the Node entity by ids.
func (m *NodeMutation) AddChildIDs(ids ...string) {
	if m.children == nil {
		m.children = make(map[string]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Node entity.
func (m *NodeMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Node entity was cleared.
func (m *NodeMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Node entity by IDs.
func (m *NodeMutation) RemoveChildIDs(ids ...string) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Node entity.
func (m *NodeMutation) RemovedChildrenIDs() (ids []string) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *NodeMutation) ChildrenIDs() (ids []string) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *NodeMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// SetParentID sets the "parent" edge to the Node entity by id.
func (m *NodeMutation) SetParentID(id string) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Node entity.
func (m *NodeMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Node entity was cleared.
func (m *NodeMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *NodeMutation) ParentID() (id string, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *NodeMutation) ParentIDs() (ids []string) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *NodeMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// SetHandlerTaskID sets the "handler_task" edge to the HandlerTask entity by id.
func (m *NodeMutation) SetHandlerTaskID(id string) {
	m.handler_task = &id
}

// ClearHandlerTask clears the "handler_task" edge to the HandlerTask entity.
func (m *NodeMutation) ClearHandlerTask() {
	m.clearedhandler_task = true
}

// HandlerTaskCleared reports if the "handler_task" edge to the HandlerTask entity was cleared.
func (m *NodeMutation) HandlerTaskCleared() bool {
	return m.clearedhandler_task
}

// HandlerTaskID returns the "handler_task" edge ID in the mutation.
func (m *NodeMutation) HandlerTaskID() (id string, exists bool) {
	if m.handler_task != nil {
		return *m.handler_task, true
	}
	return
}

// HandlerTaskIDs returns the "handler_task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HandlerTaskID instead. It exists only for internal usage by the builders.
func (m *NodeMutation) HandlerTaskIDs() (ids []string) {
	if id := m.handler_task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHandlerTask resets all changes to the "handler_task" edge.
func (m *NodeMutation) ResetHandlerTask() {
	m.handler_task = nil
	m.clearedhandler_task = false
}

// SetSagaStepTaskID sets the "saga_step_task" edge to the SagaTask entity by id.
func (m *NodeMutation) SetSagaStepTaskID(id int) {
	m.saga_step_task = &id
}

// ClearSagaStepTask clears the "saga_step_task" edge to the SagaTask entity.
func (m *NodeMutation) ClearSagaStepTask() {
	m.clearedsaga_step_task = true
}

// SagaStepTaskCleared reports if the "saga_step_task" edge to the SagaTask entity was cleared.
func (m *NodeMutation) SagaStepTaskCleared() bool {
	return m.clearedsaga_step_task
}

// SagaStepTaskID returns the "saga_step_task" edge ID in the mutation.
func (m *NodeMutation) SagaStepTaskID() (id int, exists bool) {
	if m.saga_step_task != nil {
		return *m.saga_step_task, true
	}
	return
}

// SagaStepTaskIDs returns the "saga_step_task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SagaStepTaskID instead. It exists only for internal usage by the builders.
func (m *NodeMutation) SagaStepTaskIDs() (ids []int) {
	if id := m.saga_step_task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSagaStepTask resets all changes to the "saga_step_task" edge.
func (m *NodeMutation) ResetSagaStepTask() {
	m.saga_step_task = nil
	m.clearedsaga_step_task = false
}

// SetSideEffectTaskID sets the "side_effect_task" edge to the SideEffectTask entity by id.
func (m *NodeMutation) SetSideEffectTaskID(id int) {
	m.side_effect_task = &id
}

// ClearSideEffectTask clears the "side_effect_task" edge to the SideEffectTask entity.
func (m *NodeMutation) ClearSideEffectTask() {
	m.clearedside_effect_task = true
}

// SideEffectTaskCleared reports if the "side_effect_task" edge to the SideEffectTask entity was cleared.
func (m *NodeMutation) SideEffectTaskCleared() bool {
	return m.clearedside_effect_task
}

// SideEffectTaskID returns the "side_effect_task" edge ID in the mutation.
func (m *NodeMutation) SideEffectTaskID() (id int, exists bool) {
	if m.side_effect_task != nil {
		return *m.side_effect_task, true
	}
	return
}

// SideEffectTaskIDs returns the "side_effect_task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SideEffectTaskID instead. It exists only for internal usage by the builders.
func (m *NodeMutation) SideEffectTaskIDs() (ids []int) {
	if id := m.side_effect_task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSideEffectTask resets all changes to the "side_effect_task" edge.
func (m *NodeMutation) ResetSideEffectTask() {
	m.side_effect_task = nil
	m.clearedside_effect_task = false
}

// SetCompensationTaskID sets the "compensation_task" edge to the CompensationTask entity by id.
func (m *NodeMutation) SetCompensationTaskID(id int) {
	m.compensation_task = &id
}

// ClearCompensationTask clears the "compensation_task" edge to the CompensationTask entity.
func (m *NodeMutation) ClearCompensationTask() {
	m.clearedcompensation_task = true
}

// CompensationTaskCleared reports if the "compensation_task" edge to the CompensationTask entity was cleared.
func (m *NodeMutation) CompensationTaskCleared() bool {
	return m.clearedcompensation_task
}

// CompensationTaskID returns the "compensation_task" edge ID in the mutation.
func (m *NodeMutation) CompensationTaskID() (id int, exists bool) {
	if m.compensation_task != nil {
		return *m.compensation_task, true
	}
	return
}

// CompensationTaskIDs returns the "compensation_task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CompensationTaskID instead. It exists only for internal usage by the builders.
func (m *NodeMutation) CompensationTaskIDs() (ids []int) {
	if id := m.compensation_task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCompensationTask resets all changes to the "compensation_task" edge.
func (m *NodeMutation) ResetCompensationTask() {
	m.compensation_task = nil
	m.clearedcompensation_task = false
}

// Where appends a list predicates to the NodeMutation builder.
func (m *NodeMutation) Where(ps ...predicate.Node) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Node, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Node).
func (m *NodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NodeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.index != nil {
		fields = append(fields, node.FieldIndex)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case node.FieldIndex:
		return m.Index()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case node.FieldIndex:
		return m.OldIndex(ctx)
	}
	return nil, fmt.Errorf("unknown Node field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case node.FieldIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndex(v)
		return nil
	}
	return fmt.Errorf("unknown Node field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NodeMutation) AddedFields() []string {
	var fields []string
	if m.addindex != nil {
		fields = append(fields, node.FieldIndex)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NodeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case node.FieldIndex:
		return m.AddedIndex()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case node.FieldIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIndex(v)
		return nil
	}
	return fmt.Errorf("unknown Node numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Node nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NodeMutation) ResetField(name string) error {
	switch name {
	case node.FieldIndex:
		m.ResetIndex()
		return nil
	}
	return fmt.Errorf("unknown Node field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.children != nil {
		edges = append(edges, node.EdgeChildren)
	}
	if m.parent != nil {
		edges = append(edges, node.EdgeParent)
	}
	if m.handler_task != nil {
		edges = append(edges, node.EdgeHandlerTask)
	}
	if m.saga_step_task != nil {
		edges = append(edges, node.EdgeSagaStepTask)
	}
	if m.side_effect_task != nil {
		edges = append(edges, node.EdgeSideEffectTask)
	}
	if m.compensation_task != nil {
		edges = append(edges, node.EdgeCompensationTask)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case node.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case node.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case node.EdgeHandlerTask:
		if id := m.handler_task; id != nil {
			return []ent.Value{*id}
		}
	case node.EdgeSagaStepTask:
		if id := m.saga_step_task; id != nil {
			return []ent.Value{*id}
		}
	case node.EdgeSideEffectTask:
		if id := m.side_effect_task; id != nil {
			return []ent.Value{*id}
		}
	case node.EdgeCompensationTask:
		if id := m.compensation_task; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedchildren != nil {
		edges = append(edges, node.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NodeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case node.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedchildren {
		edges = append(edges, node.EdgeChildren)
	}
	if m.clearedparent {
		edges = append(edges, node.EdgeParent)
	}
	if m.clearedhandler_task {
		edges = append(edges, node.EdgeHandlerTask)
	}
	if m.clearedsaga_step_task {
		edges = append(edges, node.EdgeSagaStepTask)
	}
	if m.clearedside_effect_task {
		edges = append(edges, node.EdgeSideEffectTask)
	}
	if m.clearedcompensation_task {
		edges = append(edges, node.EdgeCompensationTask)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NodeMutation) EdgeCleared(name string) bool {
	switch name {
	case node.EdgeChildren:
		return m.clearedchildren
	case node.EdgeParent:
		return m.clearedparent
	case node.EdgeHandlerTask:
		return m.clearedhandler_task
	case node.EdgeSagaStepTask:
		return m.clearedsaga_step_task
	case node.EdgeSideEffectTask:
		return m.clearedside_effect_task
	case node.EdgeCompensationTask:
		return m.clearedcompensation_task
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NodeMutation) ClearEdge(name string) error {
	switch name {
	case node.EdgeParent:
		m.ClearParent()
		return nil
	case node.EdgeHandlerTask:
		m.ClearHandlerTask()
		return nil
	case node.EdgeSagaStepTask:
		m.ClearSagaStepTask()
		return nil
	case node.EdgeSideEffectTask:
		m.ClearSideEffectTask()
		return nil
	case node.EdgeCompensationTask:
		m.ClearCompensationTask()
		return nil
	}
	return fmt.Errorf("unknown Node unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NodeMutation) ResetEdge(name string) error {
	switch name {
	case node.EdgeChildren:
		m.ResetChildren()
		return nil
	case node.EdgeParent:
		m.ResetParent()
		return nil
	case node.EdgeHandlerTask:
		m.ResetHandlerTask()
		return nil
	case node.EdgeSagaStepTask:
		m.ResetSagaStepTask()
		return nil
	case node.EdgeSideEffectTask:
		m.ResetSideEffectTask()
		return nil
	case node.EdgeCompensationTask:
		m.ResetCompensationTask()
		return nil
	}
	return fmt.Errorf("unknown Node edge %s", name)
}

// SagaTaskMutation represents an operation that mutates the SagaTask nodes in the graph.
type SagaTaskMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	node          *string
	clearednode   bool
	done          bool
	oldValue      func(context.Context) (*SagaTask, error)
	predicates    []predicate.SagaTask
}

var _ ent.Mutation = (*SagaTaskMutation)(nil)

// sagataskOption allows management of the mutation configuration using functional options.
type sagataskOption func(*SagaTaskMutation)

// newSagaTaskMutation creates new mutation for the SagaTask entity.
func newSagaTaskMutation(c config, op Op, opts ...sagataskOption) *SagaTaskMutation {
	m := &SagaTaskMutation{
		config:        c,
		op:            op,
		typ:           TypeSagaTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSagaTaskID sets the ID field of the mutation.
func withSagaTaskID(id int) sagataskOption {
	return func(m *SagaTaskMutation) {
		var (
			err   error
			once  sync.Once
			value *SagaTask
		)
		m.oldValue = func(ctx context.Context) (*SagaTask, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SagaTask.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSagaTask sets the old SagaTask of the mutation.
func withSagaTask(node *SagaTask) sagataskOption {
	return func(m *SagaTaskMutation) {
		m.oldValue = func(context.Context) (*SagaTask, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SagaTaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SagaTaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SagaTaskMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SagaTaskMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SagaTask.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNodeID sets the "node" edge to the Node entity by id.
func (m *SagaTaskMutation) SetNodeID(id string) {
	m.node = &id
}

// ClearNode clears the "node" edge to the Node entity.
func (m *SagaTaskMutation) ClearNode() {
	m.clearednode = true
}

// NodeCleared reports if the "node" edge to the Node entity was cleared.
func (m *SagaTaskMutation) NodeCleared() bool {
	return m.clearednode
}

// NodeID returns the "node" edge ID in the mutation.
func (m *SagaTaskMutation) NodeID() (id string, exists bool) {
	if m.node != nil {
		return *m.node, true
	}
	return
}

// NodeIDs returns the "node" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NodeID instead. It exists only for internal usage by the builders.
func (m *SagaTaskMutation) NodeIDs() (ids []string) {
	if id := m.node; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNode resets all changes to the "node" edge.
func (m *SagaTaskMutation) ResetNode() {
	m.node = nil
	m.clearednode = false
}

// Where appends a list predicates to the SagaTaskMutation builder.
func (m *SagaTaskMutation) Where(ps ...predicate.SagaTask) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SagaTaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SagaTaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SagaTask, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SagaTaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SagaTaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SagaTask).
func (m *SagaTaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SagaTaskMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SagaTaskMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SagaTaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown SagaTask field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SagaTaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SagaTask field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SagaTaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SagaTaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SagaTaskMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown SagaTask numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SagaTaskMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SagaTaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SagaTaskMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SagaTask nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SagaTaskMutation) ResetField(name string) error {
	return fmt.Errorf("unknown SagaTask field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SagaTaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.node != nil {
		edges = append(edges, sagatask.EdgeNode)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SagaTaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sagatask.EdgeNode:
		if id := m.node; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SagaTaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SagaTaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SagaTaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearednode {
		edges = append(edges, sagatask.EdgeNode)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SagaTaskMutation) EdgeCleared(name string) bool {
	switch name {
	case sagatask.EdgeNode:
		return m.clearednode
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SagaTaskMutation) ClearEdge(name string) error {
	switch name {
	case sagatask.EdgeNode:
		m.ClearNode()
		return nil
	}
	return fmt.Errorf("unknown SagaTask unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SagaTaskMutation) ResetEdge(name string) error {
	switch name {
	case sagatask.EdgeNode:
		m.ResetNode()
		return nil
	}
	return fmt.Errorf("unknown SagaTask edge %s", name)
}

// SideEffectTaskMutation represents an operation that mutates the SideEffectTask nodes in the graph.
type SideEffectTaskMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	node          *string
	clearednode   bool
	done          bool
	oldValue      func(context.Context) (*SideEffectTask, error)
	predicates    []predicate.SideEffectTask
}

var _ ent.Mutation = (*SideEffectTaskMutation)(nil)

// sideeffecttaskOption allows management of the mutation configuration using functional options.
type sideeffecttaskOption func(*SideEffectTaskMutation)

// newSideEffectTaskMutation creates new mutation for the SideEffectTask entity.
func newSideEffectTaskMutation(c config, op Op, opts ...sideeffecttaskOption) *SideEffectTaskMutation {
	m := &SideEffectTaskMutation{
		config:        c,
		op:            op,
		typ:           TypeSideEffectTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSideEffectTaskID sets the ID field of the mutation.
func withSideEffectTaskID(id int) sideeffecttaskOption {
	return func(m *SideEffectTaskMutation) {
		var (
			err   error
			once  sync.Once
			value *SideEffectTask
		)
		m.oldValue = func(ctx context.Context) (*SideEffectTask, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SideEffectTask.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSideEffectTask sets the old SideEffectTask of the mutation.
func withSideEffectTask(node *SideEffectTask) sideeffecttaskOption {
	return func(m *SideEffectTaskMutation) {
		m.oldValue = func(context.Context) (*SideEffectTask, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SideEffectTaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SideEffectTaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SideEffectTaskMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SideEffectTaskMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SideEffectTask.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNodeID sets the "node" edge to the Node entity by id.
func (m *SideEffectTaskMutation) SetNodeID(id string) {
	m.node = &id
}

// ClearNode clears the "node" edge to the Node entity.
func (m *SideEffectTaskMutation) ClearNode() {
	m.clearednode = true
}

// NodeCleared reports if the "node" edge to the Node entity was cleared.
func (m *SideEffectTaskMutation) NodeCleared() bool {
	return m.clearednode
}

// NodeID returns the "node" edge ID in the mutation.
func (m *SideEffectTaskMutation) NodeID() (id string, exists bool) {
	if m.node != nil {
		return *m.node, true
	}
	return
}

// NodeIDs returns the "node" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NodeID instead. It exists only for internal usage by the builders.
func (m *SideEffectTaskMutation) NodeIDs() (ids []string) {
	if id := m.node; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNode resets all changes to the "node" edge.
func (m *SideEffectTaskMutation) ResetNode() {
	m.node = nil
	m.clearednode = false
}

// Where appends a list predicates to the SideEffectTaskMutation builder.
func (m *SideEffectTaskMutation) Where(ps ...predicate.SideEffectTask) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SideEffectTaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SideEffectTaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SideEffectTask, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SideEffectTaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SideEffectTaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SideEffectTask).
func (m *SideEffectTaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SideEffectTaskMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SideEffectTaskMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SideEffectTaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown SideEffectTask field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SideEffectTaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SideEffectTask field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SideEffectTaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SideEffectTaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SideEffectTaskMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown SideEffectTask numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SideEffectTaskMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SideEffectTaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SideEffectTaskMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SideEffectTask nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SideEffectTaskMutation) ResetField(name string) error {
	return fmt.Errorf("unknown SideEffectTask field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SideEffectTaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.node != nil {
		edges = append(edges, sideeffecttask.EdgeNode)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SideEffectTaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sideeffecttask.EdgeNode:
		if id := m.node; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SideEffectTaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SideEffectTaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SideEffectTaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearednode {
		edges = append(edges, sideeffecttask.EdgeNode)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SideEffectTaskMutation) EdgeCleared(name string) bool {
	switch name {
	case sideeffecttask.EdgeNode:
		return m.clearednode
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SideEffectTaskMutation) ClearEdge(name string) error {
	switch name {
	case sideeffecttask.EdgeNode:
		m.ClearNode()
		return nil
	}
	return fmt.Errorf("unknown SideEffectTask unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SideEffectTaskMutation) ResetEdge(name string) error {
	switch name {
	case sideeffecttask.EdgeNode:
		m.ResetNode()
		return nil
	}
	return fmt.Errorf("unknown SideEffectTask edge %s", name)
}

// TaskContextMutation represents an operation that mutates the TaskContext nodes in the graph.
type TaskContextMutation struct {
	config
	op             Op
	typ            string
	id             *string
	_RetryCount    *int
	add_RetryCount *int
	_MaxRetry      *int
	add_MaxRetry   *int
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*TaskContext, error)
	predicates     []predicate.TaskContext
}

var _ ent.Mutation = (*TaskContextMutation)(nil)

// taskcontextOption allows management of the mutation configuration using functional options.
type taskcontextOption func(*TaskContextMutation)

// newTaskContextMutation creates new mutation for the TaskContext entity.
func newTaskContextMutation(c config, op Op, opts ...taskcontextOption) *TaskContextMutation {
	m := &TaskContextMutation{
		config:        c,
		op:            op,
		typ:           TypeTaskContext,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskContextID sets the ID field of the mutation.
func withTaskContextID(id string) taskcontextOption {
	return func(m *TaskContextMutation) {
		var (
			err   error
			once  sync.Once
			value *TaskContext
		)
		m.oldValue = func(ctx context.Context) (*TaskContext, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TaskContext.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaskContext sets the old TaskContext of the mutation.
func withTaskContext(node *TaskContext) taskcontextOption {
	return func(m *TaskContextMutation) {
		m.oldValue = func(context.Context) (*TaskContext, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskContextMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskContextMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TaskContext entities.
func (m *TaskContextMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskContextMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskContextMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TaskContext.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRetryCount sets the "RetryCount" field.
func (m *TaskContextMutation) SetRetryCount(i int) {
	m._RetryCount = &i
	m.add_RetryCount = nil
}

// RetryCount returns the value of the "RetryCount" field in the mutation.
func (m *TaskContextMutation) RetryCount() (r int, exists bool) {
	v := m._RetryCount
	if v == nil {
		return
	}
	return *v, true
}

// OldRetryCount returns the old "RetryCount" field's value of the TaskContext entity.
// If the TaskContext object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskContextMutation) OldRetryCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetryCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetryCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetryCount: %w", err)
	}
	return oldValue.RetryCount, nil
}

// AddRetryCount adds i to the "RetryCount" field.
func (m *TaskContextMutation) AddRetryCount(i int) {
	if m.add_RetryCount != nil {
		*m.add_RetryCount += i
	} else {
		m.add_RetryCount = &i
	}
}

// AddedRetryCount returns the value that was added to the "RetryCount" field in this mutation.
func (m *TaskContextMutation) AddedRetryCount() (r int, exists bool) {
	v := m.add_RetryCount
	if v == nil {
		return
	}
	return *v, true
}

// ResetRetryCount resets all changes to the "RetryCount" field.
func (m *TaskContextMutation) ResetRetryCount() {
	m._RetryCount = nil
	m.add_RetryCount = nil
}

// SetMaxRetry sets the "MaxRetry" field.
func (m *TaskContextMutation) SetMaxRetry(i int) {
	m._MaxRetry = &i
	m.add_MaxRetry = nil
}

// MaxRetry returns the value of the "MaxRetry" field in the mutation.
func (m *TaskContextMutation) MaxRetry() (r int, exists bool) {
	v := m._MaxRetry
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxRetry returns the old "MaxRetry" field's value of the TaskContext entity.
// If the TaskContext object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskContextMutation) OldMaxRetry(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxRetry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxRetry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxRetry: %w", err)
	}
	return oldValue.MaxRetry, nil
}

// AddMaxRetry adds i to the "MaxRetry" field.
func (m *TaskContextMutation) AddMaxRetry(i int) {
	if m.add_MaxRetry != nil {
		*m.add_MaxRetry += i
	} else {
		m.add_MaxRetry = &i
	}
}

// AddedMaxRetry returns the value that was added to the "MaxRetry" field in this mutation.
func (m *TaskContextMutation) AddedMaxRetry() (r int, exists bool) {
	v := m.add_MaxRetry
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxRetry resets all changes to the "MaxRetry" field.
func (m *TaskContextMutation) ResetMaxRetry() {
	m._MaxRetry = nil
	m.add_MaxRetry = nil
}

// Where appends a list predicates to the TaskContextMutation builder.
func (m *TaskContextMutation) Where(ps ...predicate.TaskContext) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskContextMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskContextMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TaskContext, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskContextMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskContextMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TaskContext).
func (m *TaskContextMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskContextMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._RetryCount != nil {
		fields = append(fields, taskcontext.FieldRetryCount)
	}
	if m._MaxRetry != nil {
		fields = append(fields, taskcontext.FieldMaxRetry)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskContextMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case taskcontext.FieldRetryCount:
		return m.RetryCount()
	case taskcontext.FieldMaxRetry:
		return m.MaxRetry()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskContextMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case taskcontext.FieldRetryCount:
		return m.OldRetryCount(ctx)
	case taskcontext.FieldMaxRetry:
		return m.OldMaxRetry(ctx)
	}
	return nil, fmt.Errorf("unknown TaskContext field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskContextMutation) SetField(name string, value ent.Value) error {
	switch name {
	case taskcontext.FieldRetryCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetryCount(v)
		return nil
	case taskcontext.FieldMaxRetry:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxRetry(v)
		return nil
	}
	return fmt.Errorf("unknown TaskContext field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskContextMutation) AddedFields() []string {
	var fields []string
	if m.add_RetryCount != nil {
		fields = append(fields, taskcontext.FieldRetryCount)
	}
	if m.add_MaxRetry != nil {
		fields = append(fields, taskcontext.FieldMaxRetry)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskContextMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case taskcontext.FieldRetryCount:
		return m.AddedRetryCount()
	case taskcontext.FieldMaxRetry:
		return m.AddedMaxRetry()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskContextMutation) AddField(name string, value ent.Value) error {
	switch name {
	case taskcontext.FieldRetryCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRetryCount(v)
		return nil
	case taskcontext.FieldMaxRetry:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxRetry(v)
		return nil
	}
	return fmt.Errorf("unknown TaskContext numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskContextMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskContextMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskContextMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TaskContext nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskContextMutation) ResetField(name string) error {
	switch name {
	case taskcontext.FieldRetryCount:
		m.ResetRetryCount()
		return nil
	case taskcontext.FieldMaxRetry:
		m.ResetMaxRetry()
		return nil
	}
	return fmt.Errorf("unknown TaskContext field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskContextMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskContextMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskContextMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskContextMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskContextMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskContextMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskContextMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TaskContext unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskContextMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TaskContext edge %s", name)
}
