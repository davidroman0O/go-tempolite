// Code generated by ent, DO NOT EDIT.

package sagaexecution

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldContainsFold(FieldID, id))
}

// ExecutionContextID applies equality check predicate on the "execution_context_id" field. It's identical to ExecutionContextIDEQ.
func ExecutionContextID(v string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldEQ(FieldExecutionContextID, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldEQ(FieldEndTime, v))
}

// ExecutionContextIDEQ applies the EQ predicate on the "execution_context_id" field.
func ExecutionContextIDEQ(v string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldEQ(FieldExecutionContextID, v))
}

// ExecutionContextIDNEQ applies the NEQ predicate on the "execution_context_id" field.
func ExecutionContextIDNEQ(v string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldNEQ(FieldExecutionContextID, v))
}

// ExecutionContextIDIn applies the In predicate on the "execution_context_id" field.
func ExecutionContextIDIn(vs ...string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldIn(FieldExecutionContextID, vs...))
}

// ExecutionContextIDNotIn applies the NotIn predicate on the "execution_context_id" field.
func ExecutionContextIDNotIn(vs ...string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldNotIn(FieldExecutionContextID, vs...))
}

// ExecutionContextIDGT applies the GT predicate on the "execution_context_id" field.
func ExecutionContextIDGT(v string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldGT(FieldExecutionContextID, v))
}

// ExecutionContextIDGTE applies the GTE predicate on the "execution_context_id" field.
func ExecutionContextIDGTE(v string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldGTE(FieldExecutionContextID, v))
}

// ExecutionContextIDLT applies the LT predicate on the "execution_context_id" field.
func ExecutionContextIDLT(v string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldLT(FieldExecutionContextID, v))
}

// ExecutionContextIDLTE applies the LTE predicate on the "execution_context_id" field.
func ExecutionContextIDLTE(v string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldLTE(FieldExecutionContextID, v))
}

// ExecutionContextIDContains applies the Contains predicate on the "execution_context_id" field.
func ExecutionContextIDContains(v string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldContains(FieldExecutionContextID, v))
}

// ExecutionContextIDHasPrefix applies the HasPrefix predicate on the "execution_context_id" field.
func ExecutionContextIDHasPrefix(v string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldHasPrefix(FieldExecutionContextID, v))
}

// ExecutionContextIDHasSuffix applies the HasSuffix predicate on the "execution_context_id" field.
func ExecutionContextIDHasSuffix(v string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldHasSuffix(FieldExecutionContextID, v))
}

// ExecutionContextIDEqualFold applies the EqualFold predicate on the "execution_context_id" field.
func ExecutionContextIDEqualFold(v string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldEqualFold(FieldExecutionContextID, v))
}

// ExecutionContextIDContainsFold applies the ContainsFold predicate on the "execution_context_id" field.
func ExecutionContextIDContainsFold(v string) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldContainsFold(FieldExecutionContextID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldNotIn(FieldStatus, vs...))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.SagaExecution {
	return predicate.SagaExecution(sql.FieldNotNull(FieldEndTime))
}

// HasExecutionContext applies the HasEdge predicate on the "execution_context" edge.
func HasExecutionContext() predicate.SagaExecution {
	return predicate.SagaExecution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExecutionContextTable, ExecutionContextColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionContextWith applies the HasEdge predicate on the "execution_context" edge with a given conditions (other predicates).
func HasExecutionContextWith(preds ...predicate.ExecutionContext) predicate.SagaExecution {
	return predicate.SagaExecution(func(s *sql.Selector) {
		step := newExecutionContextStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSteps applies the HasEdge predicate on the "steps" edge.
func HasSteps() predicate.SagaExecution {
	return predicate.SagaExecution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StepsTable, StepsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStepsWith applies the HasEdge predicate on the "steps" edge with a given conditions (other predicates).
func HasStepsWith(preds ...predicate.SagaStepExecution) predicate.SagaExecution {
	return predicate.SagaExecution(func(s *sql.Selector) {
		step := newStepsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SagaExecution) predicate.SagaExecution {
	return predicate.SagaExecution(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SagaExecution) predicate.SagaExecution {
	return predicate.SagaExecution(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SagaExecution) predicate.SagaExecution {
	return predicate.SagaExecution(sql.NotPredicates(p))
}
