// Code generated by ent, DO NOT EDIT.

package sagaexecution

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sagaexecution type in the database.
	Label = "saga_execution"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRunID holds the string denoting the run_id field in the database.
	FieldRunID = "run_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldAttempt holds the string denoting the attempt field in the database.
	FieldAttempt = "attempt"
	// FieldOutput holds the string denoting the output field in the database.
	FieldOutput = "output"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSaga holds the string denoting the saga edge name in mutations.
	EdgeSaga = "saga"
	// EdgeSteps holds the string denoting the steps edge name in mutations.
	EdgeSteps = "steps"
	// Table holds the table name of the sagaexecution in the database.
	Table = "saga_executions"
	// SagaTable is the table that holds the saga relation/edge.
	SagaTable = "saga_executions"
	// SagaInverseTable is the table name for the Saga entity.
	// It exists in this package in order to avoid circular dependency with the "saga" package.
	SagaInverseTable = "sagas"
	// SagaColumn is the table column denoting the saga relation/edge.
	SagaColumn = "saga_executions"
	// StepsTable is the table that holds the steps relation/edge.
	StepsTable = "saga_step_executions"
	// StepsInverseTable is the table name for the SagaStepExecution entity.
	// It exists in this package in order to avoid circular dependency with the "sagastepexecution" package.
	StepsInverseTable = "saga_step_executions"
	// StepsColumn is the table column denoting the steps relation/edge.
	StepsColumn = "saga_execution_steps"
)

// Columns holds all SQL columns for sagaexecution fields.
var Columns = []string{
	FieldID,
	FieldRunID,
	FieldStatus,
	FieldAttempt,
	FieldOutput,
	FieldStartedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "saga_executions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"saga_executions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAttempt holds the default value on creation for the "attempt" field.
	DefaultAttempt int
	// DefaultStartedAt holds the default value on creation for the "started_at" field.
	DefaultStartedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending      Status = "Pending"
	StatusRunning      Status = "Running"
	StatusCompleted    Status = "Completed"
	StatusFailed       Status = "Failed"
	StatusCompensating Status = "Compensating"
	StatusCompensated  Status = "Compensated"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusRunning, StatusCompleted, StatusFailed, StatusCompensating, StatusCompensated:
		return nil
	default:
		return fmt.Errorf("sagaexecution: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the SagaExecution queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRunID orders the results by the run_id field.
func ByRunID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRunID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByAttempt orders the results by the attempt field.
func ByAttempt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttempt, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySagaField orders the results by saga field.
func BySagaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSagaStep(), sql.OrderByField(field, opts...))
	}
}

// ByStepsCount orders the results by steps count.
func ByStepsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStepsStep(), opts...)
	}
}

// BySteps orders the results by steps terms.
func BySteps(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStepsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSagaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SagaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SagaTable, SagaColumn),
	)
}
func newStepsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StepsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StepsTable, StepsColumn),
	)
}
