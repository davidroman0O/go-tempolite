// Code generated by ent, DO NOT EDIT.

package sagaexecution

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sagaexecution type in the database.
	Label = "saga_execution"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExecutionContextID holds the string denoting the execution_context_id field in the database.
	FieldExecutionContextID = "execution_context_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// EdgeExecutionContext holds the string denoting the execution_context edge name in mutations.
	EdgeExecutionContext = "execution_context"
	// EdgeSteps holds the string denoting the steps edge name in mutations.
	EdgeSteps = "steps"
	// Table holds the table name of the sagaexecution in the database.
	Table = "saga_executions"
	// ExecutionContextTable is the table that holds the execution_context relation/edge.
	ExecutionContextTable = "saga_executions"
	// ExecutionContextInverseTable is the table name for the ExecutionContext entity.
	// It exists in this package in order to avoid circular dependency with the "executioncontext" package.
	ExecutionContextInverseTable = "execution_contexts"
	// ExecutionContextColumn is the table column denoting the execution_context relation/edge.
	ExecutionContextColumn = "execution_context_id"
	// StepsTable is the table that holds the steps relation/edge.
	StepsTable = "saga_step_executions"
	// StepsInverseTable is the table name for the SagaStepExecution entity.
	// It exists in this package in order to avoid circular dependency with the "sagastepexecution" package.
	StepsInverseTable = "saga_step_executions"
	// StepsColumn is the table column denoting the steps relation/edge.
	StepsColumn = "saga_execution_steps"
)

// Columns holds all SQL columns for sagaexecution fields.
var Columns = []string{
	FieldID,
	FieldExecutionContextID,
	FieldStatus,
	FieldStartTime,
	FieldEndTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusRunning   Status = "running"
	StatusCompleted Status = "completed"
	StatusFailed    Status = "failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusRunning, StatusCompleted, StatusFailed:
		return nil
	default:
		return fmt.Errorf("sagaexecution: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the SagaExecution queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExecutionContextID orders the results by the execution_context_id field.
func ByExecutionContextID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutionContextID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByExecutionContextField orders the results by execution_context field.
func ByExecutionContextField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExecutionContextStep(), sql.OrderByField(field, opts...))
	}
}

// ByStepsCount orders the results by steps count.
func ByStepsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStepsStep(), opts...)
	}
}

// BySteps orders the results by steps terms.
func BySteps(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStepsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newExecutionContextStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExecutionContextInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExecutionContextTable, ExecutionContextColumn),
	)
}
func newStepsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StepsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StepsTable, StepsColumn),
	)
}
