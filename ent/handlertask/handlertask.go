// Code generated by ent, DO NOT EDIT.

package handlertask

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the handlertask type in the database.
	Label = "handler_task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHandlerName holds the string denoting the handlername field in the database.
	FieldHandlerName = "handler_name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPayload holds the string denoting the payload field in the database.
	FieldPayload = "payload"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// FieldNumIn holds the string denoting the numin field in the database.
	FieldNumIn = "num_in"
	// FieldNumOut holds the string denoting the numout field in the database.
	FieldNumOut = "num_out"
	// EdgeTaskContext holds the string denoting the task_context edge name in mutations.
	EdgeTaskContext = "task_context"
	// EdgeExecutionContext holds the string denoting the execution_context edge name in mutations.
	EdgeExecutionContext = "execution_context"
	// Table holds the table name of the handlertask in the database.
	Table = "handler_tasks"
	// TaskContextTable is the table that holds the task_context relation/edge.
	TaskContextTable = "handler_tasks"
	// TaskContextInverseTable is the table name for the TaskContext entity.
	// It exists in this package in order to avoid circular dependency with the "taskcontext" package.
	TaskContextInverseTable = "task_contexts"
	// TaskContextColumn is the table column denoting the task_context relation/edge.
	TaskContextColumn = "handler_task_task_context"
	// ExecutionContextTable is the table that holds the execution_context relation/edge.
	ExecutionContextTable = "handler_tasks"
	// ExecutionContextInverseTable is the table name for the ExecutionContext entity.
	// It exists in this package in order to avoid circular dependency with the "executioncontext" package.
	ExecutionContextInverseTable = "execution_contexts"
	// ExecutionContextColumn is the table column denoting the execution_context relation/edge.
	ExecutionContextColumn = "handler_task_execution_context"
)

// Columns holds all SQL columns for handlertask fields.
var Columns = []string{
	FieldID,
	FieldHandlerName,
	FieldStatus,
	FieldPayload,
	FieldResult,
	FieldError,
	FieldNumIn,
	FieldNumOut,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "handler_tasks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"handler_task_task_context",
	"handler_task_execution_context",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending    Status = "Pending"
	StatusInProgress Status = "InProgress"
	StatusCompleted  Status = "Completed"
	StatusFailed     Status = "Failed"
	StatusCancelled  Status = "Cancelled"
	StatusTerminated Status = "Terminated"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusInProgress, StatusCompleted, StatusFailed, StatusCancelled, StatusTerminated:
		return nil
	default:
		return fmt.Errorf("handlertask: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the HandlerTask queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHandlerName orders the results by the handlerName field.
func ByHandlerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandlerName, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNumIn orders the results by the numIn field.
func ByNumIn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumIn, opts...).ToFunc()
}

// ByNumOut orders the results by the numOut field.
func ByNumOut(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumOut, opts...).ToFunc()
}

// ByTaskContextField orders the results by task_context field.
func ByTaskContextField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskContextStep(), sql.OrderByField(field, opts...))
	}
}

// ByExecutionContextField orders the results by execution_context field.
func ByExecutionContextField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExecutionContextStep(), sql.OrderByField(field, opts...))
	}
}
func newTaskContextStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskContextInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TaskContextTable, TaskContextColumn),
	)
}
func newExecutionContextStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExecutionContextInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ExecutionContextTable, ExecutionContextColumn),
	)
}
