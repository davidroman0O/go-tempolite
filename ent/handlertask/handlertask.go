// Code generated by ent, DO NOT EDIT.

package handlertask

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the handlertask type in the database.
	Label = "handler_task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTaskType holds the string denoting the task_type field in the database.
	FieldTaskType = "task_type"
	// FieldHandlerName holds the string denoting the handler_name field in the database.
	FieldHandlerName = "handler_name"
	// FieldPayload holds the string denoting the payload field in the database.
	FieldPayload = "payload"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// EdgeHandlerExecution holds the string denoting the handler_execution edge name in mutations.
	EdgeHandlerExecution = "handler_execution"
	// Table holds the table name of the handlertask in the database.
	Table = "handler_tasks"
	// HandlerExecutionTable is the table that holds the handler_execution relation/edge.
	HandlerExecutionTable = "handler_tasks"
	// HandlerExecutionInverseTable is the table name for the HandlerExecution entity.
	// It exists in this package in order to avoid circular dependency with the "handlerexecution" package.
	HandlerExecutionInverseTable = "handler_executions"
	// HandlerExecutionColumn is the table column denoting the handler_execution relation/edge.
	HandlerExecutionColumn = "handler_execution_tasks"
)

// Columns holds all SQL columns for handlertask fields.
var Columns = []string{
	FieldID,
	FieldTaskType,
	FieldHandlerName,
	FieldPayload,
	FieldResult,
	FieldError,
	FieldStatus,
	FieldCreatedAt,
	FieldCompletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "handler_tasks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"handler_execution_tasks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// TaskType defines the type for the "task_type" enum field.
type TaskType string

// TaskTypeHandler is the default value of the TaskType enum.
const DefaultTaskType = TaskTypeHandler

// TaskType values.
const (
	TaskTypeHandler      TaskType = "handler"
	TaskTypeSideEffect   TaskType = "side_effect"
	TaskTypeTransaction  TaskType = "transaction"
	TaskTypeCompensation TaskType = "compensation"
)

func (tt TaskType) String() string {
	return string(tt)
}

// TaskTypeValidator is a validator for the "task_type" field enum values. It is called by the builders before save.
func TaskTypeValidator(tt TaskType) error {
	switch tt {
	case TaskTypeHandler, TaskTypeSideEffect, TaskTypeTransaction, TaskTypeCompensation:
		return nil
	default:
		return fmt.Errorf("handlertask: invalid enum value for task_type field: %q", tt)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending    Status = "pending"
	StatusInProgress Status = "in_progress"
	StatusCompleted  Status = "completed"
	StatusFailed     Status = "failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusInProgress, StatusCompleted, StatusFailed:
		return nil
	default:
		return fmt.Errorf("handlertask: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the HandlerTask queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTaskType orders the results by the task_type field.
func ByTaskType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskType, opts...).ToFunc()
}

// ByHandlerName orders the results by the handler_name field.
func ByHandlerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandlerName, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByHandlerExecutionField orders the results by handler_execution field.
func ByHandlerExecutionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHandlerExecutionStep(), sql.OrderByField(field, opts...))
	}
}
func newHandlerExecutionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HandlerExecutionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HandlerExecutionTable, HandlerExecutionColumn),
	)
}
