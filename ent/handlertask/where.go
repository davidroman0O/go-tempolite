// Code generated by ent, DO NOT EDIT.

package handlertask

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldContainsFold(FieldID, id))
}

// HandlerName applies equality check predicate on the "handlerName" field. It's identical to HandlerNameEQ.
func HandlerName(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldHandlerName, v))
}

// Payload applies equality check predicate on the "payload" field. It's identical to PayloadEQ.
func Payload(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldPayload, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldResult, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldError, v))
}

// NumIn applies equality check predicate on the "numIn" field. It's identical to NumInEQ.
func NumIn(v int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldNumIn, v))
}

// NumOut applies equality check predicate on the "numOut" field. It's identical to NumOutEQ.
func NumOut(v int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldNumOut, v))
}

// HandlerNameEQ applies the EQ predicate on the "handlerName" field.
func HandlerNameEQ(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldHandlerName, v))
}

// HandlerNameNEQ applies the NEQ predicate on the "handlerName" field.
func HandlerNameNEQ(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldHandlerName, v))
}

// HandlerNameIn applies the In predicate on the "handlerName" field.
func HandlerNameIn(vs ...string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldHandlerName, vs...))
}

// HandlerNameNotIn applies the NotIn predicate on the "handlerName" field.
func HandlerNameNotIn(vs ...string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldHandlerName, vs...))
}

// HandlerNameGT applies the GT predicate on the "handlerName" field.
func HandlerNameGT(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGT(FieldHandlerName, v))
}

// HandlerNameGTE applies the GTE predicate on the "handlerName" field.
func HandlerNameGTE(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGTE(FieldHandlerName, v))
}

// HandlerNameLT applies the LT predicate on the "handlerName" field.
func HandlerNameLT(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLT(FieldHandlerName, v))
}

// HandlerNameLTE applies the LTE predicate on the "handlerName" field.
func HandlerNameLTE(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLTE(FieldHandlerName, v))
}

// HandlerNameContains applies the Contains predicate on the "handlerName" field.
func HandlerNameContains(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldContains(FieldHandlerName, v))
}

// HandlerNameHasPrefix applies the HasPrefix predicate on the "handlerName" field.
func HandlerNameHasPrefix(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldHasPrefix(FieldHandlerName, v))
}

// HandlerNameHasSuffix applies the HasSuffix predicate on the "handlerName" field.
func HandlerNameHasSuffix(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldHasSuffix(FieldHandlerName, v))
}

// HandlerNameEqualFold applies the EqualFold predicate on the "handlerName" field.
func HandlerNameEqualFold(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEqualFold(FieldHandlerName, v))
}

// HandlerNameContainsFold applies the ContainsFold predicate on the "handlerName" field.
func HandlerNameContainsFold(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldContainsFold(FieldHandlerName, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldStatus, vs...))
}

// PayloadEQ applies the EQ predicate on the "payload" field.
func PayloadEQ(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldPayload, v))
}

// PayloadNEQ applies the NEQ predicate on the "payload" field.
func PayloadNEQ(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldPayload, v))
}

// PayloadIn applies the In predicate on the "payload" field.
func PayloadIn(vs ...[]byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldPayload, vs...))
}

// PayloadNotIn applies the NotIn predicate on the "payload" field.
func PayloadNotIn(vs ...[]byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldPayload, vs...))
}

// PayloadGT applies the GT predicate on the "payload" field.
func PayloadGT(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGT(FieldPayload, v))
}

// PayloadGTE applies the GTE predicate on the "payload" field.
func PayloadGTE(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGTE(FieldPayload, v))
}

// PayloadLT applies the LT predicate on the "payload" field.
func PayloadLT(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLT(FieldPayload, v))
}

// PayloadLTE applies the LTE predicate on the "payload" field.
func PayloadLTE(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLTE(FieldPayload, v))
}

// PayloadIsNil applies the IsNil predicate on the "payload" field.
func PayloadIsNil() predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIsNull(FieldPayload))
}

// PayloadNotNil applies the NotNil predicate on the "payload" field.
func PayloadNotNil() predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotNull(FieldPayload))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldResult, v))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...[]byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldResult, vs...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...[]byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldResult, vs...))
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGT(FieldResult, v))
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGTE(FieldResult, v))
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLT(FieldResult, v))
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLTE(FieldResult, v))
}

// ResultIsNil applies the IsNil predicate on the "result" field.
func ResultIsNil() predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIsNull(FieldResult))
}

// ResultNotNil applies the NotNil predicate on the "result" field.
func ResultNotNil() predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotNull(FieldResult))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...[]byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...[]byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLTE(FieldError, v))
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIsNull(FieldError))
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotNull(FieldError))
}

// NumInEQ applies the EQ predicate on the "numIn" field.
func NumInEQ(v int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldNumIn, v))
}

// NumInNEQ applies the NEQ predicate on the "numIn" field.
func NumInNEQ(v int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldNumIn, v))
}

// NumInIn applies the In predicate on the "numIn" field.
func NumInIn(vs ...int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldNumIn, vs...))
}

// NumInNotIn applies the NotIn predicate on the "numIn" field.
func NumInNotIn(vs ...int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldNumIn, vs...))
}

// NumInGT applies the GT predicate on the "numIn" field.
func NumInGT(v int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGT(FieldNumIn, v))
}

// NumInGTE applies the GTE predicate on the "numIn" field.
func NumInGTE(v int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGTE(FieldNumIn, v))
}

// NumInLT applies the LT predicate on the "numIn" field.
func NumInLT(v int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLT(FieldNumIn, v))
}

// NumInLTE applies the LTE predicate on the "numIn" field.
func NumInLTE(v int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLTE(FieldNumIn, v))
}

// NumOutEQ applies the EQ predicate on the "numOut" field.
func NumOutEQ(v int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldNumOut, v))
}

// NumOutNEQ applies the NEQ predicate on the "numOut" field.
func NumOutNEQ(v int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldNumOut, v))
}

// NumOutIn applies the In predicate on the "numOut" field.
func NumOutIn(vs ...int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldNumOut, vs...))
}

// NumOutNotIn applies the NotIn predicate on the "numOut" field.
func NumOutNotIn(vs ...int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldNumOut, vs...))
}

// NumOutGT applies the GT predicate on the "numOut" field.
func NumOutGT(v int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGT(FieldNumOut, v))
}

// NumOutGTE applies the GTE predicate on the "numOut" field.
func NumOutGTE(v int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGTE(FieldNumOut, v))
}

// NumOutLT applies the LT predicate on the "numOut" field.
func NumOutLT(v int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLT(FieldNumOut, v))
}

// NumOutLTE applies the LTE predicate on the "numOut" field.
func NumOutLTE(v int) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLTE(FieldNumOut, v))
}

// HasTaskContext applies the HasEdge predicate on the "task_context" edge.
func HasTaskContext() predicate.HandlerTask {
	return predicate.HandlerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TaskContextTable, TaskContextColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskContextWith applies the HasEdge predicate on the "task_context" edge with a given conditions (other predicates).
func HasTaskContextWith(preds ...predicate.TaskContext) predicate.HandlerTask {
	return predicate.HandlerTask(func(s *sql.Selector) {
		step := newTaskContextStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExecutionContext applies the HasEdge predicate on the "execution_context" edge.
func HasExecutionContext() predicate.HandlerTask {
	return predicate.HandlerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ExecutionContextTable, ExecutionContextColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionContextWith applies the HasEdge predicate on the "execution_context" edge with a given conditions (other predicates).
func HasExecutionContextWith(preds ...predicate.ExecutionContext) predicate.HandlerTask {
	return predicate.HandlerTask(func(s *sql.Selector) {
		step := newExecutionContextStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNode applies the HasEdge predicate on the "node" edge.
func HasNode() predicate.HandlerTask {
	return predicate.HandlerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, NodeTable, NodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeWith applies the HasEdge predicate on the "node" edge with a given conditions (other predicates).
func HasNodeWith(preds ...predicate.Node) predicate.HandlerTask {
	return predicate.HandlerTask(func(s *sql.Selector) {
		step := newNodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HandlerTask) predicate.HandlerTask {
	return predicate.HandlerTask(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HandlerTask) predicate.HandlerTask {
	return predicate.HandlerTask(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HandlerTask) predicate.HandlerTask {
	return predicate.HandlerTask(sql.NotPredicates(p))
}
