// Code generated by ent, DO NOT EDIT.

package handlertask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldContainsFold(FieldID, id))
}

// HandlerName applies equality check predicate on the "handler_name" field. It's identical to HandlerNameEQ.
func HandlerName(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldHandlerName, v))
}

// Payload applies equality check predicate on the "payload" field. It's identical to PayloadEQ.
func Payload(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldPayload, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldResult, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldError, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldCreatedAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldCompletedAt, v))
}

// TaskTypeEQ applies the EQ predicate on the "task_type" field.
func TaskTypeEQ(v TaskType) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldTaskType, v))
}

// TaskTypeNEQ applies the NEQ predicate on the "task_type" field.
func TaskTypeNEQ(v TaskType) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldTaskType, v))
}

// TaskTypeIn applies the In predicate on the "task_type" field.
func TaskTypeIn(vs ...TaskType) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldTaskType, vs...))
}

// TaskTypeNotIn applies the NotIn predicate on the "task_type" field.
func TaskTypeNotIn(vs ...TaskType) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldTaskType, vs...))
}

// HandlerNameEQ applies the EQ predicate on the "handler_name" field.
func HandlerNameEQ(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldHandlerName, v))
}

// HandlerNameNEQ applies the NEQ predicate on the "handler_name" field.
func HandlerNameNEQ(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldHandlerName, v))
}

// HandlerNameIn applies the In predicate on the "handler_name" field.
func HandlerNameIn(vs ...string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldHandlerName, vs...))
}

// HandlerNameNotIn applies the NotIn predicate on the "handler_name" field.
func HandlerNameNotIn(vs ...string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldHandlerName, vs...))
}

// HandlerNameGT applies the GT predicate on the "handler_name" field.
func HandlerNameGT(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGT(FieldHandlerName, v))
}

// HandlerNameGTE applies the GTE predicate on the "handler_name" field.
func HandlerNameGTE(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGTE(FieldHandlerName, v))
}

// HandlerNameLT applies the LT predicate on the "handler_name" field.
func HandlerNameLT(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLT(FieldHandlerName, v))
}

// HandlerNameLTE applies the LTE predicate on the "handler_name" field.
func HandlerNameLTE(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLTE(FieldHandlerName, v))
}

// HandlerNameContains applies the Contains predicate on the "handler_name" field.
func HandlerNameContains(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldContains(FieldHandlerName, v))
}

// HandlerNameHasPrefix applies the HasPrefix predicate on the "handler_name" field.
func HandlerNameHasPrefix(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldHasPrefix(FieldHandlerName, v))
}

// HandlerNameHasSuffix applies the HasSuffix predicate on the "handler_name" field.
func HandlerNameHasSuffix(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldHasSuffix(FieldHandlerName, v))
}

// HandlerNameEqualFold applies the EqualFold predicate on the "handler_name" field.
func HandlerNameEqualFold(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEqualFold(FieldHandlerName, v))
}

// HandlerNameContainsFold applies the ContainsFold predicate on the "handler_name" field.
func HandlerNameContainsFold(v string) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldContainsFold(FieldHandlerName, v))
}

// PayloadEQ applies the EQ predicate on the "payload" field.
func PayloadEQ(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldPayload, v))
}

// PayloadNEQ applies the NEQ predicate on the "payload" field.
func PayloadNEQ(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldPayload, v))
}

// PayloadIn applies the In predicate on the "payload" field.
func PayloadIn(vs ...[]byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldPayload, vs...))
}

// PayloadNotIn applies the NotIn predicate on the "payload" field.
func PayloadNotIn(vs ...[]byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldPayload, vs...))
}

// PayloadGT applies the GT predicate on the "payload" field.
func PayloadGT(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGT(FieldPayload, v))
}

// PayloadGTE applies the GTE predicate on the "payload" field.
func PayloadGTE(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGTE(FieldPayload, v))
}

// PayloadLT applies the LT predicate on the "payload" field.
func PayloadLT(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLT(FieldPayload, v))
}

// PayloadLTE applies the LTE predicate on the "payload" field.
func PayloadLTE(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLTE(FieldPayload, v))
}

// PayloadIsNil applies the IsNil predicate on the "payload" field.
func PayloadIsNil() predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIsNull(FieldPayload))
}

// PayloadNotNil applies the NotNil predicate on the "payload" field.
func PayloadNotNil() predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotNull(FieldPayload))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldResult, v))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...[]byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldResult, vs...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...[]byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldResult, vs...))
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGT(FieldResult, v))
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGTE(FieldResult, v))
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLT(FieldResult, v))
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLTE(FieldResult, v))
}

// ResultIsNil applies the IsNil predicate on the "result" field.
func ResultIsNil() predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIsNull(FieldResult))
}

// ResultNotNil applies the NotNil predicate on the "result" field.
func ResultNotNil() predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotNull(FieldResult))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...[]byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...[]byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v []byte) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLTE(FieldError, v))
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIsNull(FieldError))
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotNull(FieldError))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldStatus, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLTE(FieldCreatedAt, v))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.HandlerTask {
	return predicate.HandlerTask(sql.FieldNotNull(FieldCompletedAt))
}

// HasHandlerExecution applies the HasEdge predicate on the "handler_execution" edge.
func HasHandlerExecution() predicate.HandlerTask {
	return predicate.HandlerTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HandlerExecutionTable, HandlerExecutionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHandlerExecutionWith applies the HasEdge predicate on the "handler_execution" edge with a given conditions (other predicates).
func HasHandlerExecutionWith(preds ...predicate.HandlerExecution) predicate.HandlerTask {
	return predicate.HandlerTask(func(s *sql.Selector) {
		step := newHandlerExecutionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HandlerTask) predicate.HandlerTask {
	return predicate.HandlerTask(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HandlerTask) predicate.HandlerTask {
	return predicate.HandlerTask(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HandlerTask) predicate.HandlerTask {
	return predicate.HandlerTask(sql.NotPredicates(p))
}
