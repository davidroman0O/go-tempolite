// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/handlertask"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/taskcontext"
)

// HandlerTaskUpdate is the builder for updating HandlerTask entities.
type HandlerTaskUpdate struct {
	config
	hooks    []Hook
	mutation *HandlerTaskMutation
}

// Where appends a list predicates to the HandlerTaskUpdate builder.
func (htu *HandlerTaskUpdate) Where(ps ...predicate.HandlerTask) *HandlerTaskUpdate {
	htu.mutation.Where(ps...)
	return htu
}

// SetHandlerName sets the "handlerName" field.
func (htu *HandlerTaskUpdate) SetHandlerName(s string) *HandlerTaskUpdate {
	htu.mutation.SetHandlerName(s)
	return htu
}

// SetNillableHandlerName sets the "handlerName" field if the given value is not nil.
func (htu *HandlerTaskUpdate) SetNillableHandlerName(s *string) *HandlerTaskUpdate {
	if s != nil {
		htu.SetHandlerName(*s)
	}
	return htu
}

// SetStatus sets the "status" field.
func (htu *HandlerTaskUpdate) SetStatus(h handlertask.Status) *HandlerTaskUpdate {
	htu.mutation.SetStatus(h)
	return htu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (htu *HandlerTaskUpdate) SetNillableStatus(h *handlertask.Status) *HandlerTaskUpdate {
	if h != nil {
		htu.SetStatus(*h)
	}
	return htu
}

// SetPayload sets the "payload" field.
func (htu *HandlerTaskUpdate) SetPayload(b []byte) *HandlerTaskUpdate {
	htu.mutation.SetPayload(b)
	return htu
}

// ClearPayload clears the value of the "payload" field.
func (htu *HandlerTaskUpdate) ClearPayload() *HandlerTaskUpdate {
	htu.mutation.ClearPayload()
	return htu
}

// SetResult sets the "result" field.
func (htu *HandlerTaskUpdate) SetResult(b []byte) *HandlerTaskUpdate {
	htu.mutation.SetResult(b)
	return htu
}

// ClearResult clears the value of the "result" field.
func (htu *HandlerTaskUpdate) ClearResult() *HandlerTaskUpdate {
	htu.mutation.ClearResult()
	return htu
}

// SetError sets the "error" field.
func (htu *HandlerTaskUpdate) SetError(b []byte) *HandlerTaskUpdate {
	htu.mutation.SetError(b)
	return htu
}

// ClearError clears the value of the "error" field.
func (htu *HandlerTaskUpdate) ClearError() *HandlerTaskUpdate {
	htu.mutation.ClearError()
	return htu
}

// SetNumIn sets the "numIn" field.
func (htu *HandlerTaskUpdate) SetNumIn(i int) *HandlerTaskUpdate {
	htu.mutation.ResetNumIn()
	htu.mutation.SetNumIn(i)
	return htu
}

// SetNillableNumIn sets the "numIn" field if the given value is not nil.
func (htu *HandlerTaskUpdate) SetNillableNumIn(i *int) *HandlerTaskUpdate {
	if i != nil {
		htu.SetNumIn(*i)
	}
	return htu
}

// AddNumIn adds i to the "numIn" field.
func (htu *HandlerTaskUpdate) AddNumIn(i int) *HandlerTaskUpdate {
	htu.mutation.AddNumIn(i)
	return htu
}

// SetNumOut sets the "numOut" field.
func (htu *HandlerTaskUpdate) SetNumOut(i int) *HandlerTaskUpdate {
	htu.mutation.ResetNumOut()
	htu.mutation.SetNumOut(i)
	return htu
}

// SetNillableNumOut sets the "numOut" field if the given value is not nil.
func (htu *HandlerTaskUpdate) SetNillableNumOut(i *int) *HandlerTaskUpdate {
	if i != nil {
		htu.SetNumOut(*i)
	}
	return htu
}

// AddNumOut adds i to the "numOut" field.
func (htu *HandlerTaskUpdate) AddNumOut(i int) *HandlerTaskUpdate {
	htu.mutation.AddNumOut(i)
	return htu
}

// SetTaskContextID sets the "task_context" edge to the TaskContext entity by ID.
func (htu *HandlerTaskUpdate) SetTaskContextID(id string) *HandlerTaskUpdate {
	htu.mutation.SetTaskContextID(id)
	return htu
}

// SetNillableTaskContextID sets the "task_context" edge to the TaskContext entity by ID if the given value is not nil.
func (htu *HandlerTaskUpdate) SetNillableTaskContextID(id *string) *HandlerTaskUpdate {
	if id != nil {
		htu = htu.SetTaskContextID(*id)
	}
	return htu
}

// SetTaskContext sets the "task_context" edge to the TaskContext entity.
func (htu *HandlerTaskUpdate) SetTaskContext(t *TaskContext) *HandlerTaskUpdate {
	return htu.SetTaskContextID(t.ID)
}

// SetExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID.
func (htu *HandlerTaskUpdate) SetExecutionContextID(id string) *HandlerTaskUpdate {
	htu.mutation.SetExecutionContextID(id)
	return htu
}

// SetNillableExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID if the given value is not nil.
func (htu *HandlerTaskUpdate) SetNillableExecutionContextID(id *string) *HandlerTaskUpdate {
	if id != nil {
		htu = htu.SetExecutionContextID(*id)
	}
	return htu
}

// SetExecutionContext sets the "execution_context" edge to the ExecutionContext entity.
func (htu *HandlerTaskUpdate) SetExecutionContext(e *ExecutionContext) *HandlerTaskUpdate {
	return htu.SetExecutionContextID(e.ID)
}

// Mutation returns the HandlerTaskMutation object of the builder.
func (htu *HandlerTaskUpdate) Mutation() *HandlerTaskMutation {
	return htu.mutation
}

// ClearTaskContext clears the "task_context" edge to the TaskContext entity.
func (htu *HandlerTaskUpdate) ClearTaskContext() *HandlerTaskUpdate {
	htu.mutation.ClearTaskContext()
	return htu
}

// ClearExecutionContext clears the "execution_context" edge to the ExecutionContext entity.
func (htu *HandlerTaskUpdate) ClearExecutionContext() *HandlerTaskUpdate {
	htu.mutation.ClearExecutionContext()
	return htu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (htu *HandlerTaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, htu.sqlSave, htu.mutation, htu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (htu *HandlerTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := htu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (htu *HandlerTaskUpdate) Exec(ctx context.Context) error {
	_, err := htu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htu *HandlerTaskUpdate) ExecX(ctx context.Context) {
	if err := htu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htu *HandlerTaskUpdate) check() error {
	if v, ok := htu.mutation.Status(); ok {
		if err := handlertask.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "HandlerTask.status": %w`, err)}
		}
	}
	return nil
}

func (htu *HandlerTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := htu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(handlertask.Table, handlertask.Columns, sqlgraph.NewFieldSpec(handlertask.FieldID, field.TypeString))
	if ps := htu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := htu.mutation.HandlerName(); ok {
		_spec.SetField(handlertask.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := htu.mutation.Status(); ok {
		_spec.SetField(handlertask.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := htu.mutation.Payload(); ok {
		_spec.SetField(handlertask.FieldPayload, field.TypeBytes, value)
	}
	if htu.mutation.PayloadCleared() {
		_spec.ClearField(handlertask.FieldPayload, field.TypeBytes)
	}
	if value, ok := htu.mutation.Result(); ok {
		_spec.SetField(handlertask.FieldResult, field.TypeBytes, value)
	}
	if htu.mutation.ResultCleared() {
		_spec.ClearField(handlertask.FieldResult, field.TypeBytes)
	}
	if value, ok := htu.mutation.Error(); ok {
		_spec.SetField(handlertask.FieldError, field.TypeBytes, value)
	}
	if htu.mutation.ErrorCleared() {
		_spec.ClearField(handlertask.FieldError, field.TypeBytes)
	}
	if value, ok := htu.mutation.NumIn(); ok {
		_spec.SetField(handlertask.FieldNumIn, field.TypeInt, value)
	}
	if value, ok := htu.mutation.AddedNumIn(); ok {
		_spec.AddField(handlertask.FieldNumIn, field.TypeInt, value)
	}
	if value, ok := htu.mutation.NumOut(); ok {
		_spec.SetField(handlertask.FieldNumOut, field.TypeInt, value)
	}
	if value, ok := htu.mutation.AddedNumOut(); ok {
		_spec.AddField(handlertask.FieldNumOut, field.TypeInt, value)
	}
	if htu.mutation.TaskContextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   handlertask.TaskContextTable,
			Columns: []string{handlertask.TaskContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcontext.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htu.mutation.TaskContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   handlertask.TaskContextTable,
			Columns: []string{handlertask.TaskContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcontext.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htu.mutation.ExecutionContextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   handlertask.ExecutionContextTable,
			Columns: []string{handlertask.ExecutionContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htu.mutation.ExecutionContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   handlertask.ExecutionContextTable,
			Columns: []string{handlertask.ExecutionContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, htu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{handlertask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	htu.mutation.done = true
	return n, nil
}

// HandlerTaskUpdateOne is the builder for updating a single HandlerTask entity.
type HandlerTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HandlerTaskMutation
}

// SetHandlerName sets the "handlerName" field.
func (htuo *HandlerTaskUpdateOne) SetHandlerName(s string) *HandlerTaskUpdateOne {
	htuo.mutation.SetHandlerName(s)
	return htuo
}

// SetNillableHandlerName sets the "handlerName" field if the given value is not nil.
func (htuo *HandlerTaskUpdateOne) SetNillableHandlerName(s *string) *HandlerTaskUpdateOne {
	if s != nil {
		htuo.SetHandlerName(*s)
	}
	return htuo
}

// SetStatus sets the "status" field.
func (htuo *HandlerTaskUpdateOne) SetStatus(h handlertask.Status) *HandlerTaskUpdateOne {
	htuo.mutation.SetStatus(h)
	return htuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (htuo *HandlerTaskUpdateOne) SetNillableStatus(h *handlertask.Status) *HandlerTaskUpdateOne {
	if h != nil {
		htuo.SetStatus(*h)
	}
	return htuo
}

// SetPayload sets the "payload" field.
func (htuo *HandlerTaskUpdateOne) SetPayload(b []byte) *HandlerTaskUpdateOne {
	htuo.mutation.SetPayload(b)
	return htuo
}

// ClearPayload clears the value of the "payload" field.
func (htuo *HandlerTaskUpdateOne) ClearPayload() *HandlerTaskUpdateOne {
	htuo.mutation.ClearPayload()
	return htuo
}

// SetResult sets the "result" field.
func (htuo *HandlerTaskUpdateOne) SetResult(b []byte) *HandlerTaskUpdateOne {
	htuo.mutation.SetResult(b)
	return htuo
}

// ClearResult clears the value of the "result" field.
func (htuo *HandlerTaskUpdateOne) ClearResult() *HandlerTaskUpdateOne {
	htuo.mutation.ClearResult()
	return htuo
}

// SetError sets the "error" field.
func (htuo *HandlerTaskUpdateOne) SetError(b []byte) *HandlerTaskUpdateOne {
	htuo.mutation.SetError(b)
	return htuo
}

// ClearError clears the value of the "error" field.
func (htuo *HandlerTaskUpdateOne) ClearError() *HandlerTaskUpdateOne {
	htuo.mutation.ClearError()
	return htuo
}

// SetNumIn sets the "numIn" field.
func (htuo *HandlerTaskUpdateOne) SetNumIn(i int) *HandlerTaskUpdateOne {
	htuo.mutation.ResetNumIn()
	htuo.mutation.SetNumIn(i)
	return htuo
}

// SetNillableNumIn sets the "numIn" field if the given value is not nil.
func (htuo *HandlerTaskUpdateOne) SetNillableNumIn(i *int) *HandlerTaskUpdateOne {
	if i != nil {
		htuo.SetNumIn(*i)
	}
	return htuo
}

// AddNumIn adds i to the "numIn" field.
func (htuo *HandlerTaskUpdateOne) AddNumIn(i int) *HandlerTaskUpdateOne {
	htuo.mutation.AddNumIn(i)
	return htuo
}

// SetNumOut sets the "numOut" field.
func (htuo *HandlerTaskUpdateOne) SetNumOut(i int) *HandlerTaskUpdateOne {
	htuo.mutation.ResetNumOut()
	htuo.mutation.SetNumOut(i)
	return htuo
}

// SetNillableNumOut sets the "numOut" field if the given value is not nil.
func (htuo *HandlerTaskUpdateOne) SetNillableNumOut(i *int) *HandlerTaskUpdateOne {
	if i != nil {
		htuo.SetNumOut(*i)
	}
	return htuo
}

// AddNumOut adds i to the "numOut" field.
func (htuo *HandlerTaskUpdateOne) AddNumOut(i int) *HandlerTaskUpdateOne {
	htuo.mutation.AddNumOut(i)
	return htuo
}

// SetTaskContextID sets the "task_context" edge to the TaskContext entity by ID.
func (htuo *HandlerTaskUpdateOne) SetTaskContextID(id string) *HandlerTaskUpdateOne {
	htuo.mutation.SetTaskContextID(id)
	return htuo
}

// SetNillableTaskContextID sets the "task_context" edge to the TaskContext entity by ID if the given value is not nil.
func (htuo *HandlerTaskUpdateOne) SetNillableTaskContextID(id *string) *HandlerTaskUpdateOne {
	if id != nil {
		htuo = htuo.SetTaskContextID(*id)
	}
	return htuo
}

// SetTaskContext sets the "task_context" edge to the TaskContext entity.
func (htuo *HandlerTaskUpdateOne) SetTaskContext(t *TaskContext) *HandlerTaskUpdateOne {
	return htuo.SetTaskContextID(t.ID)
}

// SetExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID.
func (htuo *HandlerTaskUpdateOne) SetExecutionContextID(id string) *HandlerTaskUpdateOne {
	htuo.mutation.SetExecutionContextID(id)
	return htuo
}

// SetNillableExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID if the given value is not nil.
func (htuo *HandlerTaskUpdateOne) SetNillableExecutionContextID(id *string) *HandlerTaskUpdateOne {
	if id != nil {
		htuo = htuo.SetExecutionContextID(*id)
	}
	return htuo
}

// SetExecutionContext sets the "execution_context" edge to the ExecutionContext entity.
func (htuo *HandlerTaskUpdateOne) SetExecutionContext(e *ExecutionContext) *HandlerTaskUpdateOne {
	return htuo.SetExecutionContextID(e.ID)
}

// Mutation returns the HandlerTaskMutation object of the builder.
func (htuo *HandlerTaskUpdateOne) Mutation() *HandlerTaskMutation {
	return htuo.mutation
}

// ClearTaskContext clears the "task_context" edge to the TaskContext entity.
func (htuo *HandlerTaskUpdateOne) ClearTaskContext() *HandlerTaskUpdateOne {
	htuo.mutation.ClearTaskContext()
	return htuo
}

// ClearExecutionContext clears the "execution_context" edge to the ExecutionContext entity.
func (htuo *HandlerTaskUpdateOne) ClearExecutionContext() *HandlerTaskUpdateOne {
	htuo.mutation.ClearExecutionContext()
	return htuo
}

// Where appends a list predicates to the HandlerTaskUpdate builder.
func (htuo *HandlerTaskUpdateOne) Where(ps ...predicate.HandlerTask) *HandlerTaskUpdateOne {
	htuo.mutation.Where(ps...)
	return htuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (htuo *HandlerTaskUpdateOne) Select(field string, fields ...string) *HandlerTaskUpdateOne {
	htuo.fields = append([]string{field}, fields...)
	return htuo
}

// Save executes the query and returns the updated HandlerTask entity.
func (htuo *HandlerTaskUpdateOne) Save(ctx context.Context) (*HandlerTask, error) {
	return withHooks(ctx, htuo.sqlSave, htuo.mutation, htuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (htuo *HandlerTaskUpdateOne) SaveX(ctx context.Context) *HandlerTask {
	node, err := htuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (htuo *HandlerTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := htuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htuo *HandlerTaskUpdateOne) ExecX(ctx context.Context) {
	if err := htuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htuo *HandlerTaskUpdateOne) check() error {
	if v, ok := htuo.mutation.Status(); ok {
		if err := handlertask.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "HandlerTask.status": %w`, err)}
		}
	}
	return nil
}

func (htuo *HandlerTaskUpdateOne) sqlSave(ctx context.Context) (_node *HandlerTask, err error) {
	if err := htuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(handlertask.Table, handlertask.Columns, sqlgraph.NewFieldSpec(handlertask.FieldID, field.TypeString))
	id, ok := htuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HandlerTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := htuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, handlertask.FieldID)
		for _, f := range fields {
			if !handlertask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != handlertask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := htuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := htuo.mutation.HandlerName(); ok {
		_spec.SetField(handlertask.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := htuo.mutation.Status(); ok {
		_spec.SetField(handlertask.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := htuo.mutation.Payload(); ok {
		_spec.SetField(handlertask.FieldPayload, field.TypeBytes, value)
	}
	if htuo.mutation.PayloadCleared() {
		_spec.ClearField(handlertask.FieldPayload, field.TypeBytes)
	}
	if value, ok := htuo.mutation.Result(); ok {
		_spec.SetField(handlertask.FieldResult, field.TypeBytes, value)
	}
	if htuo.mutation.ResultCleared() {
		_spec.ClearField(handlertask.FieldResult, field.TypeBytes)
	}
	if value, ok := htuo.mutation.Error(); ok {
		_spec.SetField(handlertask.FieldError, field.TypeBytes, value)
	}
	if htuo.mutation.ErrorCleared() {
		_spec.ClearField(handlertask.FieldError, field.TypeBytes)
	}
	if value, ok := htuo.mutation.NumIn(); ok {
		_spec.SetField(handlertask.FieldNumIn, field.TypeInt, value)
	}
	if value, ok := htuo.mutation.AddedNumIn(); ok {
		_spec.AddField(handlertask.FieldNumIn, field.TypeInt, value)
	}
	if value, ok := htuo.mutation.NumOut(); ok {
		_spec.SetField(handlertask.FieldNumOut, field.TypeInt, value)
	}
	if value, ok := htuo.mutation.AddedNumOut(); ok {
		_spec.AddField(handlertask.FieldNumOut, field.TypeInt, value)
	}
	if htuo.mutation.TaskContextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   handlertask.TaskContextTable,
			Columns: []string{handlertask.TaskContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcontext.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htuo.mutation.TaskContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   handlertask.TaskContextTable,
			Columns: []string{handlertask.TaskContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskcontext.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htuo.mutation.ExecutionContextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   handlertask.ExecutionContextTable,
			Columns: []string{handlertask.ExecutionContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htuo.mutation.ExecutionContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   handlertask.ExecutionContextTable,
			Columns: []string{handlertask.ExecutionContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HandlerTask{config: htuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, htuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{handlertask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	htuo.mutation.done = true
	return _node, nil
}
