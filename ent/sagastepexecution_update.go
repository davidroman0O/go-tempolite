// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/sagaexecution"
	"github.com/davidroman0O/go-tempolite/ent/sagastepexecution"
)

// SagaStepExecutionUpdate is the builder for updating SagaStepExecution entities.
type SagaStepExecutionUpdate struct {
	config
	hooks    []Hook
	mutation *SagaStepExecutionMutation
}

// Where appends a list predicates to the SagaStepExecutionUpdate builder.
func (sseu *SagaStepExecutionUpdate) Where(ps ...predicate.SagaStepExecution) *SagaStepExecutionUpdate {
	sseu.mutation.Where(ps...)
	return sseu
}

// SetHandlerName sets the "handler_name" field.
func (sseu *SagaStepExecutionUpdate) SetHandlerName(s string) *SagaStepExecutionUpdate {
	sseu.mutation.SetHandlerName(s)
	return sseu
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (sseu *SagaStepExecutionUpdate) SetNillableHandlerName(s *string) *SagaStepExecutionUpdate {
	if s != nil {
		sseu.SetHandlerName(*s)
	}
	return sseu
}

// SetStepType sets the "step_type" field.
func (sseu *SagaStepExecutionUpdate) SetStepType(st sagastepexecution.StepType) *SagaStepExecutionUpdate {
	sseu.mutation.SetStepType(st)
	return sseu
}

// SetNillableStepType sets the "step_type" field if the given value is not nil.
func (sseu *SagaStepExecutionUpdate) SetNillableStepType(st *sagastepexecution.StepType) *SagaStepExecutionUpdate {
	if st != nil {
		sseu.SetStepType(*st)
	}
	return sseu
}

// SetStatus sets the "status" field.
func (sseu *SagaStepExecutionUpdate) SetStatus(s sagastepexecution.Status) *SagaStepExecutionUpdate {
	sseu.mutation.SetStatus(s)
	return sseu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sseu *SagaStepExecutionUpdate) SetNillableStatus(s *sagastepexecution.Status) *SagaStepExecutionUpdate {
	if s != nil {
		sseu.SetStatus(*s)
	}
	return sseu
}

// SetSequence sets the "sequence" field.
func (sseu *SagaStepExecutionUpdate) SetSequence(i int) *SagaStepExecutionUpdate {
	sseu.mutation.ResetSequence()
	sseu.mutation.SetSequence(i)
	return sseu
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (sseu *SagaStepExecutionUpdate) SetNillableSequence(i *int) *SagaStepExecutionUpdate {
	if i != nil {
		sseu.SetSequence(*i)
	}
	return sseu
}

// AddSequence adds i to the "sequence" field.
func (sseu *SagaStepExecutionUpdate) AddSequence(i int) *SagaStepExecutionUpdate {
	sseu.mutation.AddSequence(i)
	return sseu
}

// SetAttempt sets the "attempt" field.
func (sseu *SagaStepExecutionUpdate) SetAttempt(i int) *SagaStepExecutionUpdate {
	sseu.mutation.ResetAttempt()
	sseu.mutation.SetAttempt(i)
	return sseu
}

// SetNillableAttempt sets the "attempt" field if the given value is not nil.
func (sseu *SagaStepExecutionUpdate) SetNillableAttempt(i *int) *SagaStepExecutionUpdate {
	if i != nil {
		sseu.SetAttempt(*i)
	}
	return sseu
}

// AddAttempt adds i to the "attempt" field.
func (sseu *SagaStepExecutionUpdate) AddAttempt(i int) *SagaStepExecutionUpdate {
	sseu.mutation.AddAttempt(i)
	return sseu
}

// SetInput sets the "input" field.
func (sseu *SagaStepExecutionUpdate) SetInput(i []interface{}) *SagaStepExecutionUpdate {
	sseu.mutation.SetInput(i)
	return sseu
}

// AppendInput appends i to the "input" field.
func (sseu *SagaStepExecutionUpdate) AppendInput(i []interface{}) *SagaStepExecutionUpdate {
	sseu.mutation.AppendInput(i)
	return sseu
}

// SetOutput sets the "output" field.
func (sseu *SagaStepExecutionUpdate) SetOutput(i []interface{}) *SagaStepExecutionUpdate {
	sseu.mutation.SetOutput(i)
	return sseu
}

// AppendOutput appends i to the "output" field.
func (sseu *SagaStepExecutionUpdate) AppendOutput(i []interface{}) *SagaStepExecutionUpdate {
	sseu.mutation.AppendOutput(i)
	return sseu
}

// ClearOutput clears the value of the "output" field.
func (sseu *SagaStepExecutionUpdate) ClearOutput() *SagaStepExecutionUpdate {
	sseu.mutation.ClearOutput()
	return sseu
}

// SetStartedAt sets the "started_at" field.
func (sseu *SagaStepExecutionUpdate) SetStartedAt(t time.Time) *SagaStepExecutionUpdate {
	sseu.mutation.SetStartedAt(t)
	return sseu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (sseu *SagaStepExecutionUpdate) SetNillableStartedAt(t *time.Time) *SagaStepExecutionUpdate {
	if t != nil {
		sseu.SetStartedAt(*t)
	}
	return sseu
}

// SetUpdatedAt sets the "updated_at" field.
func (sseu *SagaStepExecutionUpdate) SetUpdatedAt(t time.Time) *SagaStepExecutionUpdate {
	sseu.mutation.SetUpdatedAt(t)
	return sseu
}

// SetSagaExecutionID sets the "saga_execution" edge to the SagaExecution entity by ID.
func (sseu *SagaStepExecutionUpdate) SetSagaExecutionID(id string) *SagaStepExecutionUpdate {
	sseu.mutation.SetSagaExecutionID(id)
	return sseu
}

// SetSagaExecution sets the "saga_execution" edge to the SagaExecution entity.
func (sseu *SagaStepExecutionUpdate) SetSagaExecution(s *SagaExecution) *SagaStepExecutionUpdate {
	return sseu.SetSagaExecutionID(s.ID)
}

// Mutation returns the SagaStepExecutionMutation object of the builder.
func (sseu *SagaStepExecutionUpdate) Mutation() *SagaStepExecutionMutation {
	return sseu.mutation
}

// ClearSagaExecution clears the "saga_execution" edge to the SagaExecution entity.
func (sseu *SagaStepExecutionUpdate) ClearSagaExecution() *SagaStepExecutionUpdate {
	sseu.mutation.ClearSagaExecution()
	return sseu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sseu *SagaStepExecutionUpdate) Save(ctx context.Context) (int, error) {
	sseu.defaults()
	return withHooks(ctx, sseu.sqlSave, sseu.mutation, sseu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sseu *SagaStepExecutionUpdate) SaveX(ctx context.Context) int {
	affected, err := sseu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sseu *SagaStepExecutionUpdate) Exec(ctx context.Context) error {
	_, err := sseu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sseu *SagaStepExecutionUpdate) ExecX(ctx context.Context) {
	if err := sseu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sseu *SagaStepExecutionUpdate) defaults() {
	if _, ok := sseu.mutation.UpdatedAt(); !ok {
		v := sagastepexecution.UpdateDefaultUpdatedAt()
		sseu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sseu *SagaStepExecutionUpdate) check() error {
	if v, ok := sseu.mutation.HandlerName(); ok {
		if err := sagastepexecution.HandlerNameValidator(v); err != nil {
			return &ValidationError{Name: "handler_name", err: fmt.Errorf(`ent: validator failed for field "SagaStepExecution.handler_name": %w`, err)}
		}
	}
	if v, ok := sseu.mutation.StepType(); ok {
		if err := sagastepexecution.StepTypeValidator(v); err != nil {
			return &ValidationError{Name: "step_type", err: fmt.Errorf(`ent: validator failed for field "SagaStepExecution.step_type": %w`, err)}
		}
	}
	if v, ok := sseu.mutation.Status(); ok {
		if err := sagastepexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SagaStepExecution.status": %w`, err)}
		}
	}
	if v, ok := sseu.mutation.Sequence(); ok {
		if err := sagastepexecution.SequenceValidator(v); err != nil {
			return &ValidationError{Name: "sequence", err: fmt.Errorf(`ent: validator failed for field "SagaStepExecution.sequence": %w`, err)}
		}
	}
	if sseu.mutation.SagaExecutionCleared() && len(sseu.mutation.SagaExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SagaStepExecution.saga_execution"`)
	}
	return nil
}

func (sseu *SagaStepExecutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sseu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagastepexecution.Table, sagastepexecution.Columns, sqlgraph.NewFieldSpec(sagastepexecution.FieldID, field.TypeString))
	if ps := sseu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sseu.mutation.HandlerName(); ok {
		_spec.SetField(sagastepexecution.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := sseu.mutation.StepType(); ok {
		_spec.SetField(sagastepexecution.FieldStepType, field.TypeEnum, value)
	}
	if value, ok := sseu.mutation.Status(); ok {
		_spec.SetField(sagastepexecution.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := sseu.mutation.Sequence(); ok {
		_spec.SetField(sagastepexecution.FieldSequence, field.TypeInt, value)
	}
	if value, ok := sseu.mutation.AddedSequence(); ok {
		_spec.AddField(sagastepexecution.FieldSequence, field.TypeInt, value)
	}
	if value, ok := sseu.mutation.Attempt(); ok {
		_spec.SetField(sagastepexecution.FieldAttempt, field.TypeInt, value)
	}
	if value, ok := sseu.mutation.AddedAttempt(); ok {
		_spec.AddField(sagastepexecution.FieldAttempt, field.TypeInt, value)
	}
	if value, ok := sseu.mutation.Input(); ok {
		_spec.SetField(sagastepexecution.FieldInput, field.TypeJSON, value)
	}
	if value, ok := sseu.mutation.AppendedInput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sagastepexecution.FieldInput, value)
		})
	}
	if value, ok := sseu.mutation.Output(); ok {
		_spec.SetField(sagastepexecution.FieldOutput, field.TypeJSON, value)
	}
	if value, ok := sseu.mutation.AppendedOutput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sagastepexecution.FieldOutput, value)
		})
	}
	if sseu.mutation.OutputCleared() {
		_spec.ClearField(sagastepexecution.FieldOutput, field.TypeJSON)
	}
	if value, ok := sseu.mutation.StartedAt(); ok {
		_spec.SetField(sagastepexecution.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := sseu.mutation.UpdatedAt(); ok {
		_spec.SetField(sagastepexecution.FieldUpdatedAt, field.TypeTime, value)
	}
	if sseu.mutation.SagaExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagastepexecution.SagaExecutionTable,
			Columns: []string{sagastepexecution.SagaExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sseu.mutation.SagaExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagastepexecution.SagaExecutionTable,
			Columns: []string{sagastepexecution.SagaExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sseu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagastepexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sseu.mutation.done = true
	return n, nil
}

// SagaStepExecutionUpdateOne is the builder for updating a single SagaStepExecution entity.
type SagaStepExecutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SagaStepExecutionMutation
}

// SetHandlerName sets the "handler_name" field.
func (sseuo *SagaStepExecutionUpdateOne) SetHandlerName(s string) *SagaStepExecutionUpdateOne {
	sseuo.mutation.SetHandlerName(s)
	return sseuo
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (sseuo *SagaStepExecutionUpdateOne) SetNillableHandlerName(s *string) *SagaStepExecutionUpdateOne {
	if s != nil {
		sseuo.SetHandlerName(*s)
	}
	return sseuo
}

// SetStepType sets the "step_type" field.
func (sseuo *SagaStepExecutionUpdateOne) SetStepType(st sagastepexecution.StepType) *SagaStepExecutionUpdateOne {
	sseuo.mutation.SetStepType(st)
	return sseuo
}

// SetNillableStepType sets the "step_type" field if the given value is not nil.
func (sseuo *SagaStepExecutionUpdateOne) SetNillableStepType(st *sagastepexecution.StepType) *SagaStepExecutionUpdateOne {
	if st != nil {
		sseuo.SetStepType(*st)
	}
	return sseuo
}

// SetStatus sets the "status" field.
func (sseuo *SagaStepExecutionUpdateOne) SetStatus(s sagastepexecution.Status) *SagaStepExecutionUpdateOne {
	sseuo.mutation.SetStatus(s)
	return sseuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sseuo *SagaStepExecutionUpdateOne) SetNillableStatus(s *sagastepexecution.Status) *SagaStepExecutionUpdateOne {
	if s != nil {
		sseuo.SetStatus(*s)
	}
	return sseuo
}

// SetSequence sets the "sequence" field.
func (sseuo *SagaStepExecutionUpdateOne) SetSequence(i int) *SagaStepExecutionUpdateOne {
	sseuo.mutation.ResetSequence()
	sseuo.mutation.SetSequence(i)
	return sseuo
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (sseuo *SagaStepExecutionUpdateOne) SetNillableSequence(i *int) *SagaStepExecutionUpdateOne {
	if i != nil {
		sseuo.SetSequence(*i)
	}
	return sseuo
}

// AddSequence adds i to the "sequence" field.
func (sseuo *SagaStepExecutionUpdateOne) AddSequence(i int) *SagaStepExecutionUpdateOne {
	sseuo.mutation.AddSequence(i)
	return sseuo
}

// SetAttempt sets the "attempt" field.
func (sseuo *SagaStepExecutionUpdateOne) SetAttempt(i int) *SagaStepExecutionUpdateOne {
	sseuo.mutation.ResetAttempt()
	sseuo.mutation.SetAttempt(i)
	return sseuo
}

// SetNillableAttempt sets the "attempt" field if the given value is not nil.
func (sseuo *SagaStepExecutionUpdateOne) SetNillableAttempt(i *int) *SagaStepExecutionUpdateOne {
	if i != nil {
		sseuo.SetAttempt(*i)
	}
	return sseuo
}

// AddAttempt adds i to the "attempt" field.
func (sseuo *SagaStepExecutionUpdateOne) AddAttempt(i int) *SagaStepExecutionUpdateOne {
	sseuo.mutation.AddAttempt(i)
	return sseuo
}

// SetInput sets the "input" field.
func (sseuo *SagaStepExecutionUpdateOne) SetInput(i []interface{}) *SagaStepExecutionUpdateOne {
	sseuo.mutation.SetInput(i)
	return sseuo
}

// AppendInput appends i to the "input" field.
func (sseuo *SagaStepExecutionUpdateOne) AppendInput(i []interface{}) *SagaStepExecutionUpdateOne {
	sseuo.mutation.AppendInput(i)
	return sseuo
}

// SetOutput sets the "output" field.
func (sseuo *SagaStepExecutionUpdateOne) SetOutput(i []interface{}) *SagaStepExecutionUpdateOne {
	sseuo.mutation.SetOutput(i)
	return sseuo
}

// AppendOutput appends i to the "output" field.
func (sseuo *SagaStepExecutionUpdateOne) AppendOutput(i []interface{}) *SagaStepExecutionUpdateOne {
	sseuo.mutation.AppendOutput(i)
	return sseuo
}

// ClearOutput clears the value of the "output" field.
func (sseuo *SagaStepExecutionUpdateOne) ClearOutput() *SagaStepExecutionUpdateOne {
	sseuo.mutation.ClearOutput()
	return sseuo
}

// SetStartedAt sets the "started_at" field.
func (sseuo *SagaStepExecutionUpdateOne) SetStartedAt(t time.Time) *SagaStepExecutionUpdateOne {
	sseuo.mutation.SetStartedAt(t)
	return sseuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (sseuo *SagaStepExecutionUpdateOne) SetNillableStartedAt(t *time.Time) *SagaStepExecutionUpdateOne {
	if t != nil {
		sseuo.SetStartedAt(*t)
	}
	return sseuo
}

// SetUpdatedAt sets the "updated_at" field.
func (sseuo *SagaStepExecutionUpdateOne) SetUpdatedAt(t time.Time) *SagaStepExecutionUpdateOne {
	sseuo.mutation.SetUpdatedAt(t)
	return sseuo
}

// SetSagaExecutionID sets the "saga_execution" edge to the SagaExecution entity by ID.
func (sseuo *SagaStepExecutionUpdateOne) SetSagaExecutionID(id string) *SagaStepExecutionUpdateOne {
	sseuo.mutation.SetSagaExecutionID(id)
	return sseuo
}

// SetSagaExecution sets the "saga_execution" edge to the SagaExecution entity.
func (sseuo *SagaStepExecutionUpdateOne) SetSagaExecution(s *SagaExecution) *SagaStepExecutionUpdateOne {
	return sseuo.SetSagaExecutionID(s.ID)
}

// Mutation returns the SagaStepExecutionMutation object of the builder.
func (sseuo *SagaStepExecutionUpdateOne) Mutation() *SagaStepExecutionMutation {
	return sseuo.mutation
}

// ClearSagaExecution clears the "saga_execution" edge to the SagaExecution entity.
func (sseuo *SagaStepExecutionUpdateOne) ClearSagaExecution() *SagaStepExecutionUpdateOne {
	sseuo.mutation.ClearSagaExecution()
	return sseuo
}

// Where appends a list predicates to the SagaStepExecutionUpdate builder.
func (sseuo *SagaStepExecutionUpdateOne) Where(ps ...predicate.SagaStepExecution) *SagaStepExecutionUpdateOne {
	sseuo.mutation.Where(ps...)
	return sseuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sseuo *SagaStepExecutionUpdateOne) Select(field string, fields ...string) *SagaStepExecutionUpdateOne {
	sseuo.fields = append([]string{field}, fields...)
	return sseuo
}

// Save executes the query and returns the updated SagaStepExecution entity.
func (sseuo *SagaStepExecutionUpdateOne) Save(ctx context.Context) (*SagaStepExecution, error) {
	sseuo.defaults()
	return withHooks(ctx, sseuo.sqlSave, sseuo.mutation, sseuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sseuo *SagaStepExecutionUpdateOne) SaveX(ctx context.Context) *SagaStepExecution {
	node, err := sseuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sseuo *SagaStepExecutionUpdateOne) Exec(ctx context.Context) error {
	_, err := sseuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sseuo *SagaStepExecutionUpdateOne) ExecX(ctx context.Context) {
	if err := sseuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sseuo *SagaStepExecutionUpdateOne) defaults() {
	if _, ok := sseuo.mutation.UpdatedAt(); !ok {
		v := sagastepexecution.UpdateDefaultUpdatedAt()
		sseuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sseuo *SagaStepExecutionUpdateOne) check() error {
	if v, ok := sseuo.mutation.HandlerName(); ok {
		if err := sagastepexecution.HandlerNameValidator(v); err != nil {
			return &ValidationError{Name: "handler_name", err: fmt.Errorf(`ent: validator failed for field "SagaStepExecution.handler_name": %w`, err)}
		}
	}
	if v, ok := sseuo.mutation.StepType(); ok {
		if err := sagastepexecution.StepTypeValidator(v); err != nil {
			return &ValidationError{Name: "step_type", err: fmt.Errorf(`ent: validator failed for field "SagaStepExecution.step_type": %w`, err)}
		}
	}
	if v, ok := sseuo.mutation.Status(); ok {
		if err := sagastepexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SagaStepExecution.status": %w`, err)}
		}
	}
	if v, ok := sseuo.mutation.Sequence(); ok {
		if err := sagastepexecution.SequenceValidator(v); err != nil {
			return &ValidationError{Name: "sequence", err: fmt.Errorf(`ent: validator failed for field "SagaStepExecution.sequence": %w`, err)}
		}
	}
	if sseuo.mutation.SagaExecutionCleared() && len(sseuo.mutation.SagaExecutionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SagaStepExecution.saga_execution"`)
	}
	return nil
}

func (sseuo *SagaStepExecutionUpdateOne) sqlSave(ctx context.Context) (_node *SagaStepExecution, err error) {
	if err := sseuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagastepexecution.Table, sagastepexecution.Columns, sqlgraph.NewFieldSpec(sagastepexecution.FieldID, field.TypeString))
	id, ok := sseuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SagaStepExecution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sseuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sagastepexecution.FieldID)
		for _, f := range fields {
			if !sagastepexecution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sagastepexecution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sseuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sseuo.mutation.HandlerName(); ok {
		_spec.SetField(sagastepexecution.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := sseuo.mutation.StepType(); ok {
		_spec.SetField(sagastepexecution.FieldStepType, field.TypeEnum, value)
	}
	if value, ok := sseuo.mutation.Status(); ok {
		_spec.SetField(sagastepexecution.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := sseuo.mutation.Sequence(); ok {
		_spec.SetField(sagastepexecution.FieldSequence, field.TypeInt, value)
	}
	if value, ok := sseuo.mutation.AddedSequence(); ok {
		_spec.AddField(sagastepexecution.FieldSequence, field.TypeInt, value)
	}
	if value, ok := sseuo.mutation.Attempt(); ok {
		_spec.SetField(sagastepexecution.FieldAttempt, field.TypeInt, value)
	}
	if value, ok := sseuo.mutation.AddedAttempt(); ok {
		_spec.AddField(sagastepexecution.FieldAttempt, field.TypeInt, value)
	}
	if value, ok := sseuo.mutation.Input(); ok {
		_spec.SetField(sagastepexecution.FieldInput, field.TypeJSON, value)
	}
	if value, ok := sseuo.mutation.AppendedInput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sagastepexecution.FieldInput, value)
		})
	}
	if value, ok := sseuo.mutation.Output(); ok {
		_spec.SetField(sagastepexecution.FieldOutput, field.TypeJSON, value)
	}
	if value, ok := sseuo.mutation.AppendedOutput(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sagastepexecution.FieldOutput, value)
		})
	}
	if sseuo.mutation.OutputCleared() {
		_spec.ClearField(sagastepexecution.FieldOutput, field.TypeJSON)
	}
	if value, ok := sseuo.mutation.StartedAt(); ok {
		_spec.SetField(sagastepexecution.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := sseuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sagastepexecution.FieldUpdatedAt, field.TypeTime, value)
	}
	if sseuo.mutation.SagaExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagastepexecution.SagaExecutionTable,
			Columns: []string{sagastepexecution.SagaExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sseuo.mutation.SagaExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagastepexecution.SagaExecutionTable,
			Columns: []string{sagastepexecution.SagaExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SagaStepExecution{config: sseuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sseuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagastepexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sseuo.mutation.done = true
	return _node, nil
}
