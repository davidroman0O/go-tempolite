// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/sagastepexecution"
)

// SagaStepExecutionUpdate is the builder for updating SagaStepExecution entities.
type SagaStepExecutionUpdate struct {
	config
	hooks    []Hook
	mutation *SagaStepExecutionMutation
}

// Where appends a list predicates to the SagaStepExecutionUpdate builder.
func (sseu *SagaStepExecutionUpdate) Where(ps ...predicate.SagaStepExecution) *SagaStepExecutionUpdate {
	sseu.mutation.Where(ps...)
	return sseu
}

// SetSagaExecutionID sets the "saga_execution_id" field.
func (sseu *SagaStepExecutionUpdate) SetSagaExecutionID(s string) *SagaStepExecutionUpdate {
	sseu.mutation.SetSagaExecutionID(s)
	return sseu
}

// SetNillableSagaExecutionID sets the "saga_execution_id" field if the given value is not nil.
func (sseu *SagaStepExecutionUpdate) SetNillableSagaExecutionID(s *string) *SagaStepExecutionUpdate {
	if s != nil {
		sseu.SetSagaExecutionID(*s)
	}
	return sseu
}

// SetStepNumber sets the "step_number" field.
func (sseu *SagaStepExecutionUpdate) SetStepNumber(i int) *SagaStepExecutionUpdate {
	sseu.mutation.ResetStepNumber()
	sseu.mutation.SetStepNumber(i)
	return sseu
}

// SetNillableStepNumber sets the "step_number" field if the given value is not nil.
func (sseu *SagaStepExecutionUpdate) SetNillableStepNumber(i *int) *SagaStepExecutionUpdate {
	if i != nil {
		sseu.SetStepNumber(*i)
	}
	return sseu
}

// AddStepNumber adds i to the "step_number" field.
func (sseu *SagaStepExecutionUpdate) AddStepNumber(i int) *SagaStepExecutionUpdate {
	sseu.mutation.AddStepNumber(i)
	return sseu
}

// SetStatus sets the "status" field.
func (sseu *SagaStepExecutionUpdate) SetStatus(s sagastepexecution.Status) *SagaStepExecutionUpdate {
	sseu.mutation.SetStatus(s)
	return sseu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sseu *SagaStepExecutionUpdate) SetNillableStatus(s *sagastepexecution.Status) *SagaStepExecutionUpdate {
	if s != nil {
		sseu.SetStatus(*s)
	}
	return sseu
}

// SetStartTime sets the "start_time" field.
func (sseu *SagaStepExecutionUpdate) SetStartTime(t time.Time) *SagaStepExecutionUpdate {
	sseu.mutation.SetStartTime(t)
	return sseu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (sseu *SagaStepExecutionUpdate) SetNillableStartTime(t *time.Time) *SagaStepExecutionUpdate {
	if t != nil {
		sseu.SetStartTime(*t)
	}
	return sseu
}

// ClearStartTime clears the value of the "start_time" field.
func (sseu *SagaStepExecutionUpdate) ClearStartTime() *SagaStepExecutionUpdate {
	sseu.mutation.ClearStartTime()
	return sseu
}

// SetEndTime sets the "end_time" field.
func (sseu *SagaStepExecutionUpdate) SetEndTime(t time.Time) *SagaStepExecutionUpdate {
	sseu.mutation.SetEndTime(t)
	return sseu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (sseu *SagaStepExecutionUpdate) SetNillableEndTime(t *time.Time) *SagaStepExecutionUpdate {
	if t != nil {
		sseu.SetEndTime(*t)
	}
	return sseu
}

// ClearEndTime clears the value of the "end_time" field.
func (sseu *SagaStepExecutionUpdate) ClearEndTime() *SagaStepExecutionUpdate {
	sseu.mutation.ClearEndTime()
	return sseu
}

// Mutation returns the SagaStepExecutionMutation object of the builder.
func (sseu *SagaStepExecutionUpdate) Mutation() *SagaStepExecutionMutation {
	return sseu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sseu *SagaStepExecutionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sseu.sqlSave, sseu.mutation, sseu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sseu *SagaStepExecutionUpdate) SaveX(ctx context.Context) int {
	affected, err := sseu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sseu *SagaStepExecutionUpdate) Exec(ctx context.Context) error {
	_, err := sseu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sseu *SagaStepExecutionUpdate) ExecX(ctx context.Context) {
	if err := sseu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sseu *SagaStepExecutionUpdate) check() error {
	if v, ok := sseu.mutation.Status(); ok {
		if err := sagastepexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SagaStepExecution.status": %w`, err)}
		}
	}
	return nil
}

func (sseu *SagaStepExecutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sseu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagastepexecution.Table, sagastepexecution.Columns, sqlgraph.NewFieldSpec(sagastepexecution.FieldID, field.TypeString))
	if ps := sseu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sseu.mutation.SagaExecutionID(); ok {
		_spec.SetField(sagastepexecution.FieldSagaExecutionID, field.TypeString, value)
	}
	if value, ok := sseu.mutation.StepNumber(); ok {
		_spec.SetField(sagastepexecution.FieldStepNumber, field.TypeInt, value)
	}
	if value, ok := sseu.mutation.AddedStepNumber(); ok {
		_spec.AddField(sagastepexecution.FieldStepNumber, field.TypeInt, value)
	}
	if value, ok := sseu.mutation.Status(); ok {
		_spec.SetField(sagastepexecution.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := sseu.mutation.StartTime(); ok {
		_spec.SetField(sagastepexecution.FieldStartTime, field.TypeTime, value)
	}
	if sseu.mutation.StartTimeCleared() {
		_spec.ClearField(sagastepexecution.FieldStartTime, field.TypeTime)
	}
	if value, ok := sseu.mutation.EndTime(); ok {
		_spec.SetField(sagastepexecution.FieldEndTime, field.TypeTime, value)
	}
	if sseu.mutation.EndTimeCleared() {
		_spec.ClearField(sagastepexecution.FieldEndTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sseu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagastepexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sseu.mutation.done = true
	return n, nil
}

// SagaStepExecutionUpdateOne is the builder for updating a single SagaStepExecution entity.
type SagaStepExecutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SagaStepExecutionMutation
}

// SetSagaExecutionID sets the "saga_execution_id" field.
func (sseuo *SagaStepExecutionUpdateOne) SetSagaExecutionID(s string) *SagaStepExecutionUpdateOne {
	sseuo.mutation.SetSagaExecutionID(s)
	return sseuo
}

// SetNillableSagaExecutionID sets the "saga_execution_id" field if the given value is not nil.
func (sseuo *SagaStepExecutionUpdateOne) SetNillableSagaExecutionID(s *string) *SagaStepExecutionUpdateOne {
	if s != nil {
		sseuo.SetSagaExecutionID(*s)
	}
	return sseuo
}

// SetStepNumber sets the "step_number" field.
func (sseuo *SagaStepExecutionUpdateOne) SetStepNumber(i int) *SagaStepExecutionUpdateOne {
	sseuo.mutation.ResetStepNumber()
	sseuo.mutation.SetStepNumber(i)
	return sseuo
}

// SetNillableStepNumber sets the "step_number" field if the given value is not nil.
func (sseuo *SagaStepExecutionUpdateOne) SetNillableStepNumber(i *int) *SagaStepExecutionUpdateOne {
	if i != nil {
		sseuo.SetStepNumber(*i)
	}
	return sseuo
}

// AddStepNumber adds i to the "step_number" field.
func (sseuo *SagaStepExecutionUpdateOne) AddStepNumber(i int) *SagaStepExecutionUpdateOne {
	sseuo.mutation.AddStepNumber(i)
	return sseuo
}

// SetStatus sets the "status" field.
func (sseuo *SagaStepExecutionUpdateOne) SetStatus(s sagastepexecution.Status) *SagaStepExecutionUpdateOne {
	sseuo.mutation.SetStatus(s)
	return sseuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sseuo *SagaStepExecutionUpdateOne) SetNillableStatus(s *sagastepexecution.Status) *SagaStepExecutionUpdateOne {
	if s != nil {
		sseuo.SetStatus(*s)
	}
	return sseuo
}

// SetStartTime sets the "start_time" field.
func (sseuo *SagaStepExecutionUpdateOne) SetStartTime(t time.Time) *SagaStepExecutionUpdateOne {
	sseuo.mutation.SetStartTime(t)
	return sseuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (sseuo *SagaStepExecutionUpdateOne) SetNillableStartTime(t *time.Time) *SagaStepExecutionUpdateOne {
	if t != nil {
		sseuo.SetStartTime(*t)
	}
	return sseuo
}

// ClearStartTime clears the value of the "start_time" field.
func (sseuo *SagaStepExecutionUpdateOne) ClearStartTime() *SagaStepExecutionUpdateOne {
	sseuo.mutation.ClearStartTime()
	return sseuo
}

// SetEndTime sets the "end_time" field.
func (sseuo *SagaStepExecutionUpdateOne) SetEndTime(t time.Time) *SagaStepExecutionUpdateOne {
	sseuo.mutation.SetEndTime(t)
	return sseuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (sseuo *SagaStepExecutionUpdateOne) SetNillableEndTime(t *time.Time) *SagaStepExecutionUpdateOne {
	if t != nil {
		sseuo.SetEndTime(*t)
	}
	return sseuo
}

// ClearEndTime clears the value of the "end_time" field.
func (sseuo *SagaStepExecutionUpdateOne) ClearEndTime() *SagaStepExecutionUpdateOne {
	sseuo.mutation.ClearEndTime()
	return sseuo
}

// Mutation returns the SagaStepExecutionMutation object of the builder.
func (sseuo *SagaStepExecutionUpdateOne) Mutation() *SagaStepExecutionMutation {
	return sseuo.mutation
}

// Where appends a list predicates to the SagaStepExecutionUpdate builder.
func (sseuo *SagaStepExecutionUpdateOne) Where(ps ...predicate.SagaStepExecution) *SagaStepExecutionUpdateOne {
	sseuo.mutation.Where(ps...)
	return sseuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sseuo *SagaStepExecutionUpdateOne) Select(field string, fields ...string) *SagaStepExecutionUpdateOne {
	sseuo.fields = append([]string{field}, fields...)
	return sseuo
}

// Save executes the query and returns the updated SagaStepExecution entity.
func (sseuo *SagaStepExecutionUpdateOne) Save(ctx context.Context) (*SagaStepExecution, error) {
	return withHooks(ctx, sseuo.sqlSave, sseuo.mutation, sseuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sseuo *SagaStepExecutionUpdateOne) SaveX(ctx context.Context) *SagaStepExecution {
	node, err := sseuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sseuo *SagaStepExecutionUpdateOne) Exec(ctx context.Context) error {
	_, err := sseuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sseuo *SagaStepExecutionUpdateOne) ExecX(ctx context.Context) {
	if err := sseuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sseuo *SagaStepExecutionUpdateOne) check() error {
	if v, ok := sseuo.mutation.Status(); ok {
		if err := sagastepexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SagaStepExecution.status": %w`, err)}
		}
	}
	return nil
}

func (sseuo *SagaStepExecutionUpdateOne) sqlSave(ctx context.Context) (_node *SagaStepExecution, err error) {
	if err := sseuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagastepexecution.Table, sagastepexecution.Columns, sqlgraph.NewFieldSpec(sagastepexecution.FieldID, field.TypeString))
	id, ok := sseuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SagaStepExecution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sseuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sagastepexecution.FieldID)
		for _, f := range fields {
			if !sagastepexecution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sagastepexecution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sseuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sseuo.mutation.SagaExecutionID(); ok {
		_spec.SetField(sagastepexecution.FieldSagaExecutionID, field.TypeString, value)
	}
	if value, ok := sseuo.mutation.StepNumber(); ok {
		_spec.SetField(sagastepexecution.FieldStepNumber, field.TypeInt, value)
	}
	if value, ok := sseuo.mutation.AddedStepNumber(); ok {
		_spec.AddField(sagastepexecution.FieldStepNumber, field.TypeInt, value)
	}
	if value, ok := sseuo.mutation.Status(); ok {
		_spec.SetField(sagastepexecution.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := sseuo.mutation.StartTime(); ok {
		_spec.SetField(sagastepexecution.FieldStartTime, field.TypeTime, value)
	}
	if sseuo.mutation.StartTimeCleared() {
		_spec.ClearField(sagastepexecution.FieldStartTime, field.TypeTime)
	}
	if value, ok := sseuo.mutation.EndTime(); ok {
		_spec.SetField(sagastepexecution.FieldEndTime, field.TypeTime, value)
	}
	if sseuo.mutation.EndTimeCleared() {
		_spec.ClearField(sagastepexecution.FieldEndTime, field.TypeTime)
	}
	_node = &SagaStepExecution{config: sseuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sseuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagastepexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sseuo.mutation.done = true
	return _node, nil
}
