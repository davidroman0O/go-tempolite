// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/taskcontext"
)

// TaskContext is the model entity for the TaskContext schema.
type TaskContext struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// RetryCount holds the value of the "RetryCount" field.
	RetryCount int `json:"RetryCount,omitempty"`
	// MaxRetry holds the value of the "MaxRetry" field.
	MaxRetry     int `json:"MaxRetry,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskContext) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taskcontext.FieldRetryCount, taskcontext.FieldMaxRetry:
			values[i] = new(sql.NullInt64)
		case taskcontext.FieldID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskContext fields.
func (tc *TaskContext) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taskcontext.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tc.ID = value.String
			}
		case taskcontext.FieldRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RetryCount", values[i])
			} else if value.Valid {
				tc.RetryCount = int(value.Int64)
			}
		case taskcontext.FieldMaxRetry:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field MaxRetry", values[i])
			} else if value.Valid {
				tc.MaxRetry = int(value.Int64)
			}
		default:
			tc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaskContext.
// This includes values selected through modifiers, order, etc.
func (tc *TaskContext) Value(name string) (ent.Value, error) {
	return tc.selectValues.Get(name)
}

// Update returns a builder for updating this TaskContext.
// Note that you need to call TaskContext.Unwrap() before calling this method if this TaskContext
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TaskContext) Update() *TaskContextUpdateOne {
	return NewTaskContextClient(tc.config).UpdateOne(tc)
}

// Unwrap unwraps the TaskContext entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TaskContext) Unwrap() *TaskContext {
	_tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskContext is not a transactional entity")
	}
	tc.config.driver = _tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TaskContext) String() string {
	var builder strings.Builder
	builder.WriteString("TaskContext(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tc.ID))
	builder.WriteString("RetryCount=")
	builder.WriteString(fmt.Sprintf("%v", tc.RetryCount))
	builder.WriteString(", ")
	builder.WriteString("MaxRetry=")
	builder.WriteString(fmt.Sprintf("%v", tc.MaxRetry))
	builder.WriteByte(')')
	return builder.String()
}

// TaskContexts is a parsable slice of TaskContext.
type TaskContexts []*TaskContext
