// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/executionunit"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/sagacompensation"
	"github.com/davidroman0O/go-tempolite/ent/sagatransaction"
	"github.com/davidroman0O/go-tempolite/ent/task"
)

// SagaTransactionUpdate is the builder for updating SagaTransaction entities.
type SagaTransactionUpdate struct {
	config
	hooks    []Hook
	mutation *SagaTransactionMutation
}

// Where appends a list predicates to the SagaTransactionUpdate builder.
func (stu *SagaTransactionUpdate) Where(ps ...predicate.SagaTransaction) *SagaTransactionUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetOrder sets the "order" field.
func (stu *SagaTransactionUpdate) SetOrder(i int) *SagaTransactionUpdate {
	stu.mutation.ResetOrder()
	stu.mutation.SetOrder(i)
	return stu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (stu *SagaTransactionUpdate) SetNillableOrder(i *int) *SagaTransactionUpdate {
	if i != nil {
		stu.SetOrder(*i)
	}
	return stu
}

// AddOrder adds i to the "order" field.
func (stu *SagaTransactionUpdate) AddOrder(i int) *SagaTransactionUpdate {
	stu.mutation.AddOrder(i)
	return stu
}

// SetNextTransactionName sets the "next_transaction_name" field.
func (stu *SagaTransactionUpdate) SetNextTransactionName(s string) *SagaTransactionUpdate {
	stu.mutation.SetNextTransactionName(s)
	return stu
}

// SetNillableNextTransactionName sets the "next_transaction_name" field if the given value is not nil.
func (stu *SagaTransactionUpdate) SetNillableNextTransactionName(s *string) *SagaTransactionUpdate {
	if s != nil {
		stu.SetNextTransactionName(*s)
	}
	return stu
}

// SetFailureCompensationName sets the "failure_compensation_name" field.
func (stu *SagaTransactionUpdate) SetFailureCompensationName(s string) *SagaTransactionUpdate {
	stu.mutation.SetFailureCompensationName(s)
	return stu
}

// SetNillableFailureCompensationName sets the "failure_compensation_name" field if the given value is not nil.
func (stu *SagaTransactionUpdate) SetNillableFailureCompensationName(s *string) *SagaTransactionUpdate {
	if s != nil {
		stu.SetFailureCompensationName(*s)
	}
	return stu
}

// SetExecutionUnitID sets the "execution_unit" edge to the ExecutionUnit entity by ID.
func (stu *SagaTransactionUpdate) SetExecutionUnitID(id string) *SagaTransactionUpdate {
	stu.mutation.SetExecutionUnitID(id)
	return stu
}

// SetNillableExecutionUnitID sets the "execution_unit" edge to the ExecutionUnit entity by ID if the given value is not nil.
func (stu *SagaTransactionUpdate) SetNillableExecutionUnitID(id *string) *SagaTransactionUpdate {
	if id != nil {
		stu = stu.SetExecutionUnitID(*id)
	}
	return stu
}

// SetExecutionUnit sets the "execution_unit" edge to the ExecutionUnit entity.
func (stu *SagaTransactionUpdate) SetExecutionUnit(e *ExecutionUnit) *SagaTransactionUpdate {
	return stu.SetExecutionUnitID(e.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (stu *SagaTransactionUpdate) SetTaskID(id string) *SagaTransactionUpdate {
	stu.mutation.SetTaskID(id)
	return stu
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (stu *SagaTransactionUpdate) SetNillableTaskID(id *string) *SagaTransactionUpdate {
	if id != nil {
		stu = stu.SetTaskID(*id)
	}
	return stu
}

// SetTask sets the "task" edge to the Task entity.
func (stu *SagaTransactionUpdate) SetTask(t *Task) *SagaTransactionUpdate {
	return stu.SetTaskID(t.ID)
}

// SetCompensationID sets the "compensation" edge to the SagaCompensation entity by ID.
func (stu *SagaTransactionUpdate) SetCompensationID(id string) *SagaTransactionUpdate {
	stu.mutation.SetCompensationID(id)
	return stu
}

// SetNillableCompensationID sets the "compensation" edge to the SagaCompensation entity by ID if the given value is not nil.
func (stu *SagaTransactionUpdate) SetNillableCompensationID(id *string) *SagaTransactionUpdate {
	if id != nil {
		stu = stu.SetCompensationID(*id)
	}
	return stu
}

// SetCompensation sets the "compensation" edge to the SagaCompensation entity.
func (stu *SagaTransactionUpdate) SetCompensation(s *SagaCompensation) *SagaTransactionUpdate {
	return stu.SetCompensationID(s.ID)
}

// Mutation returns the SagaTransactionMutation object of the builder.
func (stu *SagaTransactionUpdate) Mutation() *SagaTransactionMutation {
	return stu.mutation
}

// ClearExecutionUnit clears the "execution_unit" edge to the ExecutionUnit entity.
func (stu *SagaTransactionUpdate) ClearExecutionUnit() *SagaTransactionUpdate {
	stu.mutation.ClearExecutionUnit()
	return stu
}

// ClearTask clears the "task" edge to the Task entity.
func (stu *SagaTransactionUpdate) ClearTask() *SagaTransactionUpdate {
	stu.mutation.ClearTask()
	return stu
}

// ClearCompensation clears the "compensation" edge to the SagaCompensation entity.
func (stu *SagaTransactionUpdate) ClearCompensation() *SagaTransactionUpdate {
	stu.mutation.ClearCompensation()
	return stu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SagaTransactionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SagaTransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SagaTransactionUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SagaTransactionUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stu *SagaTransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sagatransaction.Table, sagatransaction.Columns, sqlgraph.NewFieldSpec(sagatransaction.FieldID, field.TypeString))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.Order(); ok {
		_spec.SetField(sagatransaction.FieldOrder, field.TypeInt, value)
	}
	if value, ok := stu.mutation.AddedOrder(); ok {
		_spec.AddField(sagatransaction.FieldOrder, field.TypeInt, value)
	}
	if value, ok := stu.mutation.NextTransactionName(); ok {
		_spec.SetField(sagatransaction.FieldNextTransactionName, field.TypeString, value)
	}
	if value, ok := stu.mutation.FailureCompensationName(); ok {
		_spec.SetField(sagatransaction.FieldFailureCompensationName, field.TypeString, value)
	}
	if stu.mutation.ExecutionUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagatransaction.ExecutionUnitTable,
			Columns: []string{sagatransaction.ExecutionUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ExecutionUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagatransaction.ExecutionUnitTable,
			Columns: []string{sagatransaction.ExecutionUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sagatransaction.TaskTable,
			Columns: []string{sagatransaction.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sagatransaction.TaskTable,
			Columns: []string{sagatransaction.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stu.mutation.CompensationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sagatransaction.CompensationTable,
			Columns: []string{sagatransaction.CompensationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagacompensation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.CompensationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sagatransaction.CompensationTable,
			Columns: []string{sagatransaction.CompensationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagacompensation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagatransaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// SagaTransactionUpdateOne is the builder for updating a single SagaTransaction entity.
type SagaTransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SagaTransactionMutation
}

// SetOrder sets the "order" field.
func (stuo *SagaTransactionUpdateOne) SetOrder(i int) *SagaTransactionUpdateOne {
	stuo.mutation.ResetOrder()
	stuo.mutation.SetOrder(i)
	return stuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (stuo *SagaTransactionUpdateOne) SetNillableOrder(i *int) *SagaTransactionUpdateOne {
	if i != nil {
		stuo.SetOrder(*i)
	}
	return stuo
}

// AddOrder adds i to the "order" field.
func (stuo *SagaTransactionUpdateOne) AddOrder(i int) *SagaTransactionUpdateOne {
	stuo.mutation.AddOrder(i)
	return stuo
}

// SetNextTransactionName sets the "next_transaction_name" field.
func (stuo *SagaTransactionUpdateOne) SetNextTransactionName(s string) *SagaTransactionUpdateOne {
	stuo.mutation.SetNextTransactionName(s)
	return stuo
}

// SetNillableNextTransactionName sets the "next_transaction_name" field if the given value is not nil.
func (stuo *SagaTransactionUpdateOne) SetNillableNextTransactionName(s *string) *SagaTransactionUpdateOne {
	if s != nil {
		stuo.SetNextTransactionName(*s)
	}
	return stuo
}

// SetFailureCompensationName sets the "failure_compensation_name" field.
func (stuo *SagaTransactionUpdateOne) SetFailureCompensationName(s string) *SagaTransactionUpdateOne {
	stuo.mutation.SetFailureCompensationName(s)
	return stuo
}

// SetNillableFailureCompensationName sets the "failure_compensation_name" field if the given value is not nil.
func (stuo *SagaTransactionUpdateOne) SetNillableFailureCompensationName(s *string) *SagaTransactionUpdateOne {
	if s != nil {
		stuo.SetFailureCompensationName(*s)
	}
	return stuo
}

// SetExecutionUnitID sets the "execution_unit" edge to the ExecutionUnit entity by ID.
func (stuo *SagaTransactionUpdateOne) SetExecutionUnitID(id string) *SagaTransactionUpdateOne {
	stuo.mutation.SetExecutionUnitID(id)
	return stuo
}

// SetNillableExecutionUnitID sets the "execution_unit" edge to the ExecutionUnit entity by ID if the given value is not nil.
func (stuo *SagaTransactionUpdateOne) SetNillableExecutionUnitID(id *string) *SagaTransactionUpdateOne {
	if id != nil {
		stuo = stuo.SetExecutionUnitID(*id)
	}
	return stuo
}

// SetExecutionUnit sets the "execution_unit" edge to the ExecutionUnit entity.
func (stuo *SagaTransactionUpdateOne) SetExecutionUnit(e *ExecutionUnit) *SagaTransactionUpdateOne {
	return stuo.SetExecutionUnitID(e.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (stuo *SagaTransactionUpdateOne) SetTaskID(id string) *SagaTransactionUpdateOne {
	stuo.mutation.SetTaskID(id)
	return stuo
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (stuo *SagaTransactionUpdateOne) SetNillableTaskID(id *string) *SagaTransactionUpdateOne {
	if id != nil {
		stuo = stuo.SetTaskID(*id)
	}
	return stuo
}

// SetTask sets the "task" edge to the Task entity.
func (stuo *SagaTransactionUpdateOne) SetTask(t *Task) *SagaTransactionUpdateOne {
	return stuo.SetTaskID(t.ID)
}

// SetCompensationID sets the "compensation" edge to the SagaCompensation entity by ID.
func (stuo *SagaTransactionUpdateOne) SetCompensationID(id string) *SagaTransactionUpdateOne {
	stuo.mutation.SetCompensationID(id)
	return stuo
}

// SetNillableCompensationID sets the "compensation" edge to the SagaCompensation entity by ID if the given value is not nil.
func (stuo *SagaTransactionUpdateOne) SetNillableCompensationID(id *string) *SagaTransactionUpdateOne {
	if id != nil {
		stuo = stuo.SetCompensationID(*id)
	}
	return stuo
}

// SetCompensation sets the "compensation" edge to the SagaCompensation entity.
func (stuo *SagaTransactionUpdateOne) SetCompensation(s *SagaCompensation) *SagaTransactionUpdateOne {
	return stuo.SetCompensationID(s.ID)
}

// Mutation returns the SagaTransactionMutation object of the builder.
func (stuo *SagaTransactionUpdateOne) Mutation() *SagaTransactionMutation {
	return stuo.mutation
}

// ClearExecutionUnit clears the "execution_unit" edge to the ExecutionUnit entity.
func (stuo *SagaTransactionUpdateOne) ClearExecutionUnit() *SagaTransactionUpdateOne {
	stuo.mutation.ClearExecutionUnit()
	return stuo
}

// ClearTask clears the "task" edge to the Task entity.
func (stuo *SagaTransactionUpdateOne) ClearTask() *SagaTransactionUpdateOne {
	stuo.mutation.ClearTask()
	return stuo
}

// ClearCompensation clears the "compensation" edge to the SagaCompensation entity.
func (stuo *SagaTransactionUpdateOne) ClearCompensation() *SagaTransactionUpdateOne {
	stuo.mutation.ClearCompensation()
	return stuo
}

// Where appends a list predicates to the SagaTransactionUpdate builder.
func (stuo *SagaTransactionUpdateOne) Where(ps ...predicate.SagaTransaction) *SagaTransactionUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SagaTransactionUpdateOne) Select(field string, fields ...string) *SagaTransactionUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SagaTransaction entity.
func (stuo *SagaTransactionUpdateOne) Save(ctx context.Context) (*SagaTransaction, error) {
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SagaTransactionUpdateOne) SaveX(ctx context.Context) *SagaTransaction {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SagaTransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SagaTransactionUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stuo *SagaTransactionUpdateOne) sqlSave(ctx context.Context) (_node *SagaTransaction, err error) {
	_spec := sqlgraph.NewUpdateSpec(sagatransaction.Table, sagatransaction.Columns, sqlgraph.NewFieldSpec(sagatransaction.FieldID, field.TypeString))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SagaTransaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sagatransaction.FieldID)
		for _, f := range fields {
			if !sagatransaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sagatransaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.Order(); ok {
		_spec.SetField(sagatransaction.FieldOrder, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.AddedOrder(); ok {
		_spec.AddField(sagatransaction.FieldOrder, field.TypeInt, value)
	}
	if value, ok := stuo.mutation.NextTransactionName(); ok {
		_spec.SetField(sagatransaction.FieldNextTransactionName, field.TypeString, value)
	}
	if value, ok := stuo.mutation.FailureCompensationName(); ok {
		_spec.SetField(sagatransaction.FieldFailureCompensationName, field.TypeString, value)
	}
	if stuo.mutation.ExecutionUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagatransaction.ExecutionUnitTable,
			Columns: []string{sagatransaction.ExecutionUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ExecutionUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagatransaction.ExecutionUnitTable,
			Columns: []string{sagatransaction.ExecutionUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sagatransaction.TaskTable,
			Columns: []string{sagatransaction.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sagatransaction.TaskTable,
			Columns: []string{sagatransaction.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuo.mutation.CompensationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sagatransaction.CompensationTable,
			Columns: []string{sagatransaction.CompensationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagacompensation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.CompensationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sagatransaction.CompensationTable,
			Columns: []string{sagatransaction.CompensationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagacompensation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SagaTransaction{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagatransaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
