// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/executionunit"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/task"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetType sets the "type" field.
func (tu *TaskUpdate) SetType(t task.Type) *TaskUpdate {
	tu.mutation.SetType(t)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableType(t *task.Type) *TaskUpdate {
	if t != nil {
		tu.SetType(*t)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TaskUpdate) SetStatus(t task.Status) *TaskUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStatus(t *task.Status) *TaskUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetHandlerName sets the "handler_name" field.
func (tu *TaskUpdate) SetHandlerName(s string) *TaskUpdate {
	tu.mutation.SetHandlerName(s)
	return tu
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableHandlerName(s *string) *TaskUpdate {
	if s != nil {
		tu.SetHandlerName(*s)
	}
	return tu
}

// SetPayload sets the "payload" field.
func (tu *TaskUpdate) SetPayload(b []byte) *TaskUpdate {
	tu.mutation.SetPayload(b)
	return tu
}

// SetResult sets the "result" field.
func (tu *TaskUpdate) SetResult(b []byte) *TaskUpdate {
	tu.mutation.SetResult(b)
	return tu
}

// ClearResult clears the value of the "result" field.
func (tu *TaskUpdate) ClearResult() *TaskUpdate {
	tu.mutation.ClearResult()
	return tu
}

// SetError sets the "error" field.
func (tu *TaskUpdate) SetError(b []byte) *TaskUpdate {
	tu.mutation.SetError(b)
	return tu
}

// ClearError clears the value of the "error" field.
func (tu *TaskUpdate) ClearError() *TaskUpdate {
	tu.mutation.ClearError()
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TaskUpdate) SetCreatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCreatedAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetCompletedAt sets the "completed_at" field.
func (tu *TaskUpdate) SetCompletedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetCompletedAt(t)
	return tu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCompletedAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetCompletedAt(*t)
	}
	return tu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (tu *TaskUpdate) ClearCompletedAt() *TaskUpdate {
	tu.mutation.ClearCompletedAt()
	return tu
}

// SetExecutionUnitID sets the "execution_unit" edge to the ExecutionUnit entity by ID.
func (tu *TaskUpdate) SetExecutionUnitID(id string) *TaskUpdate {
	tu.mutation.SetExecutionUnitID(id)
	return tu
}

// SetNillableExecutionUnitID sets the "execution_unit" edge to the ExecutionUnit entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableExecutionUnitID(id *string) *TaskUpdate {
	if id != nil {
		tu = tu.SetExecutionUnitID(*id)
	}
	return tu
}

// SetExecutionUnit sets the "execution_unit" edge to the ExecutionUnit entity.
func (tu *TaskUpdate) SetExecutionUnit(e *ExecutionUnit) *TaskUpdate {
	return tu.SetExecutionUnitID(e.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearExecutionUnit clears the "execution_unit" edge to the ExecutionUnit entity.
func (tu *TaskUpdate) ClearExecutionUnit() *TaskUpdate {
	tu.mutation.ClearExecutionUnit()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	return nil
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.HandlerName(); ok {
		_spec.SetField(task.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Payload(); ok {
		_spec.SetField(task.FieldPayload, field.TypeBytes, value)
	}
	if value, ok := tu.mutation.Result(); ok {
		_spec.SetField(task.FieldResult, field.TypeBytes, value)
	}
	if tu.mutation.ResultCleared() {
		_spec.ClearField(task.FieldResult, field.TypeBytes)
	}
	if value, ok := tu.mutation.Error(); ok {
		_spec.SetField(task.FieldError, field.TypeBytes, value)
	}
	if tu.mutation.ErrorCleared() {
		_spec.ClearField(task.FieldError, field.TypeBytes)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.CompletedAt(); ok {
		_spec.SetField(task.FieldCompletedAt, field.TypeTime, value)
	}
	if tu.mutation.CompletedAtCleared() {
		_spec.ClearField(task.FieldCompletedAt, field.TypeTime)
	}
	if tu.mutation.ExecutionUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ExecutionUnitTable,
			Columns: []string{task.ExecutionUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ExecutionUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ExecutionUnitTable,
			Columns: []string{task.ExecutionUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetType sets the "type" field.
func (tuo *TaskUpdateOne) SetType(t task.Type) *TaskUpdateOne {
	tuo.mutation.SetType(t)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableType(t *task.Type) *TaskUpdateOne {
	if t != nil {
		tuo.SetType(*t)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TaskUpdateOne) SetStatus(t task.Status) *TaskUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStatus(t *task.Status) *TaskUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetHandlerName sets the "handler_name" field.
func (tuo *TaskUpdateOne) SetHandlerName(s string) *TaskUpdateOne {
	tuo.mutation.SetHandlerName(s)
	return tuo
}

// SetNillableHandlerName sets the "handler_name" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableHandlerName(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetHandlerName(*s)
	}
	return tuo
}

// SetPayload sets the "payload" field.
func (tuo *TaskUpdateOne) SetPayload(b []byte) *TaskUpdateOne {
	tuo.mutation.SetPayload(b)
	return tuo
}

// SetResult sets the "result" field.
func (tuo *TaskUpdateOne) SetResult(b []byte) *TaskUpdateOne {
	tuo.mutation.SetResult(b)
	return tuo
}

// ClearResult clears the value of the "result" field.
func (tuo *TaskUpdateOne) ClearResult() *TaskUpdateOne {
	tuo.mutation.ClearResult()
	return tuo
}

// SetError sets the "error" field.
func (tuo *TaskUpdateOne) SetError(b []byte) *TaskUpdateOne {
	tuo.mutation.SetError(b)
	return tuo
}

// ClearError clears the value of the "error" field.
func (tuo *TaskUpdateOne) ClearError() *TaskUpdateOne {
	tuo.mutation.ClearError()
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TaskUpdateOne) SetCreatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCreatedAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetCompletedAt sets the "completed_at" field.
func (tuo *TaskUpdateOne) SetCompletedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetCompletedAt(t)
	return tuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCompletedAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetCompletedAt(*t)
	}
	return tuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (tuo *TaskUpdateOne) ClearCompletedAt() *TaskUpdateOne {
	tuo.mutation.ClearCompletedAt()
	return tuo
}

// SetExecutionUnitID sets the "execution_unit" edge to the ExecutionUnit entity by ID.
func (tuo *TaskUpdateOne) SetExecutionUnitID(id string) *TaskUpdateOne {
	tuo.mutation.SetExecutionUnitID(id)
	return tuo
}

// SetNillableExecutionUnitID sets the "execution_unit" edge to the ExecutionUnit entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableExecutionUnitID(id *string) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetExecutionUnitID(*id)
	}
	return tuo
}

// SetExecutionUnit sets the "execution_unit" edge to the ExecutionUnit entity.
func (tuo *TaskUpdateOne) SetExecutionUnit(e *ExecutionUnit) *TaskUpdateOne {
	return tuo.SetExecutionUnitID(e.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearExecutionUnit clears the "execution_unit" edge to the ExecutionUnit entity.
func (tuo *TaskUpdateOne) ClearExecutionUnit() *TaskUpdateOne {
	tuo.mutation.ClearExecutionUnit()
	return tuo
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	return nil
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.HandlerName(); ok {
		_spec.SetField(task.FieldHandlerName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Payload(); ok {
		_spec.SetField(task.FieldPayload, field.TypeBytes, value)
	}
	if value, ok := tuo.mutation.Result(); ok {
		_spec.SetField(task.FieldResult, field.TypeBytes, value)
	}
	if tuo.mutation.ResultCleared() {
		_spec.ClearField(task.FieldResult, field.TypeBytes)
	}
	if value, ok := tuo.mutation.Error(); ok {
		_spec.SetField(task.FieldError, field.TypeBytes, value)
	}
	if tuo.mutation.ErrorCleared() {
		_spec.ClearField(task.FieldError, field.TypeBytes)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.CompletedAt(); ok {
		_spec.SetField(task.FieldCompletedAt, field.TypeTime, value)
	}
	if tuo.mutation.CompletedAtCleared() {
		_spec.ClearField(task.FieldCompletedAt, field.TypeTime)
	}
	if tuo.mutation.ExecutionUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ExecutionUnitTable,
			Columns: []string{task.ExecutionUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ExecutionUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ExecutionUnitTable,
			Columns: []string{task.ExecutionUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
