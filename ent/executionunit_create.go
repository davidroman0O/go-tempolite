// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/executionunit"
	"github.com/davidroman0O/go-tempolite/ent/sagacompensation"
	"github.com/davidroman0O/go-tempolite/ent/sagatransaction"
	"github.com/davidroman0O/go-tempolite/ent/task"
)

// ExecutionUnitCreate is the builder for creating a ExecutionUnit entity.
type ExecutionUnitCreate struct {
	config
	mutation *ExecutionUnitMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (euc *ExecutionUnitCreate) SetType(e executionunit.Type) *ExecutionUnitCreate {
	euc.mutation.SetType(e)
	return euc
}

// SetStatus sets the "status" field.
func (euc *ExecutionUnitCreate) SetStatus(e executionunit.Status) *ExecutionUnitCreate {
	euc.mutation.SetStatus(e)
	return euc
}

// SetStartTime sets the "start_time" field.
func (euc *ExecutionUnitCreate) SetStartTime(t time.Time) *ExecutionUnitCreate {
	euc.mutation.SetStartTime(t)
	return euc
}

// SetEndTime sets the "end_time" field.
func (euc *ExecutionUnitCreate) SetEndTime(t time.Time) *ExecutionUnitCreate {
	euc.mutation.SetEndTime(t)
	return euc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (euc *ExecutionUnitCreate) SetNillableEndTime(t *time.Time) *ExecutionUnitCreate {
	if t != nil {
		euc.SetEndTime(*t)
	}
	return euc
}

// SetRetryCount sets the "retry_count" field.
func (euc *ExecutionUnitCreate) SetRetryCount(i int) *ExecutionUnitCreate {
	euc.mutation.SetRetryCount(i)
	return euc
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (euc *ExecutionUnitCreate) SetNillableRetryCount(i *int) *ExecutionUnitCreate {
	if i != nil {
		euc.SetRetryCount(*i)
	}
	return euc
}

// SetMaxRetries sets the "max_retries" field.
func (euc *ExecutionUnitCreate) SetMaxRetries(i int) *ExecutionUnitCreate {
	euc.mutation.SetMaxRetries(i)
	return euc
}

// SetNillableMaxRetries sets the "max_retries" field if the given value is not nil.
func (euc *ExecutionUnitCreate) SetNillableMaxRetries(i *int) *ExecutionUnitCreate {
	if i != nil {
		euc.SetMaxRetries(*i)
	}
	return euc
}

// SetID sets the "id" field.
func (euc *ExecutionUnitCreate) SetID(s string) *ExecutionUnitCreate {
	euc.mutation.SetID(s)
	return euc
}

// SetExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID.
func (euc *ExecutionUnitCreate) SetExecutionContextID(id string) *ExecutionUnitCreate {
	euc.mutation.SetExecutionContextID(id)
	return euc
}

// SetNillableExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID if the given value is not nil.
func (euc *ExecutionUnitCreate) SetNillableExecutionContextID(id *string) *ExecutionUnitCreate {
	if id != nil {
		euc = euc.SetExecutionContextID(*id)
	}
	return euc
}

// SetExecutionContext sets the "execution_context" edge to the ExecutionContext entity.
func (euc *ExecutionUnitCreate) SetExecutionContext(e *ExecutionContext) *ExecutionUnitCreate {
	return euc.SetExecutionContextID(e.ID)
}

// SetParentID sets the "parent" edge to the ExecutionUnit entity by ID.
func (euc *ExecutionUnitCreate) SetParentID(id string) *ExecutionUnitCreate {
	euc.mutation.SetParentID(id)
	return euc
}

// SetNillableParentID sets the "parent" edge to the ExecutionUnit entity by ID if the given value is not nil.
func (euc *ExecutionUnitCreate) SetNillableParentID(id *string) *ExecutionUnitCreate {
	if id != nil {
		euc = euc.SetParentID(*id)
	}
	return euc
}

// SetParent sets the "parent" edge to the ExecutionUnit entity.
func (euc *ExecutionUnitCreate) SetParent(e *ExecutionUnit) *ExecutionUnitCreate {
	return euc.SetParentID(e.ID)
}

// AddChildIDs adds the "children" edge to the ExecutionUnit entity by IDs.
func (euc *ExecutionUnitCreate) AddChildIDs(ids ...string) *ExecutionUnitCreate {
	euc.mutation.AddChildIDs(ids...)
	return euc
}

// AddChildren adds the "children" edges to the ExecutionUnit entity.
func (euc *ExecutionUnitCreate) AddChildren(e ...*ExecutionUnit) *ExecutionUnitCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euc.AddChildIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (euc *ExecutionUnitCreate) AddTaskIDs(ids ...string) *ExecutionUnitCreate {
	euc.mutation.AddTaskIDs(ids...)
	return euc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (euc *ExecutionUnitCreate) AddTasks(t ...*Task) *ExecutionUnitCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euc.AddTaskIDs(ids...)
}

// AddSagaTransactionIDs adds the "saga_transactions" edge to the SagaTransaction entity by IDs.
func (euc *ExecutionUnitCreate) AddSagaTransactionIDs(ids ...string) *ExecutionUnitCreate {
	euc.mutation.AddSagaTransactionIDs(ids...)
	return euc
}

// AddSagaTransactions adds the "saga_transactions" edges to the SagaTransaction entity.
func (euc *ExecutionUnitCreate) AddSagaTransactions(s ...*SagaTransaction) *ExecutionUnitCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euc.AddSagaTransactionIDs(ids...)
}

// AddSagaCompensationIDs adds the "saga_compensations" edge to the SagaCompensation entity by IDs.
func (euc *ExecutionUnitCreate) AddSagaCompensationIDs(ids ...string) *ExecutionUnitCreate {
	euc.mutation.AddSagaCompensationIDs(ids...)
	return euc
}

// AddSagaCompensations adds the "saga_compensations" edges to the SagaCompensation entity.
func (euc *ExecutionUnitCreate) AddSagaCompensations(s ...*SagaCompensation) *ExecutionUnitCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euc.AddSagaCompensationIDs(ids...)
}

// Mutation returns the ExecutionUnitMutation object of the builder.
func (euc *ExecutionUnitCreate) Mutation() *ExecutionUnitMutation {
	return euc.mutation
}

// Save creates the ExecutionUnit in the database.
func (euc *ExecutionUnitCreate) Save(ctx context.Context) (*ExecutionUnit, error) {
	euc.defaults()
	return withHooks(ctx, euc.sqlSave, euc.mutation, euc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (euc *ExecutionUnitCreate) SaveX(ctx context.Context) *ExecutionUnit {
	v, err := euc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (euc *ExecutionUnitCreate) Exec(ctx context.Context) error {
	_, err := euc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euc *ExecutionUnitCreate) ExecX(ctx context.Context) {
	if err := euc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euc *ExecutionUnitCreate) defaults() {
	if _, ok := euc.mutation.RetryCount(); !ok {
		v := executionunit.DefaultRetryCount
		euc.mutation.SetRetryCount(v)
	}
	if _, ok := euc.mutation.MaxRetries(); !ok {
		v := executionunit.DefaultMaxRetries
		euc.mutation.SetMaxRetries(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euc *ExecutionUnitCreate) check() error {
	if _, ok := euc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ExecutionUnit.type"`)}
	}
	if v, ok := euc.mutation.GetType(); ok {
		if err := executionunit.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ExecutionUnit.type": %w`, err)}
		}
	}
	if _, ok := euc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ExecutionUnit.status"`)}
	}
	if v, ok := euc.mutation.Status(); ok {
		if err := executionunit.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ExecutionUnit.status": %w`, err)}
		}
	}
	if _, ok := euc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "ExecutionUnit.start_time"`)}
	}
	if _, ok := euc.mutation.RetryCount(); !ok {
		return &ValidationError{Name: "retry_count", err: errors.New(`ent: missing required field "ExecutionUnit.retry_count"`)}
	}
	if _, ok := euc.mutation.MaxRetries(); !ok {
		return &ValidationError{Name: "max_retries", err: errors.New(`ent: missing required field "ExecutionUnit.max_retries"`)}
	}
	return nil
}

func (euc *ExecutionUnitCreate) sqlSave(ctx context.Context) (*ExecutionUnit, error) {
	if err := euc.check(); err != nil {
		return nil, err
	}
	_node, _spec := euc.createSpec()
	if err := sqlgraph.CreateNode(ctx, euc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ExecutionUnit.ID type: %T", _spec.ID.Value)
		}
	}
	euc.mutation.id = &_node.ID
	euc.mutation.done = true
	return _node, nil
}

func (euc *ExecutionUnitCreate) createSpec() (*ExecutionUnit, *sqlgraph.CreateSpec) {
	var (
		_node = &ExecutionUnit{config: euc.config}
		_spec = sqlgraph.NewCreateSpec(executionunit.Table, sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString))
	)
	if id, ok := euc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := euc.mutation.GetType(); ok {
		_spec.SetField(executionunit.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := euc.mutation.Status(); ok {
		_spec.SetField(executionunit.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := euc.mutation.StartTime(); ok {
		_spec.SetField(executionunit.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := euc.mutation.EndTime(); ok {
		_spec.SetField(executionunit.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := euc.mutation.RetryCount(); ok {
		_spec.SetField(executionunit.FieldRetryCount, field.TypeInt, value)
		_node.RetryCount = value
	}
	if value, ok := euc.mutation.MaxRetries(); ok {
		_spec.SetField(executionunit.FieldMaxRetries, field.TypeInt, value)
		_node.MaxRetries = value
	}
	if nodes := euc.mutation.ExecutionContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   executionunit.ExecutionContextTable,
			Columns: []string{executionunit.ExecutionContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.execution_context_execution_units = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   executionunit.ParentTable,
			Columns: []string{executionunit.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.execution_unit_children = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.ChildrenTable,
			Columns: []string{executionunit.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.TasksTable,
			Columns: []string{executionunit.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.SagaTransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.SagaTransactionsTable,
			Columns: []string{executionunit.SagaTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagatransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := euc.mutation.SagaCompensationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.SagaCompensationsTable,
			Columns: []string{executionunit.SagaCompensationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagacompensation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExecutionUnitCreateBulk is the builder for creating many ExecutionUnit entities in bulk.
type ExecutionUnitCreateBulk struct {
	config
	err      error
	builders []*ExecutionUnitCreate
}

// Save creates the ExecutionUnit entities in the database.
func (eucb *ExecutionUnitCreateBulk) Save(ctx context.Context) ([]*ExecutionUnit, error) {
	if eucb.err != nil {
		return nil, eucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eucb.builders))
	nodes := make([]*ExecutionUnit, len(eucb.builders))
	mutators := make([]Mutator, len(eucb.builders))
	for i := range eucb.builders {
		func(i int, root context.Context) {
			builder := eucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExecutionUnitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eucb *ExecutionUnitCreateBulk) SaveX(ctx context.Context) []*ExecutionUnit {
	v, err := eucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eucb *ExecutionUnitCreateBulk) Exec(ctx context.Context) error {
	_, err := eucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eucb *ExecutionUnitCreateBulk) ExecX(ctx context.Context) {
	if err := eucb.Exec(ctx); err != nil {
		panic(err)
	}
}
