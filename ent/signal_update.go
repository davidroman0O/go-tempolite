// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/signal"
	"github.com/davidroman0O/go-tempolite/ent/workflowexecution"
)

// SignalUpdate is the builder for updating Signal entities.
type SignalUpdate struct {
	config
	hooks    []Hook
	mutation *SignalMutation
}

// Where appends a list predicates to the SignalUpdate builder.
func (su *SignalUpdate) Where(ps ...predicate.Signal) *SignalUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SignalUpdate) SetName(s string) *SignalUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SignalUpdate) SetNillableName(s *string) *SignalUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetData sets the "data" field.
func (su *SignalUpdate) SetData(i []interface{}) *SignalUpdate {
	su.mutation.SetData(i)
	return su
}

// AppendData appends i to the "data" field.
func (su *SignalUpdate) AppendData(i []interface{}) *SignalUpdate {
	su.mutation.AppendData(i)
	return su
}

// ClearData clears the value of the "data" field.
func (su *SignalUpdate) ClearData() *SignalUpdate {
	su.mutation.ClearData()
	return su
}

// SetStatus sets the "status" field.
func (su *SignalUpdate) SetStatus(s signal.Status) *SignalUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SignalUpdate) SetNillableStatus(s *signal.Status) *SignalUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SignalUpdate) SetCreatedAt(t time.Time) *SignalUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SignalUpdate) SetNillableCreatedAt(t *time.Time) *SignalUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SignalUpdate) SetUpdatedAt(t time.Time) *SignalUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetWorkflowExecutionID sets the "workflow_execution" edge to the WorkflowExecution entity by ID.
func (su *SignalUpdate) SetWorkflowExecutionID(id string) *SignalUpdate {
	su.mutation.SetWorkflowExecutionID(id)
	return su
}

// SetNillableWorkflowExecutionID sets the "workflow_execution" edge to the WorkflowExecution entity by ID if the given value is not nil.
func (su *SignalUpdate) SetNillableWorkflowExecutionID(id *string) *SignalUpdate {
	if id != nil {
		su = su.SetWorkflowExecutionID(*id)
	}
	return su
}

// SetWorkflowExecution sets the "workflow_execution" edge to the WorkflowExecution entity.
func (su *SignalUpdate) SetWorkflowExecution(w *WorkflowExecution) *SignalUpdate {
	return su.SetWorkflowExecutionID(w.ID)
}

// Mutation returns the SignalMutation object of the builder.
func (su *SignalUpdate) Mutation() *SignalMutation {
	return su.mutation
}

// ClearWorkflowExecution clears the "workflow_execution" edge to the WorkflowExecution entity.
func (su *SignalUpdate) ClearWorkflowExecution() *SignalUpdate {
	su.mutation.ClearWorkflowExecution()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SignalUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SignalUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SignalUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SignalUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SignalUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := signal.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SignalUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := signal.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Signal.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Status(); ok {
		if err := signal.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Signal.status": %w`, err)}
		}
	}
	return nil
}

func (su *SignalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(signal.Table, signal.Columns, sqlgraph.NewFieldSpec(signal.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(signal.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Data(); ok {
		_spec.SetField(signal.FieldData, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, signal.FieldData, value)
		})
	}
	if su.mutation.DataCleared() {
		_spec.ClearField(signal.FieldData, field.TypeJSON)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(signal.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(signal.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(signal.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.WorkflowExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signal.WorkflowExecutionTable,
			Columns: []string{signal.WorkflowExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.WorkflowExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signal.WorkflowExecutionTable,
			Columns: []string{signal.WorkflowExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SignalUpdateOne is the builder for updating a single Signal entity.
type SignalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SignalMutation
}

// SetName sets the "name" field.
func (suo *SignalUpdateOne) SetName(s string) *SignalUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SignalUpdateOne) SetNillableName(s *string) *SignalUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetData sets the "data" field.
func (suo *SignalUpdateOne) SetData(i []interface{}) *SignalUpdateOne {
	suo.mutation.SetData(i)
	return suo
}

// AppendData appends i to the "data" field.
func (suo *SignalUpdateOne) AppendData(i []interface{}) *SignalUpdateOne {
	suo.mutation.AppendData(i)
	return suo
}

// ClearData clears the value of the "data" field.
func (suo *SignalUpdateOne) ClearData() *SignalUpdateOne {
	suo.mutation.ClearData()
	return suo
}

// SetStatus sets the "status" field.
func (suo *SignalUpdateOne) SetStatus(s signal.Status) *SignalUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SignalUpdateOne) SetNillableStatus(s *signal.Status) *SignalUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SignalUpdateOne) SetCreatedAt(t time.Time) *SignalUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SignalUpdateOne) SetNillableCreatedAt(t *time.Time) *SignalUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SignalUpdateOne) SetUpdatedAt(t time.Time) *SignalUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetWorkflowExecutionID sets the "workflow_execution" edge to the WorkflowExecution entity by ID.
func (suo *SignalUpdateOne) SetWorkflowExecutionID(id string) *SignalUpdateOne {
	suo.mutation.SetWorkflowExecutionID(id)
	return suo
}

// SetNillableWorkflowExecutionID sets the "workflow_execution" edge to the WorkflowExecution entity by ID if the given value is not nil.
func (suo *SignalUpdateOne) SetNillableWorkflowExecutionID(id *string) *SignalUpdateOne {
	if id != nil {
		suo = suo.SetWorkflowExecutionID(*id)
	}
	return suo
}

// SetWorkflowExecution sets the "workflow_execution" edge to the WorkflowExecution entity.
func (suo *SignalUpdateOne) SetWorkflowExecution(w *WorkflowExecution) *SignalUpdateOne {
	return suo.SetWorkflowExecutionID(w.ID)
}

// Mutation returns the SignalMutation object of the builder.
func (suo *SignalUpdateOne) Mutation() *SignalMutation {
	return suo.mutation
}

// ClearWorkflowExecution clears the "workflow_execution" edge to the WorkflowExecution entity.
func (suo *SignalUpdateOne) ClearWorkflowExecution() *SignalUpdateOne {
	suo.mutation.ClearWorkflowExecution()
	return suo
}

// Where appends a list predicates to the SignalUpdate builder.
func (suo *SignalUpdateOne) Where(ps ...predicate.Signal) *SignalUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SignalUpdateOne) Select(field string, fields ...string) *SignalUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Signal entity.
func (suo *SignalUpdateOne) Save(ctx context.Context) (*Signal, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SignalUpdateOne) SaveX(ctx context.Context) *Signal {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SignalUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SignalUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SignalUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := signal.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SignalUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := signal.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Signal.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Status(); ok {
		if err := signal.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Signal.status": %w`, err)}
		}
	}
	return nil
}

func (suo *SignalUpdateOne) sqlSave(ctx context.Context) (_node *Signal, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(signal.Table, signal.Columns, sqlgraph.NewFieldSpec(signal.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Signal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, signal.FieldID)
		for _, f := range fields {
			if !signal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != signal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(signal.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Data(); ok {
		_spec.SetField(signal.FieldData, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, signal.FieldData, value)
		})
	}
	if suo.mutation.DataCleared() {
		_spec.ClearField(signal.FieldData, field.TypeJSON)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(signal.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(signal.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(signal.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.WorkflowExecutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signal.WorkflowExecutionTable,
			Columns: []string{signal.WorkflowExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.WorkflowExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signal.WorkflowExecutionTable,
			Columns: []string{signal.WorkflowExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Signal{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
