// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/handlerexecution"
	"github.com/davidroman0O/go-tempolite/ent/handlertask"
	"github.com/davidroman0O/go-tempolite/ent/sagastepexecution"
)

// HandlerExecutionCreate is the builder for creating a HandlerExecution entity.
type HandlerExecutionCreate struct {
	config
	mutation *HandlerExecutionMutation
	hooks    []Hook
}

// SetRunID sets the "run_id" field.
func (hec *HandlerExecutionCreate) SetRunID(s string) *HandlerExecutionCreate {
	hec.mutation.SetRunID(s)
	return hec
}

// SetHandlerName sets the "handler_name" field.
func (hec *HandlerExecutionCreate) SetHandlerName(s string) *HandlerExecutionCreate {
	hec.mutation.SetHandlerName(s)
	return hec
}

// SetStatus sets the "status" field.
func (hec *HandlerExecutionCreate) SetStatus(h handlerexecution.Status) *HandlerExecutionCreate {
	hec.mutation.SetStatus(h)
	return hec
}

// SetStartTime sets the "start_time" field.
func (hec *HandlerExecutionCreate) SetStartTime(t time.Time) *HandlerExecutionCreate {
	hec.mutation.SetStartTime(t)
	return hec
}

// SetEndTime sets the "end_time" field.
func (hec *HandlerExecutionCreate) SetEndTime(t time.Time) *HandlerExecutionCreate {
	hec.mutation.SetEndTime(t)
	return hec
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (hec *HandlerExecutionCreate) SetNillableEndTime(t *time.Time) *HandlerExecutionCreate {
	if t != nil {
		hec.SetEndTime(*t)
	}
	return hec
}

// SetRetryCount sets the "retry_count" field.
func (hec *HandlerExecutionCreate) SetRetryCount(i int) *HandlerExecutionCreate {
	hec.mutation.SetRetryCount(i)
	return hec
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (hec *HandlerExecutionCreate) SetNillableRetryCount(i *int) *HandlerExecutionCreate {
	if i != nil {
		hec.SetRetryCount(*i)
	}
	return hec
}

// SetMaxRetries sets the "max_retries" field.
func (hec *HandlerExecutionCreate) SetMaxRetries(i int) *HandlerExecutionCreate {
	hec.mutation.SetMaxRetries(i)
	return hec
}

// SetNillableMaxRetries sets the "max_retries" field if the given value is not nil.
func (hec *HandlerExecutionCreate) SetNillableMaxRetries(i *int) *HandlerExecutionCreate {
	if i != nil {
		hec.SetMaxRetries(*i)
	}
	return hec
}

// SetID sets the "id" field.
func (hec *HandlerExecutionCreate) SetID(s string) *HandlerExecutionCreate {
	hec.mutation.SetID(s)
	return hec
}

// SetExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID.
func (hec *HandlerExecutionCreate) SetExecutionContextID(id string) *HandlerExecutionCreate {
	hec.mutation.SetExecutionContextID(id)
	return hec
}

// SetExecutionContext sets the "execution_context" edge to the ExecutionContext entity.
func (hec *HandlerExecutionCreate) SetExecutionContext(e *ExecutionContext) *HandlerExecutionCreate {
	return hec.SetExecutionContextID(e.ID)
}

// SetParentID sets the "parent" edge to the HandlerExecution entity by ID.
func (hec *HandlerExecutionCreate) SetParentID(id string) *HandlerExecutionCreate {
	hec.mutation.SetParentID(id)
	return hec
}

// SetNillableParentID sets the "parent" edge to the HandlerExecution entity by ID if the given value is not nil.
func (hec *HandlerExecutionCreate) SetNillableParentID(id *string) *HandlerExecutionCreate {
	if id != nil {
		hec = hec.SetParentID(*id)
	}
	return hec
}

// SetParent sets the "parent" edge to the HandlerExecution entity.
func (hec *HandlerExecutionCreate) SetParent(h *HandlerExecution) *HandlerExecutionCreate {
	return hec.SetParentID(h.ID)
}

// AddChildIDs adds the "children" edge to the HandlerExecution entity by IDs.
func (hec *HandlerExecutionCreate) AddChildIDs(ids ...string) *HandlerExecutionCreate {
	hec.mutation.AddChildIDs(ids...)
	return hec
}

// AddChildren adds the "children" edges to the HandlerExecution entity.
func (hec *HandlerExecutionCreate) AddChildren(h ...*HandlerExecution) *HandlerExecutionCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hec.AddChildIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the HandlerTask entity by IDs.
func (hec *HandlerExecutionCreate) AddTaskIDs(ids ...string) *HandlerExecutionCreate {
	hec.mutation.AddTaskIDs(ids...)
	return hec
}

// AddTasks adds the "tasks" edges to the HandlerTask entity.
func (hec *HandlerExecutionCreate) AddTasks(h ...*HandlerTask) *HandlerExecutionCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hec.AddTaskIDs(ids...)
}

// SetSagaStepExecutionID sets the "saga_step_execution" edge to the SagaStepExecution entity by ID.
func (hec *HandlerExecutionCreate) SetSagaStepExecutionID(id string) *HandlerExecutionCreate {
	hec.mutation.SetSagaStepExecutionID(id)
	return hec
}

// SetNillableSagaStepExecutionID sets the "saga_step_execution" edge to the SagaStepExecution entity by ID if the given value is not nil.
func (hec *HandlerExecutionCreate) SetNillableSagaStepExecutionID(id *string) *HandlerExecutionCreate {
	if id != nil {
		hec = hec.SetSagaStepExecutionID(*id)
	}
	return hec
}

// SetSagaStepExecution sets the "saga_step_execution" edge to the SagaStepExecution entity.
func (hec *HandlerExecutionCreate) SetSagaStepExecution(s *SagaStepExecution) *HandlerExecutionCreate {
	return hec.SetSagaStepExecutionID(s.ID)
}

// Mutation returns the HandlerExecutionMutation object of the builder.
func (hec *HandlerExecutionCreate) Mutation() *HandlerExecutionMutation {
	return hec.mutation
}

// Save creates the HandlerExecution in the database.
func (hec *HandlerExecutionCreate) Save(ctx context.Context) (*HandlerExecution, error) {
	hec.defaults()
	return withHooks(ctx, hec.sqlSave, hec.mutation, hec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hec *HandlerExecutionCreate) SaveX(ctx context.Context) *HandlerExecution {
	v, err := hec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hec *HandlerExecutionCreate) Exec(ctx context.Context) error {
	_, err := hec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hec *HandlerExecutionCreate) ExecX(ctx context.Context) {
	if err := hec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hec *HandlerExecutionCreate) defaults() {
	if _, ok := hec.mutation.RetryCount(); !ok {
		v := handlerexecution.DefaultRetryCount
		hec.mutation.SetRetryCount(v)
	}
	if _, ok := hec.mutation.MaxRetries(); !ok {
		v := handlerexecution.DefaultMaxRetries
		hec.mutation.SetMaxRetries(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hec *HandlerExecutionCreate) check() error {
	if _, ok := hec.mutation.RunID(); !ok {
		return &ValidationError{Name: "run_id", err: errors.New(`ent: missing required field "HandlerExecution.run_id"`)}
	}
	if _, ok := hec.mutation.HandlerName(); !ok {
		return &ValidationError{Name: "handler_name", err: errors.New(`ent: missing required field "HandlerExecution.handler_name"`)}
	}
	if _, ok := hec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "HandlerExecution.status"`)}
	}
	if v, ok := hec.mutation.Status(); ok {
		if err := handlerexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "HandlerExecution.status": %w`, err)}
		}
	}
	if _, ok := hec.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "HandlerExecution.start_time"`)}
	}
	if _, ok := hec.mutation.RetryCount(); !ok {
		return &ValidationError{Name: "retry_count", err: errors.New(`ent: missing required field "HandlerExecution.retry_count"`)}
	}
	if _, ok := hec.mutation.MaxRetries(); !ok {
		return &ValidationError{Name: "max_retries", err: errors.New(`ent: missing required field "HandlerExecution.max_retries"`)}
	}
	if len(hec.mutation.ExecutionContextIDs()) == 0 {
		return &ValidationError{Name: "execution_context", err: errors.New(`ent: missing required edge "HandlerExecution.execution_context"`)}
	}
	return nil
}

func (hec *HandlerExecutionCreate) sqlSave(ctx context.Context) (*HandlerExecution, error) {
	if err := hec.check(); err != nil {
		return nil, err
	}
	_node, _spec := hec.createSpec()
	if err := sqlgraph.CreateNode(ctx, hec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected HandlerExecution.ID type: %T", _spec.ID.Value)
		}
	}
	hec.mutation.id = &_node.ID
	hec.mutation.done = true
	return _node, nil
}

func (hec *HandlerExecutionCreate) createSpec() (*HandlerExecution, *sqlgraph.CreateSpec) {
	var (
		_node = &HandlerExecution{config: hec.config}
		_spec = sqlgraph.NewCreateSpec(handlerexecution.Table, sqlgraph.NewFieldSpec(handlerexecution.FieldID, field.TypeString))
	)
	if id, ok := hec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hec.mutation.RunID(); ok {
		_spec.SetField(handlerexecution.FieldRunID, field.TypeString, value)
		_node.RunID = value
	}
	if value, ok := hec.mutation.HandlerName(); ok {
		_spec.SetField(handlerexecution.FieldHandlerName, field.TypeString, value)
		_node.HandlerName = value
	}
	if value, ok := hec.mutation.Status(); ok {
		_spec.SetField(handlerexecution.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := hec.mutation.StartTime(); ok {
		_spec.SetField(handlerexecution.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := hec.mutation.EndTime(); ok {
		_spec.SetField(handlerexecution.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := hec.mutation.RetryCount(); ok {
		_spec.SetField(handlerexecution.FieldRetryCount, field.TypeInt, value)
		_node.RetryCount = value
	}
	if value, ok := hec.mutation.MaxRetries(); ok {
		_spec.SetField(handlerexecution.FieldMaxRetries, field.TypeInt, value)
		_node.MaxRetries = value
	}
	if nodes := hec.mutation.ExecutionContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   handlerexecution.ExecutionContextTable,
			Columns: []string{handlerexecution.ExecutionContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.execution_context_handler_executions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hec.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   handlerexecution.ParentTable,
			Columns: []string{handlerexecution.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(handlerexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.handler_execution_children = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hec.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   handlerexecution.ChildrenTable,
			Columns: []string{handlerexecution.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(handlerexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hec.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   handlerexecution.TasksTable,
			Columns: []string{handlerexecution.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(handlertask.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hec.mutation.SagaStepExecutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   handlerexecution.SagaStepExecutionTable,
			Columns: []string{handlerexecution.SagaStepExecutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagastepexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.handler_execution_saga_step_execution = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HandlerExecutionCreateBulk is the builder for creating many HandlerExecution entities in bulk.
type HandlerExecutionCreateBulk struct {
	config
	err      error
	builders []*HandlerExecutionCreate
}

// Save creates the HandlerExecution entities in the database.
func (hecb *HandlerExecutionCreateBulk) Save(ctx context.Context) ([]*HandlerExecution, error) {
	if hecb.err != nil {
		return nil, hecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hecb.builders))
	nodes := make([]*HandlerExecution, len(hecb.builders))
	mutators := make([]Mutator, len(hecb.builders))
	for i := range hecb.builders {
		func(i int, root context.Context) {
			builder := hecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HandlerExecutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hecb *HandlerExecutionCreateBulk) SaveX(ctx context.Context) []*HandlerExecution {
	v, err := hecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hecb *HandlerExecutionCreateBulk) Exec(ctx context.Context) error {
	_, err := hecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hecb *HandlerExecutionCreateBulk) ExecX(ctx context.Context) {
	if err := hecb.Exec(ctx); err != nil {
		panic(err)
	}
}
