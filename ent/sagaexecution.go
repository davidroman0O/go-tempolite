// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/sagaexecution"
)

// SagaExecution is the model entity for the SagaExecution schema.
type SagaExecution struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ExecutionContextID holds the value of the "execution_context_id" field.
	ExecutionContextID string `json:"execution_context_id,omitempty"`
	// Status holds the value of the "status" field.
	Status sagaexecution.Status `json:"status,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SagaExecutionQuery when eager-loading is set.
	Edges        SagaExecutionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SagaExecutionEdges holds the relations/edges for other nodes in the graph.
type SagaExecutionEdges struct {
	// ExecutionContext holds the value of the execution_context edge.
	ExecutionContext *ExecutionContext `json:"execution_context,omitempty"`
	// Steps holds the value of the steps edge.
	Steps []*SagaStepExecution `json:"steps,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ExecutionContextOrErr returns the ExecutionContext value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SagaExecutionEdges) ExecutionContextOrErr() (*ExecutionContext, error) {
	if e.ExecutionContext != nil {
		return e.ExecutionContext, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: executioncontext.Label}
	}
	return nil, &NotLoadedError{edge: "execution_context"}
}

// StepsOrErr returns the Steps value or an error if the edge
// was not loaded in eager-loading.
func (e SagaExecutionEdges) StepsOrErr() ([]*SagaStepExecution, error) {
	if e.loadedTypes[1] {
		return e.Steps, nil
	}
	return nil, &NotLoadedError{edge: "steps"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SagaExecution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sagaexecution.FieldID, sagaexecution.FieldExecutionContextID, sagaexecution.FieldStatus:
			values[i] = new(sql.NullString)
		case sagaexecution.FieldStartTime, sagaexecution.FieldEndTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SagaExecution fields.
func (se *SagaExecution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sagaexecution.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				se.ID = value.String
			}
		case sagaexecution.FieldExecutionContextID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field execution_context_id", values[i])
			} else if value.Valid {
				se.ExecutionContextID = value.String
			}
		case sagaexecution.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				se.Status = sagaexecution.Status(value.String)
			}
		case sagaexecution.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				se.StartTime = value.Time
			}
		case sagaexecution.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				se.EndTime = value.Time
			}
		default:
			se.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SagaExecution.
// This includes values selected through modifiers, order, etc.
func (se *SagaExecution) Value(name string) (ent.Value, error) {
	return se.selectValues.Get(name)
}

// QueryExecutionContext queries the "execution_context" edge of the SagaExecution entity.
func (se *SagaExecution) QueryExecutionContext() *ExecutionContextQuery {
	return NewSagaExecutionClient(se.config).QueryExecutionContext(se)
}

// QuerySteps queries the "steps" edge of the SagaExecution entity.
func (se *SagaExecution) QuerySteps() *SagaStepExecutionQuery {
	return NewSagaExecutionClient(se.config).QuerySteps(se)
}

// Update returns a builder for updating this SagaExecution.
// Note that you need to call SagaExecution.Unwrap() before calling this method if this SagaExecution
// was returned from a transaction, and the transaction was committed or rolled back.
func (se *SagaExecution) Update() *SagaExecutionUpdateOne {
	return NewSagaExecutionClient(se.config).UpdateOne(se)
}

// Unwrap unwraps the SagaExecution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (se *SagaExecution) Unwrap() *SagaExecution {
	_tx, ok := se.config.driver.(*txDriver)
	if !ok {
		panic("ent: SagaExecution is not a transactional entity")
	}
	se.config.driver = _tx.drv
	return se
}

// String implements the fmt.Stringer.
func (se *SagaExecution) String() string {
	var builder strings.Builder
	builder.WriteString("SagaExecution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", se.ID))
	builder.WriteString("execution_context_id=")
	builder.WriteString(se.ExecutionContextID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", se.Status))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(se.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(se.EndTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SagaExecutions is a parsable slice of SagaExecution.
type SagaExecutions []*SagaExecution
