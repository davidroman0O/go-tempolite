// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/saga"
	"github.com/davidroman0O/go-tempolite/ent/sagaexecution"
)

// SagaExecution is the model entity for the SagaExecution schema.
type SagaExecution struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// RunID holds the value of the "run_id" field.
	RunID string `json:"run_id,omitempty"`
	// Status holds the value of the "status" field.
	Status sagaexecution.Status `json:"status,omitempty"`
	// Attempt holds the value of the "attempt" field.
	Attempt int `json:"attempt,omitempty"`
	// Output holds the value of the "output" field.
	Output []interface{} `json:"output,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SagaExecutionQuery when eager-loading is set.
	Edges           SagaExecutionEdges `json:"edges"`
	saga_executions *string
	selectValues    sql.SelectValues
}

// SagaExecutionEdges holds the relations/edges for other nodes in the graph.
type SagaExecutionEdges struct {
	// Saga holds the value of the saga edge.
	Saga *Saga `json:"saga,omitempty"`
	// Steps holds the value of the steps edge.
	Steps []*SagaStepExecution `json:"steps,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SagaOrErr returns the Saga value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SagaExecutionEdges) SagaOrErr() (*Saga, error) {
	if e.Saga != nil {
		return e.Saga, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: saga.Label}
	}
	return nil, &NotLoadedError{edge: "saga"}
}

// StepsOrErr returns the Steps value or an error if the edge
// was not loaded in eager-loading.
func (e SagaExecutionEdges) StepsOrErr() ([]*SagaStepExecution, error) {
	if e.loadedTypes[1] {
		return e.Steps, nil
	}
	return nil, &NotLoadedError{edge: "steps"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SagaExecution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sagaexecution.FieldOutput:
			values[i] = new([]byte)
		case sagaexecution.FieldAttempt:
			values[i] = new(sql.NullInt64)
		case sagaexecution.FieldID, sagaexecution.FieldRunID, sagaexecution.FieldStatus:
			values[i] = new(sql.NullString)
		case sagaexecution.FieldStartedAt, sagaexecution.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case sagaexecution.ForeignKeys[0]: // saga_executions
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SagaExecution fields.
func (se *SagaExecution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sagaexecution.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				se.ID = value.String
			}
		case sagaexecution.FieldRunID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field run_id", values[i])
			} else if value.Valid {
				se.RunID = value.String
			}
		case sagaexecution.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				se.Status = sagaexecution.Status(value.String)
			}
		case sagaexecution.FieldAttempt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attempt", values[i])
			} else if value.Valid {
				se.Attempt = int(value.Int64)
			}
		case sagaexecution.FieldOutput:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field output", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &se.Output); err != nil {
					return fmt.Errorf("unmarshal field output: %w", err)
				}
			}
		case sagaexecution.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				se.StartedAt = value.Time
			}
		case sagaexecution.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				se.UpdatedAt = value.Time
			}
		case sagaexecution.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field saga_executions", values[i])
			} else if value.Valid {
				se.saga_executions = new(string)
				*se.saga_executions = value.String
			}
		default:
			se.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SagaExecution.
// This includes values selected through modifiers, order, etc.
func (se *SagaExecution) Value(name string) (ent.Value, error) {
	return se.selectValues.Get(name)
}

// QuerySaga queries the "saga" edge of the SagaExecution entity.
func (se *SagaExecution) QuerySaga() *SagaQuery {
	return NewSagaExecutionClient(se.config).QuerySaga(se)
}

// QuerySteps queries the "steps" edge of the SagaExecution entity.
func (se *SagaExecution) QuerySteps() *SagaStepExecutionQuery {
	return NewSagaExecutionClient(se.config).QuerySteps(se)
}

// Update returns a builder for updating this SagaExecution.
// Note that you need to call SagaExecution.Unwrap() before calling this method if this SagaExecution
// was returned from a transaction, and the transaction was committed or rolled back.
func (se *SagaExecution) Update() *SagaExecutionUpdateOne {
	return NewSagaExecutionClient(se.config).UpdateOne(se)
}

// Unwrap unwraps the SagaExecution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (se *SagaExecution) Unwrap() *SagaExecution {
	_tx, ok := se.config.driver.(*txDriver)
	if !ok {
		panic("ent: SagaExecution is not a transactional entity")
	}
	se.config.driver = _tx.drv
	return se
}

// String implements the fmt.Stringer.
func (se *SagaExecution) String() string {
	var builder strings.Builder
	builder.WriteString("SagaExecution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", se.ID))
	builder.WriteString("run_id=")
	builder.WriteString(se.RunID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", se.Status))
	builder.WriteString(", ")
	builder.WriteString("attempt=")
	builder.WriteString(fmt.Sprintf("%v", se.Attempt))
	builder.WriteString(", ")
	builder.WriteString("output=")
	builder.WriteString(fmt.Sprintf("%v", se.Output))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(se.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(se.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SagaExecutions is a parsable slice of SagaExecution.
type SagaExecutions []*SagaExecution
