// Code generated by ent, DO NOT EDIT.

package executionunit

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldContainsFold(FieldID, id))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldEQ(FieldEndTime, v))
}

// RetryCount applies equality check predicate on the "retry_count" field. It's identical to RetryCountEQ.
func RetryCount(v int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldEQ(FieldRetryCount, v))
}

// MaxRetries applies equality check predicate on the "max_retries" field. It's identical to MaxRetriesEQ.
func MaxRetries(v int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldEQ(FieldMaxRetries, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldNotIn(FieldType, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldNotIn(FieldStatus, vs...))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldNotNull(FieldEndTime))
}

// RetryCountEQ applies the EQ predicate on the "retry_count" field.
func RetryCountEQ(v int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldEQ(FieldRetryCount, v))
}

// RetryCountNEQ applies the NEQ predicate on the "retry_count" field.
func RetryCountNEQ(v int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldNEQ(FieldRetryCount, v))
}

// RetryCountIn applies the In predicate on the "retry_count" field.
func RetryCountIn(vs ...int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldIn(FieldRetryCount, vs...))
}

// RetryCountNotIn applies the NotIn predicate on the "retry_count" field.
func RetryCountNotIn(vs ...int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldNotIn(FieldRetryCount, vs...))
}

// RetryCountGT applies the GT predicate on the "retry_count" field.
func RetryCountGT(v int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldGT(FieldRetryCount, v))
}

// RetryCountGTE applies the GTE predicate on the "retry_count" field.
func RetryCountGTE(v int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldGTE(FieldRetryCount, v))
}

// RetryCountLT applies the LT predicate on the "retry_count" field.
func RetryCountLT(v int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldLT(FieldRetryCount, v))
}

// RetryCountLTE applies the LTE predicate on the "retry_count" field.
func RetryCountLTE(v int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldLTE(FieldRetryCount, v))
}

// MaxRetriesEQ applies the EQ predicate on the "max_retries" field.
func MaxRetriesEQ(v int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldEQ(FieldMaxRetries, v))
}

// MaxRetriesNEQ applies the NEQ predicate on the "max_retries" field.
func MaxRetriesNEQ(v int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldNEQ(FieldMaxRetries, v))
}

// MaxRetriesIn applies the In predicate on the "max_retries" field.
func MaxRetriesIn(vs ...int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldIn(FieldMaxRetries, vs...))
}

// MaxRetriesNotIn applies the NotIn predicate on the "max_retries" field.
func MaxRetriesNotIn(vs ...int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldNotIn(FieldMaxRetries, vs...))
}

// MaxRetriesGT applies the GT predicate on the "max_retries" field.
func MaxRetriesGT(v int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldGT(FieldMaxRetries, v))
}

// MaxRetriesGTE applies the GTE predicate on the "max_retries" field.
func MaxRetriesGTE(v int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldGTE(FieldMaxRetries, v))
}

// MaxRetriesLT applies the LT predicate on the "max_retries" field.
func MaxRetriesLT(v int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldLT(FieldMaxRetries, v))
}

// MaxRetriesLTE applies the LTE predicate on the "max_retries" field.
func MaxRetriesLTE(v int) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.FieldLTE(FieldMaxRetries, v))
}

// HasExecutionContext applies the HasEdge predicate on the "execution_context" edge.
func HasExecutionContext() predicate.ExecutionUnit {
	return predicate.ExecutionUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExecutionContextTable, ExecutionContextColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionContextWith applies the HasEdge predicate on the "execution_context" edge with a given conditions (other predicates).
func HasExecutionContextWith(preds ...predicate.ExecutionContext) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(func(s *sql.Selector) {
		step := newExecutionContextStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.ExecutionUnit {
	return predicate.ExecutionUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.ExecutionUnit) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.ExecutionUnit {
	return predicate.ExecutionUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.ExecutionUnit) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTasks applies the HasEdge predicate on the "tasks" edge.
func HasTasks() predicate.ExecutionUnit {
	return predicate.ExecutionUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTasksWith applies the HasEdge predicate on the "tasks" edge with a given conditions (other predicates).
func HasTasksWith(preds ...predicate.Task) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(func(s *sql.Selector) {
		step := newTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSagaTransactions applies the HasEdge predicate on the "saga_transactions" edge.
func HasSagaTransactions() predicate.ExecutionUnit {
	return predicate.ExecutionUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SagaTransactionsTable, SagaTransactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSagaTransactionsWith applies the HasEdge predicate on the "saga_transactions" edge with a given conditions (other predicates).
func HasSagaTransactionsWith(preds ...predicate.SagaTransaction) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(func(s *sql.Selector) {
		step := newSagaTransactionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSagaCompensations applies the HasEdge predicate on the "saga_compensations" edge.
func HasSagaCompensations() predicate.ExecutionUnit {
	return predicate.ExecutionUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SagaCompensationsTable, SagaCompensationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSagaCompensationsWith applies the HasEdge predicate on the "saga_compensations" edge with a given conditions (other predicates).
func HasSagaCompensationsWith(preds ...predicate.SagaCompensation) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(func(s *sql.Selector) {
		step := newSagaCompensationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExecutionUnit) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExecutionUnit) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExecutionUnit) predicate.ExecutionUnit {
	return predicate.ExecutionUnit(sql.NotPredicates(p))
}
