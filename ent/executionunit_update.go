// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/executionunit"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/sagacompensation"
	"github.com/davidroman0O/go-tempolite/ent/sagatransaction"
	"github.com/davidroman0O/go-tempolite/ent/task"
)

// ExecutionUnitUpdate is the builder for updating ExecutionUnit entities.
type ExecutionUnitUpdate struct {
	config
	hooks    []Hook
	mutation *ExecutionUnitMutation
}

// Where appends a list predicates to the ExecutionUnitUpdate builder.
func (euu *ExecutionUnitUpdate) Where(ps ...predicate.ExecutionUnit) *ExecutionUnitUpdate {
	euu.mutation.Where(ps...)
	return euu
}

// SetType sets the "type" field.
func (euu *ExecutionUnitUpdate) SetType(e executionunit.Type) *ExecutionUnitUpdate {
	euu.mutation.SetType(e)
	return euu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (euu *ExecutionUnitUpdate) SetNillableType(e *executionunit.Type) *ExecutionUnitUpdate {
	if e != nil {
		euu.SetType(*e)
	}
	return euu
}

// SetStatus sets the "status" field.
func (euu *ExecutionUnitUpdate) SetStatus(e executionunit.Status) *ExecutionUnitUpdate {
	euu.mutation.SetStatus(e)
	return euu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euu *ExecutionUnitUpdate) SetNillableStatus(e *executionunit.Status) *ExecutionUnitUpdate {
	if e != nil {
		euu.SetStatus(*e)
	}
	return euu
}

// SetStartTime sets the "start_time" field.
func (euu *ExecutionUnitUpdate) SetStartTime(t time.Time) *ExecutionUnitUpdate {
	euu.mutation.SetStartTime(t)
	return euu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (euu *ExecutionUnitUpdate) SetNillableStartTime(t *time.Time) *ExecutionUnitUpdate {
	if t != nil {
		euu.SetStartTime(*t)
	}
	return euu
}

// SetEndTime sets the "end_time" field.
func (euu *ExecutionUnitUpdate) SetEndTime(t time.Time) *ExecutionUnitUpdate {
	euu.mutation.SetEndTime(t)
	return euu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (euu *ExecutionUnitUpdate) SetNillableEndTime(t *time.Time) *ExecutionUnitUpdate {
	if t != nil {
		euu.SetEndTime(*t)
	}
	return euu
}

// ClearEndTime clears the value of the "end_time" field.
func (euu *ExecutionUnitUpdate) ClearEndTime() *ExecutionUnitUpdate {
	euu.mutation.ClearEndTime()
	return euu
}

// SetRetryCount sets the "retry_count" field.
func (euu *ExecutionUnitUpdate) SetRetryCount(i int) *ExecutionUnitUpdate {
	euu.mutation.ResetRetryCount()
	euu.mutation.SetRetryCount(i)
	return euu
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (euu *ExecutionUnitUpdate) SetNillableRetryCount(i *int) *ExecutionUnitUpdate {
	if i != nil {
		euu.SetRetryCount(*i)
	}
	return euu
}

// AddRetryCount adds i to the "retry_count" field.
func (euu *ExecutionUnitUpdate) AddRetryCount(i int) *ExecutionUnitUpdate {
	euu.mutation.AddRetryCount(i)
	return euu
}

// SetMaxRetries sets the "max_retries" field.
func (euu *ExecutionUnitUpdate) SetMaxRetries(i int) *ExecutionUnitUpdate {
	euu.mutation.ResetMaxRetries()
	euu.mutation.SetMaxRetries(i)
	return euu
}

// SetNillableMaxRetries sets the "max_retries" field if the given value is not nil.
func (euu *ExecutionUnitUpdate) SetNillableMaxRetries(i *int) *ExecutionUnitUpdate {
	if i != nil {
		euu.SetMaxRetries(*i)
	}
	return euu
}

// AddMaxRetries adds i to the "max_retries" field.
func (euu *ExecutionUnitUpdate) AddMaxRetries(i int) *ExecutionUnitUpdate {
	euu.mutation.AddMaxRetries(i)
	return euu
}

// SetExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID.
func (euu *ExecutionUnitUpdate) SetExecutionContextID(id string) *ExecutionUnitUpdate {
	euu.mutation.SetExecutionContextID(id)
	return euu
}

// SetNillableExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID if the given value is not nil.
func (euu *ExecutionUnitUpdate) SetNillableExecutionContextID(id *string) *ExecutionUnitUpdate {
	if id != nil {
		euu = euu.SetExecutionContextID(*id)
	}
	return euu
}

// SetExecutionContext sets the "execution_context" edge to the ExecutionContext entity.
func (euu *ExecutionUnitUpdate) SetExecutionContext(e *ExecutionContext) *ExecutionUnitUpdate {
	return euu.SetExecutionContextID(e.ID)
}

// SetParentID sets the "parent" edge to the ExecutionUnit entity by ID.
func (euu *ExecutionUnitUpdate) SetParentID(id string) *ExecutionUnitUpdate {
	euu.mutation.SetParentID(id)
	return euu
}

// SetNillableParentID sets the "parent" edge to the ExecutionUnit entity by ID if the given value is not nil.
func (euu *ExecutionUnitUpdate) SetNillableParentID(id *string) *ExecutionUnitUpdate {
	if id != nil {
		euu = euu.SetParentID(*id)
	}
	return euu
}

// SetParent sets the "parent" edge to the ExecutionUnit entity.
func (euu *ExecutionUnitUpdate) SetParent(e *ExecutionUnit) *ExecutionUnitUpdate {
	return euu.SetParentID(e.ID)
}

// AddChildIDs adds the "children" edge to the ExecutionUnit entity by IDs.
func (euu *ExecutionUnitUpdate) AddChildIDs(ids ...string) *ExecutionUnitUpdate {
	euu.mutation.AddChildIDs(ids...)
	return euu
}

// AddChildren adds the "children" edges to the ExecutionUnit entity.
func (euu *ExecutionUnitUpdate) AddChildren(e ...*ExecutionUnit) *ExecutionUnitUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.AddChildIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (euu *ExecutionUnitUpdate) AddTaskIDs(ids ...string) *ExecutionUnitUpdate {
	euu.mutation.AddTaskIDs(ids...)
	return euu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (euu *ExecutionUnitUpdate) AddTasks(t ...*Task) *ExecutionUnitUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euu.AddTaskIDs(ids...)
}

// AddSagaTransactionIDs adds the "saga_transactions" edge to the SagaTransaction entity by IDs.
func (euu *ExecutionUnitUpdate) AddSagaTransactionIDs(ids ...string) *ExecutionUnitUpdate {
	euu.mutation.AddSagaTransactionIDs(ids...)
	return euu
}

// AddSagaTransactions adds the "saga_transactions" edges to the SagaTransaction entity.
func (euu *ExecutionUnitUpdate) AddSagaTransactions(s ...*SagaTransaction) *ExecutionUnitUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euu.AddSagaTransactionIDs(ids...)
}

// AddSagaCompensationIDs adds the "saga_compensations" edge to the SagaCompensation entity by IDs.
func (euu *ExecutionUnitUpdate) AddSagaCompensationIDs(ids ...string) *ExecutionUnitUpdate {
	euu.mutation.AddSagaCompensationIDs(ids...)
	return euu
}

// AddSagaCompensations adds the "saga_compensations" edges to the SagaCompensation entity.
func (euu *ExecutionUnitUpdate) AddSagaCompensations(s ...*SagaCompensation) *ExecutionUnitUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euu.AddSagaCompensationIDs(ids...)
}

// Mutation returns the ExecutionUnitMutation object of the builder.
func (euu *ExecutionUnitUpdate) Mutation() *ExecutionUnitMutation {
	return euu.mutation
}

// ClearExecutionContext clears the "execution_context" edge to the ExecutionContext entity.
func (euu *ExecutionUnitUpdate) ClearExecutionContext() *ExecutionUnitUpdate {
	euu.mutation.ClearExecutionContext()
	return euu
}

// ClearParent clears the "parent" edge to the ExecutionUnit entity.
func (euu *ExecutionUnitUpdate) ClearParent() *ExecutionUnitUpdate {
	euu.mutation.ClearParent()
	return euu
}

// ClearChildren clears all "children" edges to the ExecutionUnit entity.
func (euu *ExecutionUnitUpdate) ClearChildren() *ExecutionUnitUpdate {
	euu.mutation.ClearChildren()
	return euu
}

// RemoveChildIDs removes the "children" edge to ExecutionUnit entities by IDs.
func (euu *ExecutionUnitUpdate) RemoveChildIDs(ids ...string) *ExecutionUnitUpdate {
	euu.mutation.RemoveChildIDs(ids...)
	return euu
}

// RemoveChildren removes "children" edges to ExecutionUnit entities.
func (euu *ExecutionUnitUpdate) RemoveChildren(e ...*ExecutionUnit) *ExecutionUnitUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.RemoveChildIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (euu *ExecutionUnitUpdate) ClearTasks() *ExecutionUnitUpdate {
	euu.mutation.ClearTasks()
	return euu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (euu *ExecutionUnitUpdate) RemoveTaskIDs(ids ...string) *ExecutionUnitUpdate {
	euu.mutation.RemoveTaskIDs(ids...)
	return euu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (euu *ExecutionUnitUpdate) RemoveTasks(t ...*Task) *ExecutionUnitUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euu.RemoveTaskIDs(ids...)
}

// ClearSagaTransactions clears all "saga_transactions" edges to the SagaTransaction entity.
func (euu *ExecutionUnitUpdate) ClearSagaTransactions() *ExecutionUnitUpdate {
	euu.mutation.ClearSagaTransactions()
	return euu
}

// RemoveSagaTransactionIDs removes the "saga_transactions" edge to SagaTransaction entities by IDs.
func (euu *ExecutionUnitUpdate) RemoveSagaTransactionIDs(ids ...string) *ExecutionUnitUpdate {
	euu.mutation.RemoveSagaTransactionIDs(ids...)
	return euu
}

// RemoveSagaTransactions removes "saga_transactions" edges to SagaTransaction entities.
func (euu *ExecutionUnitUpdate) RemoveSagaTransactions(s ...*SagaTransaction) *ExecutionUnitUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euu.RemoveSagaTransactionIDs(ids...)
}

// ClearSagaCompensations clears all "saga_compensations" edges to the SagaCompensation entity.
func (euu *ExecutionUnitUpdate) ClearSagaCompensations() *ExecutionUnitUpdate {
	euu.mutation.ClearSagaCompensations()
	return euu
}

// RemoveSagaCompensationIDs removes the "saga_compensations" edge to SagaCompensation entities by IDs.
func (euu *ExecutionUnitUpdate) RemoveSagaCompensationIDs(ids ...string) *ExecutionUnitUpdate {
	euu.mutation.RemoveSagaCompensationIDs(ids...)
	return euu
}

// RemoveSagaCompensations removes "saga_compensations" edges to SagaCompensation entities.
func (euu *ExecutionUnitUpdate) RemoveSagaCompensations(s ...*SagaCompensation) *ExecutionUnitUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euu.RemoveSagaCompensationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (euu *ExecutionUnitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, euu.sqlSave, euu.mutation, euu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euu *ExecutionUnitUpdate) SaveX(ctx context.Context) int {
	affected, err := euu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (euu *ExecutionUnitUpdate) Exec(ctx context.Context) error {
	_, err := euu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euu *ExecutionUnitUpdate) ExecX(ctx context.Context) {
	if err := euu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euu *ExecutionUnitUpdate) check() error {
	if v, ok := euu.mutation.GetType(); ok {
		if err := executionunit.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ExecutionUnit.type": %w`, err)}
		}
	}
	if v, ok := euu.mutation.Status(); ok {
		if err := executionunit.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ExecutionUnit.status": %w`, err)}
		}
	}
	return nil
}

func (euu *ExecutionUnitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := euu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(executionunit.Table, executionunit.Columns, sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString))
	if ps := euu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euu.mutation.GetType(); ok {
		_spec.SetField(executionunit.FieldType, field.TypeEnum, value)
	}
	if value, ok := euu.mutation.Status(); ok {
		_spec.SetField(executionunit.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := euu.mutation.StartTime(); ok {
		_spec.SetField(executionunit.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := euu.mutation.EndTime(); ok {
		_spec.SetField(executionunit.FieldEndTime, field.TypeTime, value)
	}
	if euu.mutation.EndTimeCleared() {
		_spec.ClearField(executionunit.FieldEndTime, field.TypeTime)
	}
	if value, ok := euu.mutation.RetryCount(); ok {
		_spec.SetField(executionunit.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := euu.mutation.AddedRetryCount(); ok {
		_spec.AddField(executionunit.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := euu.mutation.MaxRetries(); ok {
		_spec.SetField(executionunit.FieldMaxRetries, field.TypeInt, value)
	}
	if value, ok := euu.mutation.AddedMaxRetries(); ok {
		_spec.AddField(executionunit.FieldMaxRetries, field.TypeInt, value)
	}
	if euu.mutation.ExecutionContextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   executionunit.ExecutionContextTable,
			Columns: []string{executionunit.ExecutionContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.ExecutionContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   executionunit.ExecutionContextTable,
			Columns: []string{executionunit.ExecutionContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   executionunit.ParentTable,
			Columns: []string{executionunit.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   executionunit.ParentTable,
			Columns: []string{executionunit.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.ChildrenTable,
			Columns: []string{executionunit.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !euu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.ChildrenTable,
			Columns: []string{executionunit.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.ChildrenTable,
			Columns: []string{executionunit.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.TasksTable,
			Columns: []string{executionunit.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !euu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.TasksTable,
			Columns: []string{executionunit.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.TasksTable,
			Columns: []string{executionunit.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.SagaTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.SagaTransactionsTable,
			Columns: []string{executionunit.SagaTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagatransaction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedSagaTransactionsIDs(); len(nodes) > 0 && !euu.mutation.SagaTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.SagaTransactionsTable,
			Columns: []string{executionunit.SagaTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagatransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.SagaTransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.SagaTransactionsTable,
			Columns: []string{executionunit.SagaTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagatransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euu.mutation.SagaCompensationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.SagaCompensationsTable,
			Columns: []string{executionunit.SagaCompensationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagacompensation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedSagaCompensationsIDs(); len(nodes) > 0 && !euu.mutation.SagaCompensationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.SagaCompensationsTable,
			Columns: []string{executionunit.SagaCompensationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagacompensation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.SagaCompensationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.SagaCompensationsTable,
			Columns: []string{executionunit.SagaCompensationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagacompensation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, euu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{executionunit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	euu.mutation.done = true
	return n, nil
}

// ExecutionUnitUpdateOne is the builder for updating a single ExecutionUnit entity.
type ExecutionUnitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExecutionUnitMutation
}

// SetType sets the "type" field.
func (euuo *ExecutionUnitUpdateOne) SetType(e executionunit.Type) *ExecutionUnitUpdateOne {
	euuo.mutation.SetType(e)
	return euuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (euuo *ExecutionUnitUpdateOne) SetNillableType(e *executionunit.Type) *ExecutionUnitUpdateOne {
	if e != nil {
		euuo.SetType(*e)
	}
	return euuo
}

// SetStatus sets the "status" field.
func (euuo *ExecutionUnitUpdateOne) SetStatus(e executionunit.Status) *ExecutionUnitUpdateOne {
	euuo.mutation.SetStatus(e)
	return euuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euuo *ExecutionUnitUpdateOne) SetNillableStatus(e *executionunit.Status) *ExecutionUnitUpdateOne {
	if e != nil {
		euuo.SetStatus(*e)
	}
	return euuo
}

// SetStartTime sets the "start_time" field.
func (euuo *ExecutionUnitUpdateOne) SetStartTime(t time.Time) *ExecutionUnitUpdateOne {
	euuo.mutation.SetStartTime(t)
	return euuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (euuo *ExecutionUnitUpdateOne) SetNillableStartTime(t *time.Time) *ExecutionUnitUpdateOne {
	if t != nil {
		euuo.SetStartTime(*t)
	}
	return euuo
}

// SetEndTime sets the "end_time" field.
func (euuo *ExecutionUnitUpdateOne) SetEndTime(t time.Time) *ExecutionUnitUpdateOne {
	euuo.mutation.SetEndTime(t)
	return euuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (euuo *ExecutionUnitUpdateOne) SetNillableEndTime(t *time.Time) *ExecutionUnitUpdateOne {
	if t != nil {
		euuo.SetEndTime(*t)
	}
	return euuo
}

// ClearEndTime clears the value of the "end_time" field.
func (euuo *ExecutionUnitUpdateOne) ClearEndTime() *ExecutionUnitUpdateOne {
	euuo.mutation.ClearEndTime()
	return euuo
}

// SetRetryCount sets the "retry_count" field.
func (euuo *ExecutionUnitUpdateOne) SetRetryCount(i int) *ExecutionUnitUpdateOne {
	euuo.mutation.ResetRetryCount()
	euuo.mutation.SetRetryCount(i)
	return euuo
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (euuo *ExecutionUnitUpdateOne) SetNillableRetryCount(i *int) *ExecutionUnitUpdateOne {
	if i != nil {
		euuo.SetRetryCount(*i)
	}
	return euuo
}

// AddRetryCount adds i to the "retry_count" field.
func (euuo *ExecutionUnitUpdateOne) AddRetryCount(i int) *ExecutionUnitUpdateOne {
	euuo.mutation.AddRetryCount(i)
	return euuo
}

// SetMaxRetries sets the "max_retries" field.
func (euuo *ExecutionUnitUpdateOne) SetMaxRetries(i int) *ExecutionUnitUpdateOne {
	euuo.mutation.ResetMaxRetries()
	euuo.mutation.SetMaxRetries(i)
	return euuo
}

// SetNillableMaxRetries sets the "max_retries" field if the given value is not nil.
func (euuo *ExecutionUnitUpdateOne) SetNillableMaxRetries(i *int) *ExecutionUnitUpdateOne {
	if i != nil {
		euuo.SetMaxRetries(*i)
	}
	return euuo
}

// AddMaxRetries adds i to the "max_retries" field.
func (euuo *ExecutionUnitUpdateOne) AddMaxRetries(i int) *ExecutionUnitUpdateOne {
	euuo.mutation.AddMaxRetries(i)
	return euuo
}

// SetExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID.
func (euuo *ExecutionUnitUpdateOne) SetExecutionContextID(id string) *ExecutionUnitUpdateOne {
	euuo.mutation.SetExecutionContextID(id)
	return euuo
}

// SetNillableExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID if the given value is not nil.
func (euuo *ExecutionUnitUpdateOne) SetNillableExecutionContextID(id *string) *ExecutionUnitUpdateOne {
	if id != nil {
		euuo = euuo.SetExecutionContextID(*id)
	}
	return euuo
}

// SetExecutionContext sets the "execution_context" edge to the ExecutionContext entity.
func (euuo *ExecutionUnitUpdateOne) SetExecutionContext(e *ExecutionContext) *ExecutionUnitUpdateOne {
	return euuo.SetExecutionContextID(e.ID)
}

// SetParentID sets the "parent" edge to the ExecutionUnit entity by ID.
func (euuo *ExecutionUnitUpdateOne) SetParentID(id string) *ExecutionUnitUpdateOne {
	euuo.mutation.SetParentID(id)
	return euuo
}

// SetNillableParentID sets the "parent" edge to the ExecutionUnit entity by ID if the given value is not nil.
func (euuo *ExecutionUnitUpdateOne) SetNillableParentID(id *string) *ExecutionUnitUpdateOne {
	if id != nil {
		euuo = euuo.SetParentID(*id)
	}
	return euuo
}

// SetParent sets the "parent" edge to the ExecutionUnit entity.
func (euuo *ExecutionUnitUpdateOne) SetParent(e *ExecutionUnit) *ExecutionUnitUpdateOne {
	return euuo.SetParentID(e.ID)
}

// AddChildIDs adds the "children" edge to the ExecutionUnit entity by IDs.
func (euuo *ExecutionUnitUpdateOne) AddChildIDs(ids ...string) *ExecutionUnitUpdateOne {
	euuo.mutation.AddChildIDs(ids...)
	return euuo
}

// AddChildren adds the "children" edges to the ExecutionUnit entity.
func (euuo *ExecutionUnitUpdateOne) AddChildren(e ...*ExecutionUnit) *ExecutionUnitUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.AddChildIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (euuo *ExecutionUnitUpdateOne) AddTaskIDs(ids ...string) *ExecutionUnitUpdateOne {
	euuo.mutation.AddTaskIDs(ids...)
	return euuo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (euuo *ExecutionUnitUpdateOne) AddTasks(t ...*Task) *ExecutionUnitUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euuo.AddTaskIDs(ids...)
}

// AddSagaTransactionIDs adds the "saga_transactions" edge to the SagaTransaction entity by IDs.
func (euuo *ExecutionUnitUpdateOne) AddSagaTransactionIDs(ids ...string) *ExecutionUnitUpdateOne {
	euuo.mutation.AddSagaTransactionIDs(ids...)
	return euuo
}

// AddSagaTransactions adds the "saga_transactions" edges to the SagaTransaction entity.
func (euuo *ExecutionUnitUpdateOne) AddSagaTransactions(s ...*SagaTransaction) *ExecutionUnitUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euuo.AddSagaTransactionIDs(ids...)
}

// AddSagaCompensationIDs adds the "saga_compensations" edge to the SagaCompensation entity by IDs.
func (euuo *ExecutionUnitUpdateOne) AddSagaCompensationIDs(ids ...string) *ExecutionUnitUpdateOne {
	euuo.mutation.AddSagaCompensationIDs(ids...)
	return euuo
}

// AddSagaCompensations adds the "saga_compensations" edges to the SagaCompensation entity.
func (euuo *ExecutionUnitUpdateOne) AddSagaCompensations(s ...*SagaCompensation) *ExecutionUnitUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euuo.AddSagaCompensationIDs(ids...)
}

// Mutation returns the ExecutionUnitMutation object of the builder.
func (euuo *ExecutionUnitUpdateOne) Mutation() *ExecutionUnitMutation {
	return euuo.mutation
}

// ClearExecutionContext clears the "execution_context" edge to the ExecutionContext entity.
func (euuo *ExecutionUnitUpdateOne) ClearExecutionContext() *ExecutionUnitUpdateOne {
	euuo.mutation.ClearExecutionContext()
	return euuo
}

// ClearParent clears the "parent" edge to the ExecutionUnit entity.
func (euuo *ExecutionUnitUpdateOne) ClearParent() *ExecutionUnitUpdateOne {
	euuo.mutation.ClearParent()
	return euuo
}

// ClearChildren clears all "children" edges to the ExecutionUnit entity.
func (euuo *ExecutionUnitUpdateOne) ClearChildren() *ExecutionUnitUpdateOne {
	euuo.mutation.ClearChildren()
	return euuo
}

// RemoveChildIDs removes the "children" edge to ExecutionUnit entities by IDs.
func (euuo *ExecutionUnitUpdateOne) RemoveChildIDs(ids ...string) *ExecutionUnitUpdateOne {
	euuo.mutation.RemoveChildIDs(ids...)
	return euuo
}

// RemoveChildren removes "children" edges to ExecutionUnit entities.
func (euuo *ExecutionUnitUpdateOne) RemoveChildren(e ...*ExecutionUnit) *ExecutionUnitUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.RemoveChildIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (euuo *ExecutionUnitUpdateOne) ClearTasks() *ExecutionUnitUpdateOne {
	euuo.mutation.ClearTasks()
	return euuo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (euuo *ExecutionUnitUpdateOne) RemoveTaskIDs(ids ...string) *ExecutionUnitUpdateOne {
	euuo.mutation.RemoveTaskIDs(ids...)
	return euuo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (euuo *ExecutionUnitUpdateOne) RemoveTasks(t ...*Task) *ExecutionUnitUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euuo.RemoveTaskIDs(ids...)
}

// ClearSagaTransactions clears all "saga_transactions" edges to the SagaTransaction entity.
func (euuo *ExecutionUnitUpdateOne) ClearSagaTransactions() *ExecutionUnitUpdateOne {
	euuo.mutation.ClearSagaTransactions()
	return euuo
}

// RemoveSagaTransactionIDs removes the "saga_transactions" edge to SagaTransaction entities by IDs.
func (euuo *ExecutionUnitUpdateOne) RemoveSagaTransactionIDs(ids ...string) *ExecutionUnitUpdateOne {
	euuo.mutation.RemoveSagaTransactionIDs(ids...)
	return euuo
}

// RemoveSagaTransactions removes "saga_transactions" edges to SagaTransaction entities.
func (euuo *ExecutionUnitUpdateOne) RemoveSagaTransactions(s ...*SagaTransaction) *ExecutionUnitUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euuo.RemoveSagaTransactionIDs(ids...)
}

// ClearSagaCompensations clears all "saga_compensations" edges to the SagaCompensation entity.
func (euuo *ExecutionUnitUpdateOne) ClearSagaCompensations() *ExecutionUnitUpdateOne {
	euuo.mutation.ClearSagaCompensations()
	return euuo
}

// RemoveSagaCompensationIDs removes the "saga_compensations" edge to SagaCompensation entities by IDs.
func (euuo *ExecutionUnitUpdateOne) RemoveSagaCompensationIDs(ids ...string) *ExecutionUnitUpdateOne {
	euuo.mutation.RemoveSagaCompensationIDs(ids...)
	return euuo
}

// RemoveSagaCompensations removes "saga_compensations" edges to SagaCompensation entities.
func (euuo *ExecutionUnitUpdateOne) RemoveSagaCompensations(s ...*SagaCompensation) *ExecutionUnitUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euuo.RemoveSagaCompensationIDs(ids...)
}

// Where appends a list predicates to the ExecutionUnitUpdate builder.
func (euuo *ExecutionUnitUpdateOne) Where(ps ...predicate.ExecutionUnit) *ExecutionUnitUpdateOne {
	euuo.mutation.Where(ps...)
	return euuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euuo *ExecutionUnitUpdateOne) Select(field string, fields ...string) *ExecutionUnitUpdateOne {
	euuo.fields = append([]string{field}, fields...)
	return euuo
}

// Save executes the query and returns the updated ExecutionUnit entity.
func (euuo *ExecutionUnitUpdateOne) Save(ctx context.Context) (*ExecutionUnit, error) {
	return withHooks(ctx, euuo.sqlSave, euuo.mutation, euuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euuo *ExecutionUnitUpdateOne) SaveX(ctx context.Context) *ExecutionUnit {
	node, err := euuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euuo *ExecutionUnitUpdateOne) Exec(ctx context.Context) error {
	_, err := euuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euuo *ExecutionUnitUpdateOne) ExecX(ctx context.Context) {
	if err := euuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euuo *ExecutionUnitUpdateOne) check() error {
	if v, ok := euuo.mutation.GetType(); ok {
		if err := executionunit.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ExecutionUnit.type": %w`, err)}
		}
	}
	if v, ok := euuo.mutation.Status(); ok {
		if err := executionunit.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ExecutionUnit.status": %w`, err)}
		}
	}
	return nil
}

func (euuo *ExecutionUnitUpdateOne) sqlSave(ctx context.Context) (_node *ExecutionUnit, err error) {
	if err := euuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(executionunit.Table, executionunit.Columns, sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString))
	id, ok := euuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExecutionUnit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, executionunit.FieldID)
		for _, f := range fields {
			if !executionunit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != executionunit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euuo.mutation.GetType(); ok {
		_spec.SetField(executionunit.FieldType, field.TypeEnum, value)
	}
	if value, ok := euuo.mutation.Status(); ok {
		_spec.SetField(executionunit.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := euuo.mutation.StartTime(); ok {
		_spec.SetField(executionunit.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := euuo.mutation.EndTime(); ok {
		_spec.SetField(executionunit.FieldEndTime, field.TypeTime, value)
	}
	if euuo.mutation.EndTimeCleared() {
		_spec.ClearField(executionunit.FieldEndTime, field.TypeTime)
	}
	if value, ok := euuo.mutation.RetryCount(); ok {
		_spec.SetField(executionunit.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := euuo.mutation.AddedRetryCount(); ok {
		_spec.AddField(executionunit.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := euuo.mutation.MaxRetries(); ok {
		_spec.SetField(executionunit.FieldMaxRetries, field.TypeInt, value)
	}
	if value, ok := euuo.mutation.AddedMaxRetries(); ok {
		_spec.AddField(executionunit.FieldMaxRetries, field.TypeInt, value)
	}
	if euuo.mutation.ExecutionContextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   executionunit.ExecutionContextTable,
			Columns: []string{executionunit.ExecutionContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.ExecutionContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   executionunit.ExecutionContextTable,
			Columns: []string{executionunit.ExecutionContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   executionunit.ParentTable,
			Columns: []string{executionunit.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   executionunit.ParentTable,
			Columns: []string{executionunit.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.ChildrenTable,
			Columns: []string{executionunit.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !euuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.ChildrenTable,
			Columns: []string{executionunit.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.ChildrenTable,
			Columns: []string{executionunit.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.TasksTable,
			Columns: []string{executionunit.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !euuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.TasksTable,
			Columns: []string{executionunit.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.TasksTable,
			Columns: []string{executionunit.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.SagaTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.SagaTransactionsTable,
			Columns: []string{executionunit.SagaTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagatransaction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedSagaTransactionsIDs(); len(nodes) > 0 && !euuo.mutation.SagaTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.SagaTransactionsTable,
			Columns: []string{executionunit.SagaTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagatransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.SagaTransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.SagaTransactionsTable,
			Columns: []string{executionunit.SagaTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagatransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euuo.mutation.SagaCompensationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.SagaCompensationsTable,
			Columns: []string{executionunit.SagaCompensationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagacompensation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedSagaCompensationsIDs(); len(nodes) > 0 && !euuo.mutation.SagaCompensationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.SagaCompensationsTable,
			Columns: []string{executionunit.SagaCompensationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagacompensation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.SagaCompensationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executionunit.SagaCompensationsTable,
			Columns: []string{executionunit.SagaCompensationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagacompensation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExecutionUnit{config: euuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{executionunit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euuo.mutation.done = true
	return _node, nil
}
