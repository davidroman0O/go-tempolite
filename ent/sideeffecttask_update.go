// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/node"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/sideeffecttask"
)

// SideEffectTaskUpdate is the builder for updating SideEffectTask entities.
type SideEffectTaskUpdate struct {
	config
	hooks    []Hook
	mutation *SideEffectTaskMutation
}

// Where appends a list predicates to the SideEffectTaskUpdate builder.
func (setu *SideEffectTaskUpdate) Where(ps ...predicate.SideEffectTask) *SideEffectTaskUpdate {
	setu.mutation.Where(ps...)
	return setu
}

// SetNodeID sets the "node" edge to the Node entity by ID.
func (setu *SideEffectTaskUpdate) SetNodeID(id string) *SideEffectTaskUpdate {
	setu.mutation.SetNodeID(id)
	return setu
}

// SetNillableNodeID sets the "node" edge to the Node entity by ID if the given value is not nil.
func (setu *SideEffectTaskUpdate) SetNillableNodeID(id *string) *SideEffectTaskUpdate {
	if id != nil {
		setu = setu.SetNodeID(*id)
	}
	return setu
}

// SetNode sets the "node" edge to the Node entity.
func (setu *SideEffectTaskUpdate) SetNode(n *Node) *SideEffectTaskUpdate {
	return setu.SetNodeID(n.ID)
}

// Mutation returns the SideEffectTaskMutation object of the builder.
func (setu *SideEffectTaskUpdate) Mutation() *SideEffectTaskMutation {
	return setu.mutation
}

// ClearNode clears the "node" edge to the Node entity.
func (setu *SideEffectTaskUpdate) ClearNode() *SideEffectTaskUpdate {
	setu.mutation.ClearNode()
	return setu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (setu *SideEffectTaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, setu.sqlSave, setu.mutation, setu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (setu *SideEffectTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := setu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (setu *SideEffectTaskUpdate) Exec(ctx context.Context) error {
	_, err := setu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (setu *SideEffectTaskUpdate) ExecX(ctx context.Context) {
	if err := setu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (setu *SideEffectTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sideeffecttask.Table, sideeffecttask.Columns, sqlgraph.NewFieldSpec(sideeffecttask.FieldID, field.TypeInt))
	if ps := setu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if setu.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sideeffecttask.NodeTable,
			Columns: []string{sideeffecttask.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := setu.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sideeffecttask.NodeTable,
			Columns: []string{sideeffecttask.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, setu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sideeffecttask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	setu.mutation.done = true
	return n, nil
}

// SideEffectTaskUpdateOne is the builder for updating a single SideEffectTask entity.
type SideEffectTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SideEffectTaskMutation
}

// SetNodeID sets the "node" edge to the Node entity by ID.
func (setuo *SideEffectTaskUpdateOne) SetNodeID(id string) *SideEffectTaskUpdateOne {
	setuo.mutation.SetNodeID(id)
	return setuo
}

// SetNillableNodeID sets the "node" edge to the Node entity by ID if the given value is not nil.
func (setuo *SideEffectTaskUpdateOne) SetNillableNodeID(id *string) *SideEffectTaskUpdateOne {
	if id != nil {
		setuo = setuo.SetNodeID(*id)
	}
	return setuo
}

// SetNode sets the "node" edge to the Node entity.
func (setuo *SideEffectTaskUpdateOne) SetNode(n *Node) *SideEffectTaskUpdateOne {
	return setuo.SetNodeID(n.ID)
}

// Mutation returns the SideEffectTaskMutation object of the builder.
func (setuo *SideEffectTaskUpdateOne) Mutation() *SideEffectTaskMutation {
	return setuo.mutation
}

// ClearNode clears the "node" edge to the Node entity.
func (setuo *SideEffectTaskUpdateOne) ClearNode() *SideEffectTaskUpdateOne {
	setuo.mutation.ClearNode()
	return setuo
}

// Where appends a list predicates to the SideEffectTaskUpdate builder.
func (setuo *SideEffectTaskUpdateOne) Where(ps ...predicate.SideEffectTask) *SideEffectTaskUpdateOne {
	setuo.mutation.Where(ps...)
	return setuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (setuo *SideEffectTaskUpdateOne) Select(field string, fields ...string) *SideEffectTaskUpdateOne {
	setuo.fields = append([]string{field}, fields...)
	return setuo
}

// Save executes the query and returns the updated SideEffectTask entity.
func (setuo *SideEffectTaskUpdateOne) Save(ctx context.Context) (*SideEffectTask, error) {
	return withHooks(ctx, setuo.sqlSave, setuo.mutation, setuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (setuo *SideEffectTaskUpdateOne) SaveX(ctx context.Context) *SideEffectTask {
	node, err := setuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (setuo *SideEffectTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := setuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (setuo *SideEffectTaskUpdateOne) ExecX(ctx context.Context) {
	if err := setuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (setuo *SideEffectTaskUpdateOne) sqlSave(ctx context.Context) (_node *SideEffectTask, err error) {
	_spec := sqlgraph.NewUpdateSpec(sideeffecttask.Table, sideeffecttask.Columns, sqlgraph.NewFieldSpec(sideeffecttask.FieldID, field.TypeInt))
	id, ok := setuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SideEffectTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := setuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sideeffecttask.FieldID)
		for _, f := range fields {
			if !sideeffecttask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sideeffecttask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := setuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if setuo.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sideeffecttask.NodeTable,
			Columns: []string{sideeffecttask.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := setuo.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sideeffecttask.NodeTable,
			Columns: []string{sideeffecttask.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SideEffectTask{config: setuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, setuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sideeffecttask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	setuo.mutation.done = true
	return _node, nil
}
