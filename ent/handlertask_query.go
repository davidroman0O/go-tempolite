// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/handlertask"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/taskcontext"
)

// HandlerTaskQuery is the builder for querying HandlerTask entities.
type HandlerTaskQuery struct {
	config
	ctx                  *QueryContext
	order                []handlertask.OrderOption
	inters               []Interceptor
	predicates           []predicate.HandlerTask
	withTaskContext      *TaskContextQuery
	withExecutionContext *ExecutionContextQuery
	withFKs              bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HandlerTaskQuery builder.
func (htq *HandlerTaskQuery) Where(ps ...predicate.HandlerTask) *HandlerTaskQuery {
	htq.predicates = append(htq.predicates, ps...)
	return htq
}

// Limit the number of records to be returned by this query.
func (htq *HandlerTaskQuery) Limit(limit int) *HandlerTaskQuery {
	htq.ctx.Limit = &limit
	return htq
}

// Offset to start from.
func (htq *HandlerTaskQuery) Offset(offset int) *HandlerTaskQuery {
	htq.ctx.Offset = &offset
	return htq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (htq *HandlerTaskQuery) Unique(unique bool) *HandlerTaskQuery {
	htq.ctx.Unique = &unique
	return htq
}

// Order specifies how the records should be ordered.
func (htq *HandlerTaskQuery) Order(o ...handlertask.OrderOption) *HandlerTaskQuery {
	htq.order = append(htq.order, o...)
	return htq
}

// QueryTaskContext chains the current query on the "task_context" edge.
func (htq *HandlerTaskQuery) QueryTaskContext() *TaskContextQuery {
	query := (&TaskContextClient{config: htq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(handlertask.Table, handlertask.FieldID, selector),
			sqlgraph.To(taskcontext.Table, taskcontext.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, handlertask.TaskContextTable, handlertask.TaskContextColumn),
		)
		fromU = sqlgraph.SetNeighbors(htq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExecutionContext chains the current query on the "execution_context" edge.
func (htq *HandlerTaskQuery) QueryExecutionContext() *ExecutionContextQuery {
	query := (&ExecutionContextClient{config: htq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(handlertask.Table, handlertask.FieldID, selector),
			sqlgraph.To(executioncontext.Table, executioncontext.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, handlertask.ExecutionContextTable, handlertask.ExecutionContextColumn),
		)
		fromU = sqlgraph.SetNeighbors(htq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HandlerTask entity from the query.
// Returns a *NotFoundError when no HandlerTask was found.
func (htq *HandlerTaskQuery) First(ctx context.Context) (*HandlerTask, error) {
	nodes, err := htq.Limit(1).All(setContextOp(ctx, htq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{handlertask.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (htq *HandlerTaskQuery) FirstX(ctx context.Context) *HandlerTask {
	node, err := htq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HandlerTask ID from the query.
// Returns a *NotFoundError when no HandlerTask ID was found.
func (htq *HandlerTaskQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = htq.Limit(1).IDs(setContextOp(ctx, htq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{handlertask.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (htq *HandlerTaskQuery) FirstIDX(ctx context.Context) string {
	id, err := htq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HandlerTask entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HandlerTask entity is found.
// Returns a *NotFoundError when no HandlerTask entities are found.
func (htq *HandlerTaskQuery) Only(ctx context.Context) (*HandlerTask, error) {
	nodes, err := htq.Limit(2).All(setContextOp(ctx, htq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{handlertask.Label}
	default:
		return nil, &NotSingularError{handlertask.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (htq *HandlerTaskQuery) OnlyX(ctx context.Context) *HandlerTask {
	node, err := htq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HandlerTask ID in the query.
// Returns a *NotSingularError when more than one HandlerTask ID is found.
// Returns a *NotFoundError when no entities are found.
func (htq *HandlerTaskQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = htq.Limit(2).IDs(setContextOp(ctx, htq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{handlertask.Label}
	default:
		err = &NotSingularError{handlertask.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (htq *HandlerTaskQuery) OnlyIDX(ctx context.Context) string {
	id, err := htq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HandlerTasks.
func (htq *HandlerTaskQuery) All(ctx context.Context) ([]*HandlerTask, error) {
	ctx = setContextOp(ctx, htq.ctx, ent.OpQueryAll)
	if err := htq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HandlerTask, *HandlerTaskQuery]()
	return withInterceptors[[]*HandlerTask](ctx, htq, qr, htq.inters)
}

// AllX is like All, but panics if an error occurs.
func (htq *HandlerTaskQuery) AllX(ctx context.Context) []*HandlerTask {
	nodes, err := htq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HandlerTask IDs.
func (htq *HandlerTaskQuery) IDs(ctx context.Context) (ids []string, err error) {
	if htq.ctx.Unique == nil && htq.path != nil {
		htq.Unique(true)
	}
	ctx = setContextOp(ctx, htq.ctx, ent.OpQueryIDs)
	if err = htq.Select(handlertask.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (htq *HandlerTaskQuery) IDsX(ctx context.Context) []string {
	ids, err := htq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (htq *HandlerTaskQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, htq.ctx, ent.OpQueryCount)
	if err := htq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, htq, querierCount[*HandlerTaskQuery](), htq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (htq *HandlerTaskQuery) CountX(ctx context.Context) int {
	count, err := htq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (htq *HandlerTaskQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, htq.ctx, ent.OpQueryExist)
	switch _, err := htq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (htq *HandlerTaskQuery) ExistX(ctx context.Context) bool {
	exist, err := htq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HandlerTaskQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (htq *HandlerTaskQuery) Clone() *HandlerTaskQuery {
	if htq == nil {
		return nil
	}
	return &HandlerTaskQuery{
		config:               htq.config,
		ctx:                  htq.ctx.Clone(),
		order:                append([]handlertask.OrderOption{}, htq.order...),
		inters:               append([]Interceptor{}, htq.inters...),
		predicates:           append([]predicate.HandlerTask{}, htq.predicates...),
		withTaskContext:      htq.withTaskContext.Clone(),
		withExecutionContext: htq.withExecutionContext.Clone(),
		// clone intermediate query.
		sql:  htq.sql.Clone(),
		path: htq.path,
	}
}

// WithTaskContext tells the query-builder to eager-load the nodes that are connected to
// the "task_context" edge. The optional arguments are used to configure the query builder of the edge.
func (htq *HandlerTaskQuery) WithTaskContext(opts ...func(*TaskContextQuery)) *HandlerTaskQuery {
	query := (&TaskContextClient{config: htq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	htq.withTaskContext = query
	return htq
}

// WithExecutionContext tells the query-builder to eager-load the nodes that are connected to
// the "execution_context" edge. The optional arguments are used to configure the query builder of the edge.
func (htq *HandlerTaskQuery) WithExecutionContext(opts ...func(*ExecutionContextQuery)) *HandlerTaskQuery {
	query := (&ExecutionContextClient{config: htq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	htq.withExecutionContext = query
	return htq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HandlerName string `json:"handlerName,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HandlerTask.Query().
//		GroupBy(handlertask.FieldHandlerName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (htq *HandlerTaskQuery) GroupBy(field string, fields ...string) *HandlerTaskGroupBy {
	htq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HandlerTaskGroupBy{build: htq}
	grbuild.flds = &htq.ctx.Fields
	grbuild.label = handlertask.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HandlerName string `json:"handlerName,omitempty"`
//	}
//
//	client.HandlerTask.Query().
//		Select(handlertask.FieldHandlerName).
//		Scan(ctx, &v)
func (htq *HandlerTaskQuery) Select(fields ...string) *HandlerTaskSelect {
	htq.ctx.Fields = append(htq.ctx.Fields, fields...)
	sbuild := &HandlerTaskSelect{HandlerTaskQuery: htq}
	sbuild.label = handlertask.Label
	sbuild.flds, sbuild.scan = &htq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HandlerTaskSelect configured with the given aggregations.
func (htq *HandlerTaskQuery) Aggregate(fns ...AggregateFunc) *HandlerTaskSelect {
	return htq.Select().Aggregate(fns...)
}

func (htq *HandlerTaskQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range htq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, htq); err != nil {
				return err
			}
		}
	}
	for _, f := range htq.ctx.Fields {
		if !handlertask.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if htq.path != nil {
		prev, err := htq.path(ctx)
		if err != nil {
			return err
		}
		htq.sql = prev
	}
	return nil
}

func (htq *HandlerTaskQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HandlerTask, error) {
	var (
		nodes       = []*HandlerTask{}
		withFKs     = htq.withFKs
		_spec       = htq.querySpec()
		loadedTypes = [2]bool{
			htq.withTaskContext != nil,
			htq.withExecutionContext != nil,
		}
	)
	if htq.withTaskContext != nil || htq.withExecutionContext != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, handlertask.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HandlerTask).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HandlerTask{config: htq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, htq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := htq.withTaskContext; query != nil {
		if err := htq.loadTaskContext(ctx, query, nodes, nil,
			func(n *HandlerTask, e *TaskContext) { n.Edges.TaskContext = e }); err != nil {
			return nil, err
		}
	}
	if query := htq.withExecutionContext; query != nil {
		if err := htq.loadExecutionContext(ctx, query, nodes, nil,
			func(n *HandlerTask, e *ExecutionContext) { n.Edges.ExecutionContext = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (htq *HandlerTaskQuery) loadTaskContext(ctx context.Context, query *TaskContextQuery, nodes []*HandlerTask, init func(*HandlerTask), assign func(*HandlerTask, *TaskContext)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*HandlerTask)
	for i := range nodes {
		if nodes[i].handler_task_task_context == nil {
			continue
		}
		fk := *nodes[i].handler_task_task_context
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(taskcontext.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "handler_task_task_context" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (htq *HandlerTaskQuery) loadExecutionContext(ctx context.Context, query *ExecutionContextQuery, nodes []*HandlerTask, init func(*HandlerTask), assign func(*HandlerTask, *ExecutionContext)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*HandlerTask)
	for i := range nodes {
		if nodes[i].handler_task_execution_context == nil {
			continue
		}
		fk := *nodes[i].handler_task_execution_context
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(executioncontext.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "handler_task_execution_context" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (htq *HandlerTaskQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := htq.querySpec()
	_spec.Node.Columns = htq.ctx.Fields
	if len(htq.ctx.Fields) > 0 {
		_spec.Unique = htq.ctx.Unique != nil && *htq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, htq.driver, _spec)
}

func (htq *HandlerTaskQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(handlertask.Table, handlertask.Columns, sqlgraph.NewFieldSpec(handlertask.FieldID, field.TypeString))
	_spec.From = htq.sql
	if unique := htq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if htq.path != nil {
		_spec.Unique = true
	}
	if fields := htq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, handlertask.FieldID)
		for i := range fields {
			if fields[i] != handlertask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := htq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := htq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := htq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := htq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (htq *HandlerTaskQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(htq.driver.Dialect())
	t1 := builder.Table(handlertask.Table)
	columns := htq.ctx.Fields
	if len(columns) == 0 {
		columns = handlertask.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if htq.sql != nil {
		selector = htq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if htq.ctx.Unique != nil && *htq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range htq.predicates {
		p(selector)
	}
	for _, p := range htq.order {
		p(selector)
	}
	if offset := htq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := htq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HandlerTaskGroupBy is the group-by builder for HandlerTask entities.
type HandlerTaskGroupBy struct {
	selector
	build *HandlerTaskQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (htgb *HandlerTaskGroupBy) Aggregate(fns ...AggregateFunc) *HandlerTaskGroupBy {
	htgb.fns = append(htgb.fns, fns...)
	return htgb
}

// Scan applies the selector query and scans the result into the given value.
func (htgb *HandlerTaskGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, htgb.build.ctx, ent.OpQueryGroupBy)
	if err := htgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HandlerTaskQuery, *HandlerTaskGroupBy](ctx, htgb.build, htgb, htgb.build.inters, v)
}

func (htgb *HandlerTaskGroupBy) sqlScan(ctx context.Context, root *HandlerTaskQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(htgb.fns))
	for _, fn := range htgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*htgb.flds)+len(htgb.fns))
		for _, f := range *htgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*htgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := htgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HandlerTaskSelect is the builder for selecting fields of HandlerTask entities.
type HandlerTaskSelect struct {
	*HandlerTaskQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hts *HandlerTaskSelect) Aggregate(fns ...AggregateFunc) *HandlerTaskSelect {
	hts.fns = append(hts.fns, fns...)
	return hts
}

// Scan applies the selector query and scans the result into the given value.
func (hts *HandlerTaskSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hts.ctx, ent.OpQuerySelect)
	if err := hts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HandlerTaskQuery, *HandlerTaskSelect](ctx, hts.HandlerTaskQuery, hts, hts.inters, v)
}

func (hts *HandlerTaskSelect) sqlScan(ctx context.Context, root *HandlerTaskQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hts.fns))
	for _, fn := range hts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
