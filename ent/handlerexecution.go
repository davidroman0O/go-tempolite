// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/handlerexecution"
	"github.com/davidroman0O/go-tempolite/ent/sagastepexecution"
)

// HandlerExecution is the model entity for the HandlerExecution schema.
type HandlerExecution struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// RunID holds the value of the "run_id" field.
	RunID string `json:"run_id,omitempty"`
	// HandlerName holds the value of the "handler_name" field.
	HandlerName string `json:"handler_name,omitempty"`
	// Status holds the value of the "status" field.
	Status handlerexecution.Status `json:"status,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// RetryCount holds the value of the "retry_count" field.
	RetryCount int `json:"retry_count,omitempty"`
	// MaxRetries holds the value of the "max_retries" field.
	MaxRetries int `json:"max_retries,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HandlerExecutionQuery when eager-loading is set.
	Edges                                 HandlerExecutionEdges `json:"edges"`
	execution_context_handler_executions  *string
	handler_execution_children            *string
	handler_execution_saga_step_execution *string
	selectValues                          sql.SelectValues
}

// HandlerExecutionEdges holds the relations/edges for other nodes in the graph.
type HandlerExecutionEdges struct {
	// ExecutionContext holds the value of the execution_context edge.
	ExecutionContext *ExecutionContext `json:"execution_context,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *HandlerExecution `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*HandlerExecution `json:"children,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*HandlerTask `json:"tasks,omitempty"`
	// SagaStepExecution holds the value of the saga_step_execution edge.
	SagaStepExecution *SagaStepExecution `json:"saga_step_execution,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ExecutionContextOrErr returns the ExecutionContext value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HandlerExecutionEdges) ExecutionContextOrErr() (*ExecutionContext, error) {
	if e.ExecutionContext != nil {
		return e.ExecutionContext, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: executioncontext.Label}
	}
	return nil, &NotLoadedError{edge: "execution_context"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HandlerExecutionEdges) ParentOrErr() (*HandlerExecution, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: handlerexecution.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e HandlerExecutionEdges) ChildrenOrErr() ([]*HandlerExecution, error) {
	if e.loadedTypes[2] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e HandlerExecutionEdges) TasksOrErr() ([]*HandlerTask, error) {
	if e.loadedTypes[3] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// SagaStepExecutionOrErr returns the SagaStepExecution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HandlerExecutionEdges) SagaStepExecutionOrErr() (*SagaStepExecution, error) {
	if e.SagaStepExecution != nil {
		return e.SagaStepExecution, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: sagastepexecution.Label}
	}
	return nil, &NotLoadedError{edge: "saga_step_execution"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HandlerExecution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case handlerexecution.FieldRetryCount, handlerexecution.FieldMaxRetries:
			values[i] = new(sql.NullInt64)
		case handlerexecution.FieldID, handlerexecution.FieldRunID, handlerexecution.FieldHandlerName, handlerexecution.FieldStatus:
			values[i] = new(sql.NullString)
		case handlerexecution.FieldStartTime, handlerexecution.FieldEndTime:
			values[i] = new(sql.NullTime)
		case handlerexecution.ForeignKeys[0]: // execution_context_handler_executions
			values[i] = new(sql.NullString)
		case handlerexecution.ForeignKeys[1]: // handler_execution_children
			values[i] = new(sql.NullString)
		case handlerexecution.ForeignKeys[2]: // handler_execution_saga_step_execution
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HandlerExecution fields.
func (he *HandlerExecution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case handlerexecution.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				he.ID = value.String
			}
		case handlerexecution.FieldRunID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field run_id", values[i])
			} else if value.Valid {
				he.RunID = value.String
			}
		case handlerexecution.FieldHandlerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handler_name", values[i])
			} else if value.Valid {
				he.HandlerName = value.String
			}
		case handlerexecution.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				he.Status = handlerexecution.Status(value.String)
			}
		case handlerexecution.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				he.StartTime = value.Time
			}
		case handlerexecution.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				he.EndTime = value.Time
			}
		case handlerexecution.FieldRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retry_count", values[i])
			} else if value.Valid {
				he.RetryCount = int(value.Int64)
			}
		case handlerexecution.FieldMaxRetries:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_retries", values[i])
			} else if value.Valid {
				he.MaxRetries = int(value.Int64)
			}
		case handlerexecution.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field execution_context_handler_executions", values[i])
			} else if value.Valid {
				he.execution_context_handler_executions = new(string)
				*he.execution_context_handler_executions = value.String
			}
		case handlerexecution.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handler_execution_children", values[i])
			} else if value.Valid {
				he.handler_execution_children = new(string)
				*he.handler_execution_children = value.String
			}
		case handlerexecution.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handler_execution_saga_step_execution", values[i])
			} else if value.Valid {
				he.handler_execution_saga_step_execution = new(string)
				*he.handler_execution_saga_step_execution = value.String
			}
		default:
			he.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HandlerExecution.
// This includes values selected through modifiers, order, etc.
func (he *HandlerExecution) Value(name string) (ent.Value, error) {
	return he.selectValues.Get(name)
}

// QueryExecutionContext queries the "execution_context" edge of the HandlerExecution entity.
func (he *HandlerExecution) QueryExecutionContext() *ExecutionContextQuery {
	return NewHandlerExecutionClient(he.config).QueryExecutionContext(he)
}

// QueryParent queries the "parent" edge of the HandlerExecution entity.
func (he *HandlerExecution) QueryParent() *HandlerExecutionQuery {
	return NewHandlerExecutionClient(he.config).QueryParent(he)
}

// QueryChildren queries the "children" edge of the HandlerExecution entity.
func (he *HandlerExecution) QueryChildren() *HandlerExecutionQuery {
	return NewHandlerExecutionClient(he.config).QueryChildren(he)
}

// QueryTasks queries the "tasks" edge of the HandlerExecution entity.
func (he *HandlerExecution) QueryTasks() *HandlerTaskQuery {
	return NewHandlerExecutionClient(he.config).QueryTasks(he)
}

// QuerySagaStepExecution queries the "saga_step_execution" edge of the HandlerExecution entity.
func (he *HandlerExecution) QuerySagaStepExecution() *SagaStepExecutionQuery {
	return NewHandlerExecutionClient(he.config).QuerySagaStepExecution(he)
}

// Update returns a builder for updating this HandlerExecution.
// Note that you need to call HandlerExecution.Unwrap() before calling this method if this HandlerExecution
// was returned from a transaction, and the transaction was committed or rolled back.
func (he *HandlerExecution) Update() *HandlerExecutionUpdateOne {
	return NewHandlerExecutionClient(he.config).UpdateOne(he)
}

// Unwrap unwraps the HandlerExecution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (he *HandlerExecution) Unwrap() *HandlerExecution {
	_tx, ok := he.config.driver.(*txDriver)
	if !ok {
		panic("ent: HandlerExecution is not a transactional entity")
	}
	he.config.driver = _tx.drv
	return he
}

// String implements the fmt.Stringer.
func (he *HandlerExecution) String() string {
	var builder strings.Builder
	builder.WriteString("HandlerExecution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", he.ID))
	builder.WriteString("run_id=")
	builder.WriteString(he.RunID)
	builder.WriteString(", ")
	builder.WriteString("handler_name=")
	builder.WriteString(he.HandlerName)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", he.Status))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(he.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(he.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("retry_count=")
	builder.WriteString(fmt.Sprintf("%v", he.RetryCount))
	builder.WriteString(", ")
	builder.WriteString("max_retries=")
	builder.WriteString(fmt.Sprintf("%v", he.MaxRetries))
	builder.WriteByte(')')
	return builder.String()
}

// HandlerExecutions is a parsable slice of HandlerExecution.
type HandlerExecutions []*HandlerExecution
