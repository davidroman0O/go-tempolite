// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
)

// ExecutionContext is the model entity for the ExecutionContext schema.
type ExecutionContext struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CurrentRunID holds the value of the "current_run_id" field.
	CurrentRunID string `json:"current_run_id,omitempty"`
	// Status holds the value of the "status" field.
	Status executioncontext.Status `json:"status,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExecutionContextQuery when eager-loading is set.
	Edges        ExecutionContextEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ExecutionContextEdges holds the relations/edges for other nodes in the graph.
type ExecutionContextEdges struct {
	// ExecutionUnits holds the value of the execution_units edge.
	ExecutionUnits []*ExecutionUnit `json:"execution_units,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ExecutionUnitsOrErr returns the ExecutionUnits value or an error if the edge
// was not loaded in eager-loading.
func (e ExecutionContextEdges) ExecutionUnitsOrErr() ([]*ExecutionUnit, error) {
	if e.loadedTypes[0] {
		return e.ExecutionUnits, nil
	}
	return nil, &NotLoadedError{edge: "execution_units"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExecutionContext) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case executioncontext.FieldID, executioncontext.FieldCurrentRunID, executioncontext.FieldStatus:
			values[i] = new(sql.NullString)
		case executioncontext.FieldStartTime, executioncontext.FieldEndTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExecutionContext fields.
func (ec *ExecutionContext) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case executioncontext.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ec.ID = value.String
			}
		case executioncontext.FieldCurrentRunID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_run_id", values[i])
			} else if value.Valid {
				ec.CurrentRunID = value.String
			}
		case executioncontext.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ec.Status = executioncontext.Status(value.String)
			}
		case executioncontext.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				ec.StartTime = value.Time
			}
		case executioncontext.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				ec.EndTime = value.Time
			}
		default:
			ec.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExecutionContext.
// This includes values selected through modifiers, order, etc.
func (ec *ExecutionContext) Value(name string) (ent.Value, error) {
	return ec.selectValues.Get(name)
}

// QueryExecutionUnits queries the "execution_units" edge of the ExecutionContext entity.
func (ec *ExecutionContext) QueryExecutionUnits() *ExecutionUnitQuery {
	return NewExecutionContextClient(ec.config).QueryExecutionUnits(ec)
}

// Update returns a builder for updating this ExecutionContext.
// Note that you need to call ExecutionContext.Unwrap() before calling this method if this ExecutionContext
// was returned from a transaction, and the transaction was committed or rolled back.
func (ec *ExecutionContext) Update() *ExecutionContextUpdateOne {
	return NewExecutionContextClient(ec.config).UpdateOne(ec)
}

// Unwrap unwraps the ExecutionContext entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ec *ExecutionContext) Unwrap() *ExecutionContext {
	_tx, ok := ec.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExecutionContext is not a transactional entity")
	}
	ec.config.driver = _tx.drv
	return ec
}

// String implements the fmt.Stringer.
func (ec *ExecutionContext) String() string {
	var builder strings.Builder
	builder.WriteString("ExecutionContext(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ec.ID))
	builder.WriteString("current_run_id=")
	builder.WriteString(ec.CurrentRunID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ec.Status))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(ec.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(ec.EndTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ExecutionContexts is a parsable slice of ExecutionContext.
type ExecutionContexts []*ExecutionContext
