// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/execution"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
)

// Execution is the model entity for the Execution schema.
type Execution struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Dag holds the value of the "dag" field.
	Dag []byte `json:"dag,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExecutionQuery when eager-loading is set.
	Edges                       ExecutionEdges `json:"edges"`
	execution_execution_context *string
	selectValues                sql.SelectValues
}

// ExecutionEdges holds the relations/edges for other nodes in the graph.
type ExecutionEdges struct {
	// ExecutionContext holds the value of the execution_context edge.
	ExecutionContext *ExecutionContext `json:"execution_context,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ExecutionContextOrErr returns the ExecutionContext value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExecutionEdges) ExecutionContextOrErr() (*ExecutionContext, error) {
	if e.ExecutionContext != nil {
		return e.ExecutionContext, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: executioncontext.Label}
	}
	return nil, &NotLoadedError{edge: "execution_context"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Execution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case execution.FieldDag:
			values[i] = new([]byte)
		case execution.FieldID:
			values[i] = new(sql.NullString)
		case execution.ForeignKeys[0]: // execution_execution_context
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Execution fields.
func (e *Execution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case execution.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				e.ID = value.String
			}
		case execution.FieldDag:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dag", values[i])
			} else if value != nil {
				e.Dag = *value
			}
		case execution.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field execution_execution_context", values[i])
			} else if value.Valid {
				e.execution_execution_context = new(string)
				*e.execution_execution_context = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Execution.
// This includes values selected through modifiers, order, etc.
func (e *Execution) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryExecutionContext queries the "execution_context" edge of the Execution entity.
func (e *Execution) QueryExecutionContext() *ExecutionContextQuery {
	return NewExecutionClient(e.config).QueryExecutionContext(e)
}

// Update returns a builder for updating this Execution.
// Note that you need to call Execution.Unwrap() before calling this method if this Execution
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Execution) Update() *ExecutionUpdateOne {
	return NewExecutionClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Execution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Execution) Unwrap() *Execution {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Execution is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Execution) String() string {
	var builder strings.Builder
	builder.WriteString("Execution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("dag=")
	builder.WriteString(fmt.Sprintf("%v", e.Dag))
	builder.WriteByte(')')
	return builder.String()
}

// Executions is a parsable slice of Execution.
type Executions []*Execution
