// Code generated by ent, DO NOT EDIT.

package sagacompensation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldContainsFold(FieldID, id))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldEQ(FieldOrder, v))
}

// NextCompensationName applies equality check predicate on the "next_compensation_name" field. It's identical to NextCompensationNameEQ.
func NextCompensationName(v string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldEQ(FieldNextCompensationName, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldLTE(FieldOrder, v))
}

// NextCompensationNameEQ applies the EQ predicate on the "next_compensation_name" field.
func NextCompensationNameEQ(v string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldEQ(FieldNextCompensationName, v))
}

// NextCompensationNameNEQ applies the NEQ predicate on the "next_compensation_name" field.
func NextCompensationNameNEQ(v string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldNEQ(FieldNextCompensationName, v))
}

// NextCompensationNameIn applies the In predicate on the "next_compensation_name" field.
func NextCompensationNameIn(vs ...string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldIn(FieldNextCompensationName, vs...))
}

// NextCompensationNameNotIn applies the NotIn predicate on the "next_compensation_name" field.
func NextCompensationNameNotIn(vs ...string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldNotIn(FieldNextCompensationName, vs...))
}

// NextCompensationNameGT applies the GT predicate on the "next_compensation_name" field.
func NextCompensationNameGT(v string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldGT(FieldNextCompensationName, v))
}

// NextCompensationNameGTE applies the GTE predicate on the "next_compensation_name" field.
func NextCompensationNameGTE(v string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldGTE(FieldNextCompensationName, v))
}

// NextCompensationNameLT applies the LT predicate on the "next_compensation_name" field.
func NextCompensationNameLT(v string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldLT(FieldNextCompensationName, v))
}

// NextCompensationNameLTE applies the LTE predicate on the "next_compensation_name" field.
func NextCompensationNameLTE(v string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldLTE(FieldNextCompensationName, v))
}

// NextCompensationNameContains applies the Contains predicate on the "next_compensation_name" field.
func NextCompensationNameContains(v string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldContains(FieldNextCompensationName, v))
}

// NextCompensationNameHasPrefix applies the HasPrefix predicate on the "next_compensation_name" field.
func NextCompensationNameHasPrefix(v string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldHasPrefix(FieldNextCompensationName, v))
}

// NextCompensationNameHasSuffix applies the HasSuffix predicate on the "next_compensation_name" field.
func NextCompensationNameHasSuffix(v string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldHasSuffix(FieldNextCompensationName, v))
}

// NextCompensationNameEqualFold applies the EqualFold predicate on the "next_compensation_name" field.
func NextCompensationNameEqualFold(v string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldEqualFold(FieldNextCompensationName, v))
}

// NextCompensationNameContainsFold applies the ContainsFold predicate on the "next_compensation_name" field.
func NextCompensationNameContainsFold(v string) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.FieldContainsFold(FieldNextCompensationName, v))
}

// HasExecutionUnit applies the HasEdge predicate on the "execution_unit" edge.
func HasExecutionUnit() predicate.SagaCompensation {
	return predicate.SagaCompensation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExecutionUnitTable, ExecutionUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionUnitWith applies the HasEdge predicate on the "execution_unit" edge with a given conditions (other predicates).
func HasExecutionUnitWith(preds ...predicate.ExecutionUnit) predicate.SagaCompensation {
	return predicate.SagaCompensation(func(s *sql.Selector) {
		step := newExecutionUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.SagaCompensation {
	return predicate.SagaCompensation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.SagaCompensation {
	return predicate.SagaCompensation(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTransaction applies the HasEdge predicate on the "transaction" edge.
func HasTransaction() predicate.SagaCompensation {
	return predicate.SagaCompensation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TransactionTable, TransactionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionWith applies the HasEdge predicate on the "transaction" edge with a given conditions (other predicates).
func HasTransactionWith(preds ...predicate.SagaTransaction) predicate.SagaCompensation {
	return predicate.SagaCompensation(func(s *sql.Selector) {
		step := newTransactionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SagaCompensation) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SagaCompensation) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SagaCompensation) predicate.SagaCompensation {
	return predicate.SagaCompensation(sql.NotPredicates(p))
}
