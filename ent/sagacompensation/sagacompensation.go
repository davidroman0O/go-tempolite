// Code generated by ent, DO NOT EDIT.

package sagacompensation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sagacompensation type in the database.
	Label = "saga_compensation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldNextCompensationName holds the string denoting the next_compensation_name field in the database.
	FieldNextCompensationName = "next_compensation_name"
	// EdgeExecutionUnit holds the string denoting the execution_unit edge name in mutations.
	EdgeExecutionUnit = "execution_unit"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// EdgeTransaction holds the string denoting the transaction edge name in mutations.
	EdgeTransaction = "transaction"
	// Table holds the table name of the sagacompensation in the database.
	Table = "saga_compensations"
	// ExecutionUnitTable is the table that holds the execution_unit relation/edge.
	ExecutionUnitTable = "saga_compensations"
	// ExecutionUnitInverseTable is the table name for the ExecutionUnit entity.
	// It exists in this package in order to avoid circular dependency with the "executionunit" package.
	ExecutionUnitInverseTable = "execution_units"
	// ExecutionUnitColumn is the table column denoting the execution_unit relation/edge.
	ExecutionUnitColumn = "execution_unit_saga_compensations"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "saga_compensations"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "saga_compensation_task"
	// TransactionTable is the table that holds the transaction relation/edge.
	TransactionTable = "saga_compensations"
	// TransactionInverseTable is the table name for the SagaTransaction entity.
	// It exists in this package in order to avoid circular dependency with the "sagatransaction" package.
	TransactionInverseTable = "saga_transactions"
	// TransactionColumn is the table column denoting the transaction relation/edge.
	TransactionColumn = "saga_transaction_compensation"
)

// Columns holds all SQL columns for sagacompensation fields.
var Columns = []string{
	FieldID,
	FieldOrder,
	FieldNextCompensationName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "saga_compensations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"execution_unit_saga_compensations",
	"saga_compensation_task",
	"saga_transaction_compensation",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SagaCompensation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByNextCompensationName orders the results by the next_compensation_name field.
func ByNextCompensationName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextCompensationName, opts...).ToFunc()
}

// ByExecutionUnitField orders the results by execution_unit field.
func ByExecutionUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExecutionUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}

// ByTransactionField orders the results by transaction field.
func ByTransactionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransactionStep(), sql.OrderByField(field, opts...))
	}
}
func newExecutionUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExecutionUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExecutionUnitTable, ExecutionUnitColumn),
	)
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TaskTable, TaskColumn),
	)
}
func newTransactionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransactionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, TransactionTable, TransactionColumn),
	)
}
