// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/activity"
	"github.com/davidroman0O/go-tempolite/ent/saga"
	"github.com/davidroman0O/go-tempolite/ent/schema"
)

// Saga is the model entity for the Saga schema.
type Saga struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Input holds the value of the "input" field.
	Input []interface{} `json:"input,omitempty"`
	// RetryPolicy holds the value of the "retry_policy" field.
	RetryPolicy schema.RetryPolicy `json:"retry_policy,omitempty"`
	// Timeout holds the value of the "timeout" field.
	Timeout time.Time `json:"timeout,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SagaQuery when eager-loading is set.
	Edges          SagaEdges `json:"edges"`
	activity_sagas *string
	selectValues   sql.SelectValues
}

// SagaEdges holds the relations/edges for other nodes in the graph.
type SagaEdges struct {
	// Executions holds the value of the executions edge.
	Executions []*SagaExecution `json:"executions,omitempty"`
	// Activity holds the value of the activity edge.
	Activity *Activity `json:"activity,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ExecutionsOrErr returns the Executions value or an error if the edge
// was not loaded in eager-loading.
func (e SagaEdges) ExecutionsOrErr() ([]*SagaExecution, error) {
	if e.loadedTypes[0] {
		return e.Executions, nil
	}
	return nil, &NotLoadedError{edge: "executions"}
}

// ActivityOrErr returns the Activity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SagaEdges) ActivityOrErr() (*Activity, error) {
	if e.Activity != nil {
		return e.Activity, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: activity.Label}
	}
	return nil, &NotLoadedError{edge: "activity"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Saga) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case saga.FieldInput, saga.FieldRetryPolicy:
			values[i] = new([]byte)
		case saga.FieldID, saga.FieldName:
			values[i] = new(sql.NullString)
		case saga.FieldTimeout, saga.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case saga.ForeignKeys[0]: // activity_sagas
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Saga fields.
func (s *Saga) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case saga.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case saga.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case saga.FieldInput:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field input", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Input); err != nil {
					return fmt.Errorf("unmarshal field input: %w", err)
				}
			}
		case saga.FieldRetryPolicy:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field retry_policy", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.RetryPolicy); err != nil {
					return fmt.Errorf("unmarshal field retry_policy: %w", err)
				}
			}
		case saga.FieldTimeout:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				s.Timeout = value.Time
			}
		case saga.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case saga.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_sagas", values[i])
			} else if value.Valid {
				s.activity_sagas = new(string)
				*s.activity_sagas = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Saga.
// This includes values selected through modifiers, order, etc.
func (s *Saga) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryExecutions queries the "executions" edge of the Saga entity.
func (s *Saga) QueryExecutions() *SagaExecutionQuery {
	return NewSagaClient(s.config).QueryExecutions(s)
}

// QueryActivity queries the "activity" edge of the Saga entity.
func (s *Saga) QueryActivity() *ActivityQuery {
	return NewSagaClient(s.config).QueryActivity(s)
}

// Update returns a builder for updating this Saga.
// Note that you need to call Saga.Unwrap() before calling this method if this Saga
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Saga) Update() *SagaUpdateOne {
	return NewSagaClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Saga entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Saga) Unwrap() *Saga {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Saga is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Saga) String() string {
	var builder strings.Builder
	builder.WriteString("Saga(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("input=")
	builder.WriteString(fmt.Sprintf("%v", s.Input))
	builder.WriteString(", ")
	builder.WriteString("retry_policy=")
	builder.WriteString(fmt.Sprintf("%v", s.RetryPolicy))
	builder.WriteString(", ")
	builder.WriteString("timeout=")
	builder.WriteString(s.Timeout.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Sagas is a parsable slice of Saga.
type Sagas []*Saga
