// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/sideeffectresult"
)

// SideEffectResultDelete is the builder for deleting a SideEffectResult entity.
type SideEffectResultDelete struct {
	config
	hooks    []Hook
	mutation *SideEffectResultMutation
}

// Where appends a list predicates to the SideEffectResultDelete builder.
func (serd *SideEffectResultDelete) Where(ps ...predicate.SideEffectResult) *SideEffectResultDelete {
	serd.mutation.Where(ps...)
	return serd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (serd *SideEffectResultDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, serd.sqlExec, serd.mutation, serd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (serd *SideEffectResultDelete) ExecX(ctx context.Context) int {
	n, err := serd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (serd *SideEffectResultDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sideeffectresult.Table, sqlgraph.NewFieldSpec(sideeffectresult.FieldID, field.TypeString))
	if ps := serd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, serd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	serd.mutation.done = true
	return affected, err
}

// SideEffectResultDeleteOne is the builder for deleting a single SideEffectResult entity.
type SideEffectResultDeleteOne struct {
	serd *SideEffectResultDelete
}

// Where appends a list predicates to the SideEffectResultDelete builder.
func (serdo *SideEffectResultDeleteOne) Where(ps ...predicate.SideEffectResult) *SideEffectResultDeleteOne {
	serdo.serd.mutation.Where(ps...)
	return serdo
}

// Exec executes the deletion query.
func (serdo *SideEffectResultDeleteOne) Exec(ctx context.Context) error {
	n, err := serdo.serd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sideeffectresult.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (serdo *SideEffectResultDeleteOne) ExecX(ctx context.Context) {
	if err := serdo.Exec(ctx); err != nil {
		panic(err)
	}
}
