// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/sideeffectresult"
)

// SideEffectResult is the model entity for the SideEffectResult schema.
type SideEffectResult struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ExecutionContextID holds the value of the "execution_context_id" field.
	ExecutionContextID string `json:"execution_context_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Result holds the value of the "result" field.
	Result                                []byte `json:"result,omitempty"`
	execution_context_side_effect_results *string
	selectValues                          sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SideEffectResult) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sideeffectresult.FieldResult:
			values[i] = new([]byte)
		case sideeffectresult.FieldID, sideeffectresult.FieldExecutionContextID, sideeffectresult.FieldName:
			values[i] = new(sql.NullString)
		case sideeffectresult.ForeignKeys[0]: // execution_context_side_effect_results
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SideEffectResult fields.
func (ser *SideEffectResult) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sideeffectresult.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ser.ID = value.String
			}
		case sideeffectresult.FieldExecutionContextID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field execution_context_id", values[i])
			} else if value.Valid {
				ser.ExecutionContextID = value.String
			}
		case sideeffectresult.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ser.Name = value.String
			}
		case sideeffectresult.FieldResult:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value != nil {
				ser.Result = *value
			}
		case sideeffectresult.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field execution_context_side_effect_results", values[i])
			} else if value.Valid {
				ser.execution_context_side_effect_results = new(string)
				*ser.execution_context_side_effect_results = value.String
			}
		default:
			ser.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SideEffectResult.
// This includes values selected through modifiers, order, etc.
func (ser *SideEffectResult) Value(name string) (ent.Value, error) {
	return ser.selectValues.Get(name)
}

// Update returns a builder for updating this SideEffectResult.
// Note that you need to call SideEffectResult.Unwrap() before calling this method if this SideEffectResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (ser *SideEffectResult) Update() *SideEffectResultUpdateOne {
	return NewSideEffectResultClient(ser.config).UpdateOne(ser)
}

// Unwrap unwraps the SideEffectResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ser *SideEffectResult) Unwrap() *SideEffectResult {
	_tx, ok := ser.config.driver.(*txDriver)
	if !ok {
		panic("ent: SideEffectResult is not a transactional entity")
	}
	ser.config.driver = _tx.drv
	return ser
}

// String implements the fmt.Stringer.
func (ser *SideEffectResult) String() string {
	var builder strings.Builder
	builder.WriteString("SideEffectResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ser.ID))
	builder.WriteString("execution_context_id=")
	builder.WriteString(ser.ExecutionContextID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ser.Name)
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", ser.Result))
	builder.WriteByte(')')
	return builder.String()
}

// SideEffectResults is a parsable slice of SideEffectResult.
type SideEffectResults []*SideEffectResult
