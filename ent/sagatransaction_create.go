// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/executionunit"
	"github.com/davidroman0O/go-tempolite/ent/sagacompensation"
	"github.com/davidroman0O/go-tempolite/ent/sagatransaction"
	"github.com/davidroman0O/go-tempolite/ent/task"
)

// SagaTransactionCreate is the builder for creating a SagaTransaction entity.
type SagaTransactionCreate struct {
	config
	mutation *SagaTransactionMutation
	hooks    []Hook
}

// SetOrder sets the "order" field.
func (stc *SagaTransactionCreate) SetOrder(i int) *SagaTransactionCreate {
	stc.mutation.SetOrder(i)
	return stc
}

// SetNextTransactionName sets the "next_transaction_name" field.
func (stc *SagaTransactionCreate) SetNextTransactionName(s string) *SagaTransactionCreate {
	stc.mutation.SetNextTransactionName(s)
	return stc
}

// SetFailureCompensationName sets the "failure_compensation_name" field.
func (stc *SagaTransactionCreate) SetFailureCompensationName(s string) *SagaTransactionCreate {
	stc.mutation.SetFailureCompensationName(s)
	return stc
}

// SetID sets the "id" field.
func (stc *SagaTransactionCreate) SetID(s string) *SagaTransactionCreate {
	stc.mutation.SetID(s)
	return stc
}

// SetExecutionUnitID sets the "execution_unit" edge to the ExecutionUnit entity by ID.
func (stc *SagaTransactionCreate) SetExecutionUnitID(id string) *SagaTransactionCreate {
	stc.mutation.SetExecutionUnitID(id)
	return stc
}

// SetNillableExecutionUnitID sets the "execution_unit" edge to the ExecutionUnit entity by ID if the given value is not nil.
func (stc *SagaTransactionCreate) SetNillableExecutionUnitID(id *string) *SagaTransactionCreate {
	if id != nil {
		stc = stc.SetExecutionUnitID(*id)
	}
	return stc
}

// SetExecutionUnit sets the "execution_unit" edge to the ExecutionUnit entity.
func (stc *SagaTransactionCreate) SetExecutionUnit(e *ExecutionUnit) *SagaTransactionCreate {
	return stc.SetExecutionUnitID(e.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (stc *SagaTransactionCreate) SetTaskID(id string) *SagaTransactionCreate {
	stc.mutation.SetTaskID(id)
	return stc
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (stc *SagaTransactionCreate) SetNillableTaskID(id *string) *SagaTransactionCreate {
	if id != nil {
		stc = stc.SetTaskID(*id)
	}
	return stc
}

// SetTask sets the "task" edge to the Task entity.
func (stc *SagaTransactionCreate) SetTask(t *Task) *SagaTransactionCreate {
	return stc.SetTaskID(t.ID)
}

// SetCompensationID sets the "compensation" edge to the SagaCompensation entity by ID.
func (stc *SagaTransactionCreate) SetCompensationID(id string) *SagaTransactionCreate {
	stc.mutation.SetCompensationID(id)
	return stc
}

// SetNillableCompensationID sets the "compensation" edge to the SagaCompensation entity by ID if the given value is not nil.
func (stc *SagaTransactionCreate) SetNillableCompensationID(id *string) *SagaTransactionCreate {
	if id != nil {
		stc = stc.SetCompensationID(*id)
	}
	return stc
}

// SetCompensation sets the "compensation" edge to the SagaCompensation entity.
func (stc *SagaTransactionCreate) SetCompensation(s *SagaCompensation) *SagaTransactionCreate {
	return stc.SetCompensationID(s.ID)
}

// Mutation returns the SagaTransactionMutation object of the builder.
func (stc *SagaTransactionCreate) Mutation() *SagaTransactionMutation {
	return stc.mutation
}

// Save creates the SagaTransaction in the database.
func (stc *SagaTransactionCreate) Save(ctx context.Context) (*SagaTransaction, error) {
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SagaTransactionCreate) SaveX(ctx context.Context) *SagaTransaction {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *SagaTransactionCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *SagaTransactionCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *SagaTransactionCreate) check() error {
	if _, ok := stc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "SagaTransaction.order"`)}
	}
	if _, ok := stc.mutation.NextTransactionName(); !ok {
		return &ValidationError{Name: "next_transaction_name", err: errors.New(`ent: missing required field "SagaTransaction.next_transaction_name"`)}
	}
	if _, ok := stc.mutation.FailureCompensationName(); !ok {
		return &ValidationError{Name: "failure_compensation_name", err: errors.New(`ent: missing required field "SagaTransaction.failure_compensation_name"`)}
	}
	return nil
}

func (stc *SagaTransactionCreate) sqlSave(ctx context.Context) (*SagaTransaction, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SagaTransaction.ID type: %T", _spec.ID.Value)
		}
	}
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *SagaTransactionCreate) createSpec() (*SagaTransaction, *sqlgraph.CreateSpec) {
	var (
		_node = &SagaTransaction{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(sagatransaction.Table, sqlgraph.NewFieldSpec(sagatransaction.FieldID, field.TypeString))
	)
	if id, ok := stc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := stc.mutation.Order(); ok {
		_spec.SetField(sagatransaction.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := stc.mutation.NextTransactionName(); ok {
		_spec.SetField(sagatransaction.FieldNextTransactionName, field.TypeString, value)
		_node.NextTransactionName = value
	}
	if value, ok := stc.mutation.FailureCompensationName(); ok {
		_spec.SetField(sagatransaction.FieldFailureCompensationName, field.TypeString, value)
		_node.FailureCompensationName = value
	}
	if nodes := stc.mutation.ExecutionUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagatransaction.ExecutionUnitTable,
			Columns: []string{sagatransaction.ExecutionUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.execution_unit_saga_transactions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sagatransaction.TaskTable,
			Columns: []string{sagatransaction.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.saga_transaction_task = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.CompensationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sagatransaction.CompensationTable,
			Columns: []string{sagatransaction.CompensationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagacompensation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SagaTransactionCreateBulk is the builder for creating many SagaTransaction entities in bulk.
type SagaTransactionCreateBulk struct {
	config
	err      error
	builders []*SagaTransactionCreate
}

// Save creates the SagaTransaction entities in the database.
func (stcb *SagaTransactionCreateBulk) Save(ctx context.Context) ([]*SagaTransaction, error) {
	if stcb.err != nil {
		return nil, stcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*SagaTransaction, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SagaTransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *SagaTransactionCreateBulk) SaveX(ctx context.Context) []*SagaTransaction {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *SagaTransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *SagaTransactionCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}
