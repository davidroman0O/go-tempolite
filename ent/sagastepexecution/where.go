// Code generated by ent, DO NOT EDIT.

package sagastepexecution

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldContainsFold(FieldID, id))
}

// SagaExecutionID applies equality check predicate on the "saga_execution_id" field. It's identical to SagaExecutionIDEQ.
func SagaExecutionID(v string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldEQ(FieldSagaExecutionID, v))
}

// StepNumber applies equality check predicate on the "step_number" field. It's identical to StepNumberEQ.
func StepNumber(v int) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldEQ(FieldStepNumber, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldEQ(FieldEndTime, v))
}

// SagaExecutionIDEQ applies the EQ predicate on the "saga_execution_id" field.
func SagaExecutionIDEQ(v string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldEQ(FieldSagaExecutionID, v))
}

// SagaExecutionIDNEQ applies the NEQ predicate on the "saga_execution_id" field.
func SagaExecutionIDNEQ(v string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldNEQ(FieldSagaExecutionID, v))
}

// SagaExecutionIDIn applies the In predicate on the "saga_execution_id" field.
func SagaExecutionIDIn(vs ...string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldIn(FieldSagaExecutionID, vs...))
}

// SagaExecutionIDNotIn applies the NotIn predicate on the "saga_execution_id" field.
func SagaExecutionIDNotIn(vs ...string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldNotIn(FieldSagaExecutionID, vs...))
}

// SagaExecutionIDGT applies the GT predicate on the "saga_execution_id" field.
func SagaExecutionIDGT(v string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldGT(FieldSagaExecutionID, v))
}

// SagaExecutionIDGTE applies the GTE predicate on the "saga_execution_id" field.
func SagaExecutionIDGTE(v string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldGTE(FieldSagaExecutionID, v))
}

// SagaExecutionIDLT applies the LT predicate on the "saga_execution_id" field.
func SagaExecutionIDLT(v string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldLT(FieldSagaExecutionID, v))
}

// SagaExecutionIDLTE applies the LTE predicate on the "saga_execution_id" field.
func SagaExecutionIDLTE(v string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldLTE(FieldSagaExecutionID, v))
}

// SagaExecutionIDContains applies the Contains predicate on the "saga_execution_id" field.
func SagaExecutionIDContains(v string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldContains(FieldSagaExecutionID, v))
}

// SagaExecutionIDHasPrefix applies the HasPrefix predicate on the "saga_execution_id" field.
func SagaExecutionIDHasPrefix(v string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldHasPrefix(FieldSagaExecutionID, v))
}

// SagaExecutionIDHasSuffix applies the HasSuffix predicate on the "saga_execution_id" field.
func SagaExecutionIDHasSuffix(v string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldHasSuffix(FieldSagaExecutionID, v))
}

// SagaExecutionIDEqualFold applies the EqualFold predicate on the "saga_execution_id" field.
func SagaExecutionIDEqualFold(v string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldEqualFold(FieldSagaExecutionID, v))
}

// SagaExecutionIDContainsFold applies the ContainsFold predicate on the "saga_execution_id" field.
func SagaExecutionIDContainsFold(v string) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldContainsFold(FieldSagaExecutionID, v))
}

// StepNumberEQ applies the EQ predicate on the "step_number" field.
func StepNumberEQ(v int) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldEQ(FieldStepNumber, v))
}

// StepNumberNEQ applies the NEQ predicate on the "step_number" field.
func StepNumberNEQ(v int) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldNEQ(FieldStepNumber, v))
}

// StepNumberIn applies the In predicate on the "step_number" field.
func StepNumberIn(vs ...int) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldIn(FieldStepNumber, vs...))
}

// StepNumberNotIn applies the NotIn predicate on the "step_number" field.
func StepNumberNotIn(vs ...int) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldNotIn(FieldStepNumber, vs...))
}

// StepNumberGT applies the GT predicate on the "step_number" field.
func StepNumberGT(v int) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldGT(FieldStepNumber, v))
}

// StepNumberGTE applies the GTE predicate on the "step_number" field.
func StepNumberGTE(v int) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldGTE(FieldStepNumber, v))
}

// StepNumberLT applies the LT predicate on the "step_number" field.
func StepNumberLT(v int) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldLT(FieldStepNumber, v))
}

// StepNumberLTE applies the LTE predicate on the "step_number" field.
func StepNumberLTE(v int) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldLTE(FieldStepNumber, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldNotIn(FieldStatus, vs...))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldLTE(FieldStartTime, v))
}

// StartTimeIsNil applies the IsNil predicate on the "start_time" field.
func StartTimeIsNil() predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldIsNull(FieldStartTime))
}

// StartTimeNotNil applies the NotNil predicate on the "start_time" field.
func StartTimeNotNil() predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldNotNull(FieldStartTime))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldIsNull(FieldEndTime))
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.FieldNotNull(FieldEndTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SagaStepExecution) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SagaStepExecution) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SagaStepExecution) predicate.SagaStepExecution {
	return predicate.SagaStepExecution(sql.NotPredicates(p))
}
