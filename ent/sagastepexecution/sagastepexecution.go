// Code generated by ent, DO NOT EDIT.

package sagastepexecution

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the sagastepexecution type in the database.
	Label = "saga_step_execution"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSagaExecutionID holds the string denoting the saga_execution_id field in the database.
	FieldSagaExecutionID = "saga_execution_id"
	// FieldStepNumber holds the string denoting the step_number field in the database.
	FieldStepNumber = "step_number"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// Table holds the table name of the sagastepexecution in the database.
	Table = "saga_step_executions"
)

// Columns holds all SQL columns for sagastepexecution fields.
var Columns = []string{
	FieldID,
	FieldSagaExecutionID,
	FieldStepNumber,
	FieldStatus,
	FieldStartTime,
	FieldEndTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "saga_step_executions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"saga_execution_steps",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending     Status = "pending"
	StatusInProgress  Status = "in_progress"
	StatusCompleted   Status = "completed"
	StatusFailed      Status = "failed"
	StatusCompensated Status = "compensated"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusInProgress, StatusCompleted, StatusFailed, StatusCompensated:
		return nil
	default:
		return fmt.Errorf("sagastepexecution: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the SagaStepExecution queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySagaExecutionID orders the results by the saga_execution_id field.
func BySagaExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSagaExecutionID, opts...).ToFunc()
}

// ByStepNumber orders the results by the step_number field.
func ByStepNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStepNumber, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}
