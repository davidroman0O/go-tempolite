// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/activity"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/run"
)

// RunUpdate is the builder for updating Run entities.
type RunUpdate struct {
	config
	hooks    []Hook
	mutation *RunMutation
}

// Where appends a list predicates to the RunUpdate builder.
func (ru *RunUpdate) Where(ps ...predicate.Run) *RunUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetRunID sets the "run_id" field.
func (ru *RunUpdate) SetRunID(s string) *RunUpdate {
	ru.mutation.SetRunID(s)
	return ru
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (ru *RunUpdate) SetNillableRunID(s *string) *RunUpdate {
	if s != nil {
		ru.SetRunID(*s)
	}
	return ru
}

// SetType sets the "type" field.
func (ru *RunUpdate) SetType(r run.Type) *RunUpdate {
	ru.mutation.SetType(r)
	return ru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ru *RunUpdate) SetNillableType(r *run.Type) *RunUpdate {
	if r != nil {
		ru.SetType(*r)
	}
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RunUpdate) SetCreatedAt(t time.Time) *RunUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RunUpdate) SetNillableCreatedAt(t *time.Time) *RunUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// AddWorkflowIDs adds the "workflow" edge to the Activity entity by IDs.
func (ru *RunUpdate) AddWorkflowIDs(ids ...string) *RunUpdate {
	ru.mutation.AddWorkflowIDs(ids...)
	return ru
}

// AddWorkflow adds the "workflow" edges to the Activity entity.
func (ru *RunUpdate) AddWorkflow(a ...*Activity) *RunUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddWorkflowIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the Activity entity by IDs.
func (ru *RunUpdate) AddActivityIDs(ids ...string) *RunUpdate {
	ru.mutation.AddActivityIDs(ids...)
	return ru
}

// AddActivities adds the "activities" edges to the Activity entity.
func (ru *RunUpdate) AddActivities(a ...*Activity) *RunUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddActivityIDs(ids...)
}

// Mutation returns the RunMutation object of the builder.
func (ru *RunUpdate) Mutation() *RunMutation {
	return ru.mutation
}

// ClearWorkflow clears all "workflow" edges to the Activity entity.
func (ru *RunUpdate) ClearWorkflow() *RunUpdate {
	ru.mutation.ClearWorkflow()
	return ru
}

// RemoveWorkflowIDs removes the "workflow" edge to Activity entities by IDs.
func (ru *RunUpdate) RemoveWorkflowIDs(ids ...string) *RunUpdate {
	ru.mutation.RemoveWorkflowIDs(ids...)
	return ru
}

// RemoveWorkflow removes "workflow" edges to Activity entities.
func (ru *RunUpdate) RemoveWorkflow(a ...*Activity) *RunUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveWorkflowIDs(ids...)
}

// ClearActivities clears all "activities" edges to the Activity entity.
func (ru *RunUpdate) ClearActivities() *RunUpdate {
	ru.mutation.ClearActivities()
	return ru
}

// RemoveActivityIDs removes the "activities" edge to Activity entities by IDs.
func (ru *RunUpdate) RemoveActivityIDs(ids ...string) *RunUpdate {
	ru.mutation.RemoveActivityIDs(ids...)
	return ru
}

// RemoveActivities removes "activities" edges to Activity entities.
func (ru *RunUpdate) RemoveActivities(a ...*Activity) *RunUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveActivityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RunUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RunUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RunUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RunUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RunUpdate) check() error {
	if v, ok := ru.mutation.GetType(); ok {
		if err := run.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Run.type": %w`, err)}
		}
	}
	return nil
}

func (ru *RunUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(run.Table, run.Columns, sqlgraph.NewFieldSpec(run.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.RunID(); ok {
		_spec.SetField(run.FieldRunID, field.TypeString, value)
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(run.FieldType, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(run.FieldCreatedAt, field.TypeTime, value)
	}
	if ru.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.WorkflowTable,
			Columns: []string{run.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedWorkflowIDs(); len(nodes) > 0 && !ru.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.WorkflowTable,
			Columns: []string{run.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.WorkflowTable,
			Columns: []string{run.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.ActivitiesTable,
			Columns: []string{run.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !ru.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.ActivitiesTable,
			Columns: []string{run.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.ActivitiesTable,
			Columns: []string{run.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{run.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RunUpdateOne is the builder for updating a single Run entity.
type RunUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RunMutation
}

// SetRunID sets the "run_id" field.
func (ruo *RunUpdateOne) SetRunID(s string) *RunUpdateOne {
	ruo.mutation.SetRunID(s)
	return ruo
}

// SetNillableRunID sets the "run_id" field if the given value is not nil.
func (ruo *RunUpdateOne) SetNillableRunID(s *string) *RunUpdateOne {
	if s != nil {
		ruo.SetRunID(*s)
	}
	return ruo
}

// SetType sets the "type" field.
func (ruo *RunUpdateOne) SetType(r run.Type) *RunUpdateOne {
	ruo.mutation.SetType(r)
	return ruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruo *RunUpdateOne) SetNillableType(r *run.Type) *RunUpdateOne {
	if r != nil {
		ruo.SetType(*r)
	}
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RunUpdateOne) SetCreatedAt(t time.Time) *RunUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RunUpdateOne) SetNillableCreatedAt(t *time.Time) *RunUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// AddWorkflowIDs adds the "workflow" edge to the Activity entity by IDs.
func (ruo *RunUpdateOne) AddWorkflowIDs(ids ...string) *RunUpdateOne {
	ruo.mutation.AddWorkflowIDs(ids...)
	return ruo
}

// AddWorkflow adds the "workflow" edges to the Activity entity.
func (ruo *RunUpdateOne) AddWorkflow(a ...*Activity) *RunUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddWorkflowIDs(ids...)
}

// AddActivityIDs adds the "activities" edge to the Activity entity by IDs.
func (ruo *RunUpdateOne) AddActivityIDs(ids ...string) *RunUpdateOne {
	ruo.mutation.AddActivityIDs(ids...)
	return ruo
}

// AddActivities adds the "activities" edges to the Activity entity.
func (ruo *RunUpdateOne) AddActivities(a ...*Activity) *RunUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddActivityIDs(ids...)
}

// Mutation returns the RunMutation object of the builder.
func (ruo *RunUpdateOne) Mutation() *RunMutation {
	return ruo.mutation
}

// ClearWorkflow clears all "workflow" edges to the Activity entity.
func (ruo *RunUpdateOne) ClearWorkflow() *RunUpdateOne {
	ruo.mutation.ClearWorkflow()
	return ruo
}

// RemoveWorkflowIDs removes the "workflow" edge to Activity entities by IDs.
func (ruo *RunUpdateOne) RemoveWorkflowIDs(ids ...string) *RunUpdateOne {
	ruo.mutation.RemoveWorkflowIDs(ids...)
	return ruo
}

// RemoveWorkflow removes "workflow" edges to Activity entities.
func (ruo *RunUpdateOne) RemoveWorkflow(a ...*Activity) *RunUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveWorkflowIDs(ids...)
}

// ClearActivities clears all "activities" edges to the Activity entity.
func (ruo *RunUpdateOne) ClearActivities() *RunUpdateOne {
	ruo.mutation.ClearActivities()
	return ruo
}

// RemoveActivityIDs removes the "activities" edge to Activity entities by IDs.
func (ruo *RunUpdateOne) RemoveActivityIDs(ids ...string) *RunUpdateOne {
	ruo.mutation.RemoveActivityIDs(ids...)
	return ruo
}

// RemoveActivities removes "activities" edges to Activity entities.
func (ruo *RunUpdateOne) RemoveActivities(a ...*Activity) *RunUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveActivityIDs(ids...)
}

// Where appends a list predicates to the RunUpdate builder.
func (ruo *RunUpdateOne) Where(ps ...predicate.Run) *RunUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RunUpdateOne) Select(field string, fields ...string) *RunUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Run entity.
func (ruo *RunUpdateOne) Save(ctx context.Context) (*Run, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RunUpdateOne) SaveX(ctx context.Context) *Run {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RunUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RunUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RunUpdateOne) check() error {
	if v, ok := ruo.mutation.GetType(); ok {
		if err := run.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Run.type": %w`, err)}
		}
	}
	return nil
}

func (ruo *RunUpdateOne) sqlSave(ctx context.Context) (_node *Run, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(run.Table, run.Columns, sqlgraph.NewFieldSpec(run.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Run.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, run.FieldID)
		for _, f := range fields {
			if !run.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != run.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.RunID(); ok {
		_spec.SetField(run.FieldRunID, field.TypeString, value)
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(run.FieldType, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(run.FieldCreatedAt, field.TypeTime, value)
	}
	if ruo.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.WorkflowTable,
			Columns: []string{run.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedWorkflowIDs(); len(nodes) > 0 && !ruo.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.WorkflowTable,
			Columns: []string{run.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.WorkflowTable,
			Columns: []string{run.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.ActivitiesTable,
			Columns: []string{run.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 && !ruo.mutation.ActivitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.ActivitiesTable,
			Columns: []string{run.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   run.ActivitiesTable,
			Columns: []string{run.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Run{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{run.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
