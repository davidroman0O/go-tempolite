// Code generated by ent, DO NOT EDIT.

package sideeffectresult

import (
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldContainsFold(FieldID, id))
}

// ExecutionContextID applies equality check predicate on the "execution_context_id" field. It's identical to ExecutionContextIDEQ.
func ExecutionContextID(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldEQ(FieldExecutionContextID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldEQ(FieldName, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v []byte) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldEQ(FieldResult, v))
}

// ExecutionContextIDEQ applies the EQ predicate on the "execution_context_id" field.
func ExecutionContextIDEQ(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldEQ(FieldExecutionContextID, v))
}

// ExecutionContextIDNEQ applies the NEQ predicate on the "execution_context_id" field.
func ExecutionContextIDNEQ(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldNEQ(FieldExecutionContextID, v))
}

// ExecutionContextIDIn applies the In predicate on the "execution_context_id" field.
func ExecutionContextIDIn(vs ...string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldIn(FieldExecutionContextID, vs...))
}

// ExecutionContextIDNotIn applies the NotIn predicate on the "execution_context_id" field.
func ExecutionContextIDNotIn(vs ...string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldNotIn(FieldExecutionContextID, vs...))
}

// ExecutionContextIDGT applies the GT predicate on the "execution_context_id" field.
func ExecutionContextIDGT(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldGT(FieldExecutionContextID, v))
}

// ExecutionContextIDGTE applies the GTE predicate on the "execution_context_id" field.
func ExecutionContextIDGTE(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldGTE(FieldExecutionContextID, v))
}

// ExecutionContextIDLT applies the LT predicate on the "execution_context_id" field.
func ExecutionContextIDLT(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldLT(FieldExecutionContextID, v))
}

// ExecutionContextIDLTE applies the LTE predicate on the "execution_context_id" field.
func ExecutionContextIDLTE(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldLTE(FieldExecutionContextID, v))
}

// ExecutionContextIDContains applies the Contains predicate on the "execution_context_id" field.
func ExecutionContextIDContains(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldContains(FieldExecutionContextID, v))
}

// ExecutionContextIDHasPrefix applies the HasPrefix predicate on the "execution_context_id" field.
func ExecutionContextIDHasPrefix(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldHasPrefix(FieldExecutionContextID, v))
}

// ExecutionContextIDHasSuffix applies the HasSuffix predicate on the "execution_context_id" field.
func ExecutionContextIDHasSuffix(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldHasSuffix(FieldExecutionContextID, v))
}

// ExecutionContextIDEqualFold applies the EqualFold predicate on the "execution_context_id" field.
func ExecutionContextIDEqualFold(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldEqualFold(FieldExecutionContextID, v))
}

// ExecutionContextIDContainsFold applies the ContainsFold predicate on the "execution_context_id" field.
func ExecutionContextIDContainsFold(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldContainsFold(FieldExecutionContextID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldContainsFold(FieldName, v))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v []byte) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v []byte) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldNEQ(FieldResult, v))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...[]byte) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldIn(FieldResult, vs...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...[]byte) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldNotIn(FieldResult, vs...))
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v []byte) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldGT(FieldResult, v))
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v []byte) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldGTE(FieldResult, v))
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v []byte) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldLT(FieldResult, v))
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v []byte) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.FieldLTE(FieldResult, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SideEffectResult) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SideEffectResult) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SideEffectResult) predicate.SideEffectResult {
	return predicate.SideEffectResult(sql.NotPredicates(p))
}
