// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/executionunit"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
)

// ExecutionContextUpdate is the builder for updating ExecutionContext entities.
type ExecutionContextUpdate struct {
	config
	hooks    []Hook
	mutation *ExecutionContextMutation
}

// Where appends a list predicates to the ExecutionContextUpdate builder.
func (ecu *ExecutionContextUpdate) Where(ps ...predicate.ExecutionContext) *ExecutionContextUpdate {
	ecu.mutation.Where(ps...)
	return ecu
}

// SetCurrentRunID sets the "current_run_id" field.
func (ecu *ExecutionContextUpdate) SetCurrentRunID(s string) *ExecutionContextUpdate {
	ecu.mutation.SetCurrentRunID(s)
	return ecu
}

// SetNillableCurrentRunID sets the "current_run_id" field if the given value is not nil.
func (ecu *ExecutionContextUpdate) SetNillableCurrentRunID(s *string) *ExecutionContextUpdate {
	if s != nil {
		ecu.SetCurrentRunID(*s)
	}
	return ecu
}

// SetStatus sets the "status" field.
func (ecu *ExecutionContextUpdate) SetStatus(e executioncontext.Status) *ExecutionContextUpdate {
	ecu.mutation.SetStatus(e)
	return ecu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ecu *ExecutionContextUpdate) SetNillableStatus(e *executioncontext.Status) *ExecutionContextUpdate {
	if e != nil {
		ecu.SetStatus(*e)
	}
	return ecu
}

// SetStartTime sets the "start_time" field.
func (ecu *ExecutionContextUpdate) SetStartTime(t time.Time) *ExecutionContextUpdate {
	ecu.mutation.SetStartTime(t)
	return ecu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (ecu *ExecutionContextUpdate) SetNillableStartTime(t *time.Time) *ExecutionContextUpdate {
	if t != nil {
		ecu.SetStartTime(*t)
	}
	return ecu
}

// SetEndTime sets the "end_time" field.
func (ecu *ExecutionContextUpdate) SetEndTime(t time.Time) *ExecutionContextUpdate {
	ecu.mutation.SetEndTime(t)
	return ecu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ecu *ExecutionContextUpdate) SetNillableEndTime(t *time.Time) *ExecutionContextUpdate {
	if t != nil {
		ecu.SetEndTime(*t)
	}
	return ecu
}

// ClearEndTime clears the value of the "end_time" field.
func (ecu *ExecutionContextUpdate) ClearEndTime() *ExecutionContextUpdate {
	ecu.mutation.ClearEndTime()
	return ecu
}

// AddExecutionUnitIDs adds the "execution_units" edge to the ExecutionUnit entity by IDs.
func (ecu *ExecutionContextUpdate) AddExecutionUnitIDs(ids ...string) *ExecutionContextUpdate {
	ecu.mutation.AddExecutionUnitIDs(ids...)
	return ecu
}

// AddExecutionUnits adds the "execution_units" edges to the ExecutionUnit entity.
func (ecu *ExecutionContextUpdate) AddExecutionUnits(e ...*ExecutionUnit) *ExecutionContextUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecu.AddExecutionUnitIDs(ids...)
}

// Mutation returns the ExecutionContextMutation object of the builder.
func (ecu *ExecutionContextUpdate) Mutation() *ExecutionContextMutation {
	return ecu.mutation
}

// ClearExecutionUnits clears all "execution_units" edges to the ExecutionUnit entity.
func (ecu *ExecutionContextUpdate) ClearExecutionUnits() *ExecutionContextUpdate {
	ecu.mutation.ClearExecutionUnits()
	return ecu
}

// RemoveExecutionUnitIDs removes the "execution_units" edge to ExecutionUnit entities by IDs.
func (ecu *ExecutionContextUpdate) RemoveExecutionUnitIDs(ids ...string) *ExecutionContextUpdate {
	ecu.mutation.RemoveExecutionUnitIDs(ids...)
	return ecu
}

// RemoveExecutionUnits removes "execution_units" edges to ExecutionUnit entities.
func (ecu *ExecutionContextUpdate) RemoveExecutionUnits(e ...*ExecutionUnit) *ExecutionContextUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecu.RemoveExecutionUnitIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecu *ExecutionContextUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ecu.sqlSave, ecu.mutation, ecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecu *ExecutionContextUpdate) SaveX(ctx context.Context) int {
	affected, err := ecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecu *ExecutionContextUpdate) Exec(ctx context.Context) error {
	_, err := ecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecu *ExecutionContextUpdate) ExecX(ctx context.Context) {
	if err := ecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecu *ExecutionContextUpdate) check() error {
	if v, ok := ecu.mutation.Status(); ok {
		if err := executioncontext.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ExecutionContext.status": %w`, err)}
		}
	}
	return nil
}

func (ecu *ExecutionContextUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ecu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(executioncontext.Table, executioncontext.Columns, sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString))
	if ps := ecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecu.mutation.CurrentRunID(); ok {
		_spec.SetField(executioncontext.FieldCurrentRunID, field.TypeString, value)
	}
	if value, ok := ecu.mutation.Status(); ok {
		_spec.SetField(executioncontext.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ecu.mutation.StartTime(); ok {
		_spec.SetField(executioncontext.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := ecu.mutation.EndTime(); ok {
		_spec.SetField(executioncontext.FieldEndTime, field.TypeTime, value)
	}
	if ecu.mutation.EndTimeCleared() {
		_spec.ClearField(executioncontext.FieldEndTime, field.TypeTime)
	}
	if ecu.mutation.ExecutionUnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executioncontext.ExecutionUnitsTable,
			Columns: []string{executioncontext.ExecutionUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.RemovedExecutionUnitsIDs(); len(nodes) > 0 && !ecu.mutation.ExecutionUnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executioncontext.ExecutionUnitsTable,
			Columns: []string{executioncontext.ExecutionUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.ExecutionUnitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executioncontext.ExecutionUnitsTable,
			Columns: []string{executioncontext.ExecutionUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{executioncontext.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ecu.mutation.done = true
	return n, nil
}

// ExecutionContextUpdateOne is the builder for updating a single ExecutionContext entity.
type ExecutionContextUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExecutionContextMutation
}

// SetCurrentRunID sets the "current_run_id" field.
func (ecuo *ExecutionContextUpdateOne) SetCurrentRunID(s string) *ExecutionContextUpdateOne {
	ecuo.mutation.SetCurrentRunID(s)
	return ecuo
}

// SetNillableCurrentRunID sets the "current_run_id" field if the given value is not nil.
func (ecuo *ExecutionContextUpdateOne) SetNillableCurrentRunID(s *string) *ExecutionContextUpdateOne {
	if s != nil {
		ecuo.SetCurrentRunID(*s)
	}
	return ecuo
}

// SetStatus sets the "status" field.
func (ecuo *ExecutionContextUpdateOne) SetStatus(e executioncontext.Status) *ExecutionContextUpdateOne {
	ecuo.mutation.SetStatus(e)
	return ecuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ecuo *ExecutionContextUpdateOne) SetNillableStatus(e *executioncontext.Status) *ExecutionContextUpdateOne {
	if e != nil {
		ecuo.SetStatus(*e)
	}
	return ecuo
}

// SetStartTime sets the "start_time" field.
func (ecuo *ExecutionContextUpdateOne) SetStartTime(t time.Time) *ExecutionContextUpdateOne {
	ecuo.mutation.SetStartTime(t)
	return ecuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (ecuo *ExecutionContextUpdateOne) SetNillableStartTime(t *time.Time) *ExecutionContextUpdateOne {
	if t != nil {
		ecuo.SetStartTime(*t)
	}
	return ecuo
}

// SetEndTime sets the "end_time" field.
func (ecuo *ExecutionContextUpdateOne) SetEndTime(t time.Time) *ExecutionContextUpdateOne {
	ecuo.mutation.SetEndTime(t)
	return ecuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ecuo *ExecutionContextUpdateOne) SetNillableEndTime(t *time.Time) *ExecutionContextUpdateOne {
	if t != nil {
		ecuo.SetEndTime(*t)
	}
	return ecuo
}

// ClearEndTime clears the value of the "end_time" field.
func (ecuo *ExecutionContextUpdateOne) ClearEndTime() *ExecutionContextUpdateOne {
	ecuo.mutation.ClearEndTime()
	return ecuo
}

// AddExecutionUnitIDs adds the "execution_units" edge to the ExecutionUnit entity by IDs.
func (ecuo *ExecutionContextUpdateOne) AddExecutionUnitIDs(ids ...string) *ExecutionContextUpdateOne {
	ecuo.mutation.AddExecutionUnitIDs(ids...)
	return ecuo
}

// AddExecutionUnits adds the "execution_units" edges to the ExecutionUnit entity.
func (ecuo *ExecutionContextUpdateOne) AddExecutionUnits(e ...*ExecutionUnit) *ExecutionContextUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecuo.AddExecutionUnitIDs(ids...)
}

// Mutation returns the ExecutionContextMutation object of the builder.
func (ecuo *ExecutionContextUpdateOne) Mutation() *ExecutionContextMutation {
	return ecuo.mutation
}

// ClearExecutionUnits clears all "execution_units" edges to the ExecutionUnit entity.
func (ecuo *ExecutionContextUpdateOne) ClearExecutionUnits() *ExecutionContextUpdateOne {
	ecuo.mutation.ClearExecutionUnits()
	return ecuo
}

// RemoveExecutionUnitIDs removes the "execution_units" edge to ExecutionUnit entities by IDs.
func (ecuo *ExecutionContextUpdateOne) RemoveExecutionUnitIDs(ids ...string) *ExecutionContextUpdateOne {
	ecuo.mutation.RemoveExecutionUnitIDs(ids...)
	return ecuo
}

// RemoveExecutionUnits removes "execution_units" edges to ExecutionUnit entities.
func (ecuo *ExecutionContextUpdateOne) RemoveExecutionUnits(e ...*ExecutionUnit) *ExecutionContextUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ecuo.RemoveExecutionUnitIDs(ids...)
}

// Where appends a list predicates to the ExecutionContextUpdate builder.
func (ecuo *ExecutionContextUpdateOne) Where(ps ...predicate.ExecutionContext) *ExecutionContextUpdateOne {
	ecuo.mutation.Where(ps...)
	return ecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecuo *ExecutionContextUpdateOne) Select(field string, fields ...string) *ExecutionContextUpdateOne {
	ecuo.fields = append([]string{field}, fields...)
	return ecuo
}

// Save executes the query and returns the updated ExecutionContext entity.
func (ecuo *ExecutionContextUpdateOne) Save(ctx context.Context) (*ExecutionContext, error) {
	return withHooks(ctx, ecuo.sqlSave, ecuo.mutation, ecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ecuo *ExecutionContextUpdateOne) SaveX(ctx context.Context) *ExecutionContext {
	node, err := ecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecuo *ExecutionContextUpdateOne) Exec(ctx context.Context) error {
	_, err := ecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecuo *ExecutionContextUpdateOne) ExecX(ctx context.Context) {
	if err := ecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecuo *ExecutionContextUpdateOne) check() error {
	if v, ok := ecuo.mutation.Status(); ok {
		if err := executioncontext.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ExecutionContext.status": %w`, err)}
		}
	}
	return nil
}

func (ecuo *ExecutionContextUpdateOne) sqlSave(ctx context.Context) (_node *ExecutionContext, err error) {
	if err := ecuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(executioncontext.Table, executioncontext.Columns, sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString))
	id, ok := ecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExecutionContext.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, executioncontext.FieldID)
		for _, f := range fields {
			if !executioncontext.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != executioncontext.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecuo.mutation.CurrentRunID(); ok {
		_spec.SetField(executioncontext.FieldCurrentRunID, field.TypeString, value)
	}
	if value, ok := ecuo.mutation.Status(); ok {
		_spec.SetField(executioncontext.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ecuo.mutation.StartTime(); ok {
		_spec.SetField(executioncontext.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := ecuo.mutation.EndTime(); ok {
		_spec.SetField(executioncontext.FieldEndTime, field.TypeTime, value)
	}
	if ecuo.mutation.EndTimeCleared() {
		_spec.ClearField(executioncontext.FieldEndTime, field.TypeTime)
	}
	if ecuo.mutation.ExecutionUnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executioncontext.ExecutionUnitsTable,
			Columns: []string{executioncontext.ExecutionUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.RemovedExecutionUnitsIDs(); len(nodes) > 0 && !ecuo.mutation.ExecutionUnitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executioncontext.ExecutionUnitsTable,
			Columns: []string{executioncontext.ExecutionUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.ExecutionUnitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   executioncontext.ExecutionUnitsTable,
			Columns: []string{executioncontext.ExecutionUnitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExecutionContext{config: ecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{executioncontext.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ecuo.mutation.done = true
	return _node, nil
}
