// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/sagaexecution"
	"github.com/davidroman0O/go-tempolite/ent/sagastepexecution"
)

// SagaStepExecution is the model entity for the SagaStepExecution schema.
type SagaStepExecution struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HandlerName holds the value of the "handler_name" field.
	HandlerName string `json:"handler_name,omitempty"`
	// StepType holds the value of the "step_type" field.
	StepType sagastepexecution.StepType `json:"step_type,omitempty"`
	// Status holds the value of the "status" field.
	Status sagastepexecution.Status `json:"status,omitempty"`
	// Sequence holds the value of the "sequence" field.
	Sequence int `json:"sequence,omitempty"`
	// Attempt holds the value of the "attempt" field.
	Attempt int `json:"attempt,omitempty"`
	// Input holds the value of the "input" field.
	Input []interface{} `json:"input,omitempty"`
	// Output holds the value of the "output" field.
	Output []interface{} `json:"output,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SagaStepExecutionQuery when eager-loading is set.
	Edges                SagaStepExecutionEdges `json:"edges"`
	saga_execution_steps *string
	selectValues         sql.SelectValues
}

// SagaStepExecutionEdges holds the relations/edges for other nodes in the graph.
type SagaStepExecutionEdges struct {
	// SagaExecution holds the value of the saga_execution edge.
	SagaExecution *SagaExecution `json:"saga_execution,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SagaExecutionOrErr returns the SagaExecution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SagaStepExecutionEdges) SagaExecutionOrErr() (*SagaExecution, error) {
	if e.SagaExecution != nil {
		return e.SagaExecution, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: sagaexecution.Label}
	}
	return nil, &NotLoadedError{edge: "saga_execution"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SagaStepExecution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sagastepexecution.FieldInput, sagastepexecution.FieldOutput:
			values[i] = new([]byte)
		case sagastepexecution.FieldSequence, sagastepexecution.FieldAttempt:
			values[i] = new(sql.NullInt64)
		case sagastepexecution.FieldID, sagastepexecution.FieldHandlerName, sagastepexecution.FieldStepType, sagastepexecution.FieldStatus:
			values[i] = new(sql.NullString)
		case sagastepexecution.FieldStartedAt, sagastepexecution.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case sagastepexecution.ForeignKeys[0]: // saga_execution_steps
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SagaStepExecution fields.
func (sse *SagaStepExecution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sagastepexecution.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sse.ID = value.String
			}
		case sagastepexecution.FieldHandlerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handler_name", values[i])
			} else if value.Valid {
				sse.HandlerName = value.String
			}
		case sagastepexecution.FieldStepType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field step_type", values[i])
			} else if value.Valid {
				sse.StepType = sagastepexecution.StepType(value.String)
			}
		case sagastepexecution.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sse.Status = sagastepexecution.Status(value.String)
			}
		case sagastepexecution.FieldSequence:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sequence", values[i])
			} else if value.Valid {
				sse.Sequence = int(value.Int64)
			}
		case sagastepexecution.FieldAttempt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attempt", values[i])
			} else if value.Valid {
				sse.Attempt = int(value.Int64)
			}
		case sagastepexecution.FieldInput:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field input", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sse.Input); err != nil {
					return fmt.Errorf("unmarshal field input: %w", err)
				}
			}
		case sagastepexecution.FieldOutput:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field output", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sse.Output); err != nil {
					return fmt.Errorf("unmarshal field output: %w", err)
				}
			}
		case sagastepexecution.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				sse.StartedAt = value.Time
			}
		case sagastepexecution.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sse.UpdatedAt = value.Time
			}
		case sagastepexecution.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field saga_execution_steps", values[i])
			} else if value.Valid {
				sse.saga_execution_steps = new(string)
				*sse.saga_execution_steps = value.String
			}
		default:
			sse.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SagaStepExecution.
// This includes values selected through modifiers, order, etc.
func (sse *SagaStepExecution) Value(name string) (ent.Value, error) {
	return sse.selectValues.Get(name)
}

// QuerySagaExecution queries the "saga_execution" edge of the SagaStepExecution entity.
func (sse *SagaStepExecution) QuerySagaExecution() *SagaExecutionQuery {
	return NewSagaStepExecutionClient(sse.config).QuerySagaExecution(sse)
}

// Update returns a builder for updating this SagaStepExecution.
// Note that you need to call SagaStepExecution.Unwrap() before calling this method if this SagaStepExecution
// was returned from a transaction, and the transaction was committed or rolled back.
func (sse *SagaStepExecution) Update() *SagaStepExecutionUpdateOne {
	return NewSagaStepExecutionClient(sse.config).UpdateOne(sse)
}

// Unwrap unwraps the SagaStepExecution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sse *SagaStepExecution) Unwrap() *SagaStepExecution {
	_tx, ok := sse.config.driver.(*txDriver)
	if !ok {
		panic("ent: SagaStepExecution is not a transactional entity")
	}
	sse.config.driver = _tx.drv
	return sse
}

// String implements the fmt.Stringer.
func (sse *SagaStepExecution) String() string {
	var builder strings.Builder
	builder.WriteString("SagaStepExecution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sse.ID))
	builder.WriteString("handler_name=")
	builder.WriteString(sse.HandlerName)
	builder.WriteString(", ")
	builder.WriteString("step_type=")
	builder.WriteString(fmt.Sprintf("%v", sse.StepType))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sse.Status))
	builder.WriteString(", ")
	builder.WriteString("sequence=")
	builder.WriteString(fmt.Sprintf("%v", sse.Sequence))
	builder.WriteString(", ")
	builder.WriteString("attempt=")
	builder.WriteString(fmt.Sprintf("%v", sse.Attempt))
	builder.WriteString(", ")
	builder.WriteString("input=")
	builder.WriteString(fmt.Sprintf("%v", sse.Input))
	builder.WriteString(", ")
	builder.WriteString("output=")
	builder.WriteString(fmt.Sprintf("%v", sse.Output))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(sse.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sse.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SagaStepExecutions is a parsable slice of SagaStepExecution.
type SagaStepExecutions []*SagaStepExecution
