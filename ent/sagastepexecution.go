// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/sagastepexecution"
)

// SagaStepExecution is the model entity for the SagaStepExecution schema.
type SagaStepExecution struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// SagaExecutionID holds the value of the "saga_execution_id" field.
	SagaExecutionID string `json:"saga_execution_id,omitempty"`
	// StepNumber holds the value of the "step_number" field.
	StepNumber int `json:"step_number,omitempty"`
	// Status holds the value of the "status" field.
	Status sagastepexecution.Status `json:"status,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime              time.Time `json:"end_time,omitempty"`
	saga_execution_steps *string
	selectValues         sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SagaStepExecution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sagastepexecution.FieldStepNumber:
			values[i] = new(sql.NullInt64)
		case sagastepexecution.FieldID, sagastepexecution.FieldSagaExecutionID, sagastepexecution.FieldStatus:
			values[i] = new(sql.NullString)
		case sagastepexecution.FieldStartTime, sagastepexecution.FieldEndTime:
			values[i] = new(sql.NullTime)
		case sagastepexecution.ForeignKeys[0]: // saga_execution_steps
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SagaStepExecution fields.
func (sse *SagaStepExecution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sagastepexecution.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sse.ID = value.String
			}
		case sagastepexecution.FieldSagaExecutionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field saga_execution_id", values[i])
			} else if value.Valid {
				sse.SagaExecutionID = value.String
			}
		case sagastepexecution.FieldStepNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field step_number", values[i])
			} else if value.Valid {
				sse.StepNumber = int(value.Int64)
			}
		case sagastepexecution.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sse.Status = sagastepexecution.Status(value.String)
			}
		case sagastepexecution.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				sse.StartTime = value.Time
			}
		case sagastepexecution.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				sse.EndTime = value.Time
			}
		case sagastepexecution.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field saga_execution_steps", values[i])
			} else if value.Valid {
				sse.saga_execution_steps = new(string)
				*sse.saga_execution_steps = value.String
			}
		default:
			sse.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SagaStepExecution.
// This includes values selected through modifiers, order, etc.
func (sse *SagaStepExecution) Value(name string) (ent.Value, error) {
	return sse.selectValues.Get(name)
}

// Update returns a builder for updating this SagaStepExecution.
// Note that you need to call SagaStepExecution.Unwrap() before calling this method if this SagaStepExecution
// was returned from a transaction, and the transaction was committed or rolled back.
func (sse *SagaStepExecution) Update() *SagaStepExecutionUpdateOne {
	return NewSagaStepExecutionClient(sse.config).UpdateOne(sse)
}

// Unwrap unwraps the SagaStepExecution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sse *SagaStepExecution) Unwrap() *SagaStepExecution {
	_tx, ok := sse.config.driver.(*txDriver)
	if !ok {
		panic("ent: SagaStepExecution is not a transactional entity")
	}
	sse.config.driver = _tx.drv
	return sse
}

// String implements the fmt.Stringer.
func (sse *SagaStepExecution) String() string {
	var builder strings.Builder
	builder.WriteString("SagaStepExecution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sse.ID))
	builder.WriteString("saga_execution_id=")
	builder.WriteString(sse.SagaExecutionID)
	builder.WriteString(", ")
	builder.WriteString("step_number=")
	builder.WriteString(fmt.Sprintf("%v", sse.StepNumber))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sse.Status))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(sse.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(sse.EndTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SagaStepExecutions is a parsable slice of SagaStepExecution.
type SagaStepExecutions []*SagaStepExecution
