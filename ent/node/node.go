// Code generated by ent, DO NOT EDIT.

package node

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the node type in the database.
	Label = "node"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIndex holds the string denoting the index field in the database.
	FieldIndex = "index"
	// FieldParent holds the string denoting the parent field in the database.
	FieldParent = "parent"
	// EdgeHandlerTask holds the string denoting the handler_task edge name in mutations.
	EdgeHandlerTask = "handler_task"
	// EdgeSagaStepTask holds the string denoting the saga_step_task edge name in mutations.
	EdgeSagaStepTask = "saga_step_task"
	// EdgeSideEffectTask holds the string denoting the side_effect_task edge name in mutations.
	EdgeSideEffectTask = "side_effect_task"
	// EdgeCompensationTask holds the string denoting the compensation_task edge name in mutations.
	EdgeCompensationTask = "compensation_task"
	// Table holds the table name of the node in the database.
	Table = "nodes"
	// HandlerTaskTable is the table that holds the handler_task relation/edge.
	HandlerTaskTable = "handler_tasks"
	// HandlerTaskInverseTable is the table name for the HandlerTask entity.
	// It exists in this package in order to avoid circular dependency with the "handlertask" package.
	HandlerTaskInverseTable = "handler_tasks"
	// HandlerTaskColumn is the table column denoting the handler_task relation/edge.
	HandlerTaskColumn = "node_handler_task"
	// SagaStepTaskTable is the table that holds the saga_step_task relation/edge.
	SagaStepTaskTable = "saga_tasks"
	// SagaStepTaskInverseTable is the table name for the SagaTask entity.
	// It exists in this package in order to avoid circular dependency with the "sagatask" package.
	SagaStepTaskInverseTable = "saga_tasks"
	// SagaStepTaskColumn is the table column denoting the saga_step_task relation/edge.
	SagaStepTaskColumn = "node_saga_step_task"
	// SideEffectTaskTable is the table that holds the side_effect_task relation/edge.
	SideEffectTaskTable = "side_effect_tasks"
	// SideEffectTaskInverseTable is the table name for the SideEffectTask entity.
	// It exists in this package in order to avoid circular dependency with the "sideeffecttask" package.
	SideEffectTaskInverseTable = "side_effect_tasks"
	// SideEffectTaskColumn is the table column denoting the side_effect_task relation/edge.
	SideEffectTaskColumn = "node_side_effect_task"
	// CompensationTaskTable is the table that holds the compensation_task relation/edge.
	CompensationTaskTable = "compensation_tasks"
	// CompensationTaskInverseTable is the table name for the CompensationTask entity.
	// It exists in this package in order to avoid circular dependency with the "compensationtask" package.
	CompensationTaskInverseTable = "compensation_tasks"
	// CompensationTaskColumn is the table column denoting the compensation_task relation/edge.
	CompensationTaskColumn = "node_compensation_task"
)

// Columns holds all SQL columns for node fields.
var Columns = []string{
	FieldID,
	FieldIndex,
	FieldParent,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Node queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIndex orders the results by the index field.
func ByIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndex, opts...).ToFunc()
}

// ByParent orders the results by the parent field.
func ByParent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParent, opts...).ToFunc()
}

// ByHandlerTaskField orders the results by handler_task field.
func ByHandlerTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHandlerTaskStep(), sql.OrderByField(field, opts...))
	}
}

// BySagaStepTaskField orders the results by saga_step_task field.
func BySagaStepTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSagaStepTaskStep(), sql.OrderByField(field, opts...))
	}
}

// BySideEffectTaskField orders the results by side_effect_task field.
func BySideEffectTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSideEffectTaskStep(), sql.OrderByField(field, opts...))
	}
}

// ByCompensationTaskField orders the results by compensation_task field.
func ByCompensationTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompensationTaskStep(), sql.OrderByField(field, opts...))
	}
}
func newHandlerTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HandlerTaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, HandlerTaskTable, HandlerTaskColumn),
	)
}
func newSagaStepTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SagaStepTaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SagaStepTaskTable, SagaStepTaskColumn),
	)
}
func newSideEffectTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SideEffectTaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SideEffectTaskTable, SideEffectTaskColumn),
	)
}
func newCompensationTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompensationTaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CompensationTaskTable, CompensationTaskColumn),
	)
}
