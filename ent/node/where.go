// Code generated by ent, DO NOT EDIT.

package node

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldID, id))
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v int) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIndex, v))
}

// Parent applies equality check predicate on the "parent" field. It's identical to ParentEQ.
func Parent(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldParent, v))
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v int) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldIndex, v))
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v int) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldIndex, v))
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...int) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldIndex, vs...))
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...int) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldIndex, vs...))
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v int) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldIndex, v))
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v int) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldIndex, v))
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v int) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldIndex, v))
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v int) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldIndex, v))
}

// ParentEQ applies the EQ predicate on the "parent" field.
func ParentEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldParent, v))
}

// ParentNEQ applies the NEQ predicate on the "parent" field.
func ParentNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldParent, v))
}

// ParentIn applies the In predicate on the "parent" field.
func ParentIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldParent, vs...))
}

// ParentNotIn applies the NotIn predicate on the "parent" field.
func ParentNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldParent, vs...))
}

// ParentGT applies the GT predicate on the "parent" field.
func ParentGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldParent, v))
}

// ParentGTE applies the GTE predicate on the "parent" field.
func ParentGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldParent, v))
}

// ParentLT applies the LT predicate on the "parent" field.
func ParentLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldParent, v))
}

// ParentLTE applies the LTE predicate on the "parent" field.
func ParentLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldParent, v))
}

// ParentContains applies the Contains predicate on the "parent" field.
func ParentContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldParent, v))
}

// ParentHasPrefix applies the HasPrefix predicate on the "parent" field.
func ParentHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldParent, v))
}

// ParentHasSuffix applies the HasSuffix predicate on the "parent" field.
func ParentHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldParent, v))
}

// ParentIsNil applies the IsNil predicate on the "parent" field.
func ParentIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldParent))
}

// ParentNotNil applies the NotNil predicate on the "parent" field.
func ParentNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldParent))
}

// ParentEqualFold applies the EqualFold predicate on the "parent" field.
func ParentEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldParent, v))
}

// ParentContainsFold applies the ContainsFold predicate on the "parent" field.
func ParentContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldParent, v))
}

// HasHandlerTask applies the HasEdge predicate on the "handler_task" edge.
func HasHandlerTask() predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, HandlerTaskTable, HandlerTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHandlerTaskWith applies the HasEdge predicate on the "handler_task" edge with a given conditions (other predicates).
func HasHandlerTaskWith(preds ...predicate.HandlerTask) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := newHandlerTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSagaStepTask applies the HasEdge predicate on the "saga_step_task" edge.
func HasSagaStepTask() predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SagaStepTaskTable, SagaStepTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSagaStepTaskWith applies the HasEdge predicate on the "saga_step_task" edge with a given conditions (other predicates).
func HasSagaStepTaskWith(preds ...predicate.SagaTask) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := newSagaStepTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSideEffectTask applies the HasEdge predicate on the "side_effect_task" edge.
func HasSideEffectTask() predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SideEffectTaskTable, SideEffectTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSideEffectTaskWith applies the HasEdge predicate on the "side_effect_task" edge with a given conditions (other predicates).
func HasSideEffectTaskWith(preds ...predicate.SideEffectTask) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := newSideEffectTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompensationTask applies the HasEdge predicate on the "compensation_task" edge.
func HasCompensationTask() predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CompensationTaskTable, CompensationTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompensationTaskWith applies the HasEdge predicate on the "compensation_task" edge with a given conditions (other predicates).
func HasCompensationTaskWith(preds ...predicate.CompensationTask) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := newCompensationTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Node) predicate.Node {
	return predicate.Node(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Node) predicate.Node {
	return predicate.Node(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Node) predicate.Node {
	return predicate.Node(sql.NotPredicates(p))
}
