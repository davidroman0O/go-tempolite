// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/sideeffectresult"
)

// SideEffectResultCreate is the builder for creating a SideEffectResult entity.
type SideEffectResultCreate struct {
	config
	mutation *SideEffectResultMutation
	hooks    []Hook
}

// SetExecutionContextID sets the "execution_context_id" field.
func (serc *SideEffectResultCreate) SetExecutionContextID(s string) *SideEffectResultCreate {
	serc.mutation.SetExecutionContextID(s)
	return serc
}

// SetName sets the "name" field.
func (serc *SideEffectResultCreate) SetName(s string) *SideEffectResultCreate {
	serc.mutation.SetName(s)
	return serc
}

// SetResult sets the "result" field.
func (serc *SideEffectResultCreate) SetResult(b []byte) *SideEffectResultCreate {
	serc.mutation.SetResult(b)
	return serc
}

// SetID sets the "id" field.
func (serc *SideEffectResultCreate) SetID(s string) *SideEffectResultCreate {
	serc.mutation.SetID(s)
	return serc
}

// Mutation returns the SideEffectResultMutation object of the builder.
func (serc *SideEffectResultCreate) Mutation() *SideEffectResultMutation {
	return serc.mutation
}

// Save creates the SideEffectResult in the database.
func (serc *SideEffectResultCreate) Save(ctx context.Context) (*SideEffectResult, error) {
	return withHooks(ctx, serc.sqlSave, serc.mutation, serc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (serc *SideEffectResultCreate) SaveX(ctx context.Context) *SideEffectResult {
	v, err := serc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (serc *SideEffectResultCreate) Exec(ctx context.Context) error {
	_, err := serc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (serc *SideEffectResultCreate) ExecX(ctx context.Context) {
	if err := serc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (serc *SideEffectResultCreate) check() error {
	if _, ok := serc.mutation.ExecutionContextID(); !ok {
		return &ValidationError{Name: "execution_context_id", err: errors.New(`ent: missing required field "SideEffectResult.execution_context_id"`)}
	}
	if _, ok := serc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SideEffectResult.name"`)}
	}
	if _, ok := serc.mutation.Result(); !ok {
		return &ValidationError{Name: "result", err: errors.New(`ent: missing required field "SideEffectResult.result"`)}
	}
	return nil
}

func (serc *SideEffectResultCreate) sqlSave(ctx context.Context) (*SideEffectResult, error) {
	if err := serc.check(); err != nil {
		return nil, err
	}
	_node, _spec := serc.createSpec()
	if err := sqlgraph.CreateNode(ctx, serc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SideEffectResult.ID type: %T", _spec.ID.Value)
		}
	}
	serc.mutation.id = &_node.ID
	serc.mutation.done = true
	return _node, nil
}

func (serc *SideEffectResultCreate) createSpec() (*SideEffectResult, *sqlgraph.CreateSpec) {
	var (
		_node = &SideEffectResult{config: serc.config}
		_spec = sqlgraph.NewCreateSpec(sideeffectresult.Table, sqlgraph.NewFieldSpec(sideeffectresult.FieldID, field.TypeString))
	)
	if id, ok := serc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := serc.mutation.ExecutionContextID(); ok {
		_spec.SetField(sideeffectresult.FieldExecutionContextID, field.TypeString, value)
		_node.ExecutionContextID = value
	}
	if value, ok := serc.mutation.Name(); ok {
		_spec.SetField(sideeffectresult.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := serc.mutation.Result(); ok {
		_spec.SetField(sideeffectresult.FieldResult, field.TypeBytes, value)
		_node.Result = value
	}
	return _node, _spec
}

// SideEffectResultCreateBulk is the builder for creating many SideEffectResult entities in bulk.
type SideEffectResultCreateBulk struct {
	config
	err      error
	builders []*SideEffectResultCreate
}

// Save creates the SideEffectResult entities in the database.
func (sercb *SideEffectResultCreateBulk) Save(ctx context.Context) ([]*SideEffectResult, error) {
	if sercb.err != nil {
		return nil, sercb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sercb.builders))
	nodes := make([]*SideEffectResult, len(sercb.builders))
	mutators := make([]Mutator, len(sercb.builders))
	for i := range sercb.builders {
		func(i int, root context.Context) {
			builder := sercb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SideEffectResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sercb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sercb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sercb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sercb *SideEffectResultCreateBulk) SaveX(ctx context.Context) []*SideEffectResult {
	v, err := sercb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sercb *SideEffectResultCreateBulk) Exec(ctx context.Context) error {
	_, err := sercb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sercb *SideEffectResultCreateBulk) ExecX(ctx context.Context) {
	if err := sercb.Exec(ctx); err != nil {
		panic(err)
	}
}
