// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/executionunit"
	"github.com/davidroman0O/go-tempolite/ent/sagacompensation"
	"github.com/davidroman0O/go-tempolite/ent/sagatransaction"
	"github.com/davidroman0O/go-tempolite/ent/task"
)

// SagaCompensationCreate is the builder for creating a SagaCompensation entity.
type SagaCompensationCreate struct {
	config
	mutation *SagaCompensationMutation
	hooks    []Hook
}

// SetOrder sets the "order" field.
func (scc *SagaCompensationCreate) SetOrder(i int) *SagaCompensationCreate {
	scc.mutation.SetOrder(i)
	return scc
}

// SetNextCompensationName sets the "next_compensation_name" field.
func (scc *SagaCompensationCreate) SetNextCompensationName(s string) *SagaCompensationCreate {
	scc.mutation.SetNextCompensationName(s)
	return scc
}

// SetID sets the "id" field.
func (scc *SagaCompensationCreate) SetID(s string) *SagaCompensationCreate {
	scc.mutation.SetID(s)
	return scc
}

// SetExecutionUnitID sets the "execution_unit" edge to the ExecutionUnit entity by ID.
func (scc *SagaCompensationCreate) SetExecutionUnitID(id string) *SagaCompensationCreate {
	scc.mutation.SetExecutionUnitID(id)
	return scc
}

// SetNillableExecutionUnitID sets the "execution_unit" edge to the ExecutionUnit entity by ID if the given value is not nil.
func (scc *SagaCompensationCreate) SetNillableExecutionUnitID(id *string) *SagaCompensationCreate {
	if id != nil {
		scc = scc.SetExecutionUnitID(*id)
	}
	return scc
}

// SetExecutionUnit sets the "execution_unit" edge to the ExecutionUnit entity.
func (scc *SagaCompensationCreate) SetExecutionUnit(e *ExecutionUnit) *SagaCompensationCreate {
	return scc.SetExecutionUnitID(e.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (scc *SagaCompensationCreate) SetTaskID(id string) *SagaCompensationCreate {
	scc.mutation.SetTaskID(id)
	return scc
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (scc *SagaCompensationCreate) SetNillableTaskID(id *string) *SagaCompensationCreate {
	if id != nil {
		scc = scc.SetTaskID(*id)
	}
	return scc
}

// SetTask sets the "task" edge to the Task entity.
func (scc *SagaCompensationCreate) SetTask(t *Task) *SagaCompensationCreate {
	return scc.SetTaskID(t.ID)
}

// SetTransactionID sets the "transaction" edge to the SagaTransaction entity by ID.
func (scc *SagaCompensationCreate) SetTransactionID(id string) *SagaCompensationCreate {
	scc.mutation.SetTransactionID(id)
	return scc
}

// SetNillableTransactionID sets the "transaction" edge to the SagaTransaction entity by ID if the given value is not nil.
func (scc *SagaCompensationCreate) SetNillableTransactionID(id *string) *SagaCompensationCreate {
	if id != nil {
		scc = scc.SetTransactionID(*id)
	}
	return scc
}

// SetTransaction sets the "transaction" edge to the SagaTransaction entity.
func (scc *SagaCompensationCreate) SetTransaction(s *SagaTransaction) *SagaCompensationCreate {
	return scc.SetTransactionID(s.ID)
}

// Mutation returns the SagaCompensationMutation object of the builder.
func (scc *SagaCompensationCreate) Mutation() *SagaCompensationMutation {
	return scc.mutation
}

// Save creates the SagaCompensation in the database.
func (scc *SagaCompensationCreate) Save(ctx context.Context) (*SagaCompensation, error) {
	return withHooks(ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *SagaCompensationCreate) SaveX(ctx context.Context) *SagaCompensation {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *SagaCompensationCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *SagaCompensationCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *SagaCompensationCreate) check() error {
	if _, ok := scc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "SagaCompensation.order"`)}
	}
	if _, ok := scc.mutation.NextCompensationName(); !ok {
		return &ValidationError{Name: "next_compensation_name", err: errors.New(`ent: missing required field "SagaCompensation.next_compensation_name"`)}
	}
	return nil
}

func (scc *SagaCompensationCreate) sqlSave(ctx context.Context) (*SagaCompensation, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SagaCompensation.ID type: %T", _spec.ID.Value)
		}
	}
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *SagaCompensationCreate) createSpec() (*SagaCompensation, *sqlgraph.CreateSpec) {
	var (
		_node = &SagaCompensation{config: scc.config}
		_spec = sqlgraph.NewCreateSpec(sagacompensation.Table, sqlgraph.NewFieldSpec(sagacompensation.FieldID, field.TypeString))
	)
	if id, ok := scc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := scc.mutation.Order(); ok {
		_spec.SetField(sagacompensation.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := scc.mutation.NextCompensationName(); ok {
		_spec.SetField(sagacompensation.FieldNextCompensationName, field.TypeString, value)
		_node.NextCompensationName = value
	}
	if nodes := scc.mutation.ExecutionUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagacompensation.ExecutionUnitTable,
			Columns: []string{sagacompensation.ExecutionUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executionunit.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.execution_unit_saga_compensations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sagacompensation.TaskTable,
			Columns: []string{sagacompensation.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.saga_compensation_task = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := scc.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sagacompensation.TransactionTable,
			Columns: []string{sagacompensation.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagatransaction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.saga_transaction_compensation = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SagaCompensationCreateBulk is the builder for creating many SagaCompensation entities in bulk.
type SagaCompensationCreateBulk struct {
	config
	err      error
	builders []*SagaCompensationCreate
}

// Save creates the SagaCompensation entities in the database.
func (sccb *SagaCompensationCreateBulk) Save(ctx context.Context) ([]*SagaCompensation, error) {
	if sccb.err != nil {
		return nil, sccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*SagaCompensation, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SagaCompensationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *SagaCompensationCreateBulk) SaveX(ctx context.Context) []*SagaCompensation {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *SagaCompensationCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *SagaCompensationCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}
