// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/davidroman0O/go-tempolite/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/go-tempolite/ent/compensationtask"
	"github.com/davidroman0O/go-tempolite/ent/entry"
	"github.com/davidroman0O/go-tempolite/ent/execution"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/handlertask"
	"github.com/davidroman0O/go-tempolite/ent/node"
	"github.com/davidroman0O/go-tempolite/ent/sagatask"
	"github.com/davidroman0O/go-tempolite/ent/sideeffecttask"
	"github.com/davidroman0O/go-tempolite/ent/taskcontext"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CompensationTask is the client for interacting with the CompensationTask builders.
	CompensationTask *CompensationTaskClient
	// Entry is the client for interacting with the Entry builders.
	Entry *EntryClient
	// Execution is the client for interacting with the Execution builders.
	Execution *ExecutionClient
	// ExecutionContext is the client for interacting with the ExecutionContext builders.
	ExecutionContext *ExecutionContextClient
	// HandlerTask is the client for interacting with the HandlerTask builders.
	HandlerTask *HandlerTaskClient
	// Node is the client for interacting with the Node builders.
	Node *NodeClient
	// SagaTask is the client for interacting with the SagaTask builders.
	SagaTask *SagaTaskClient
	// SideEffectTask is the client for interacting with the SideEffectTask builders.
	SideEffectTask *SideEffectTaskClient
	// TaskContext is the client for interacting with the TaskContext builders.
	TaskContext *TaskContextClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CompensationTask = NewCompensationTaskClient(c.config)
	c.Entry = NewEntryClient(c.config)
	c.Execution = NewExecutionClient(c.config)
	c.ExecutionContext = NewExecutionContextClient(c.config)
	c.HandlerTask = NewHandlerTaskClient(c.config)
	c.Node = NewNodeClient(c.config)
	c.SagaTask = NewSagaTaskClient(c.config)
	c.SideEffectTask = NewSideEffectTaskClient(c.config)
	c.TaskContext = NewTaskContextClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		CompensationTask: NewCompensationTaskClient(cfg),
		Entry:            NewEntryClient(cfg),
		Execution:        NewExecutionClient(cfg),
		ExecutionContext: NewExecutionContextClient(cfg),
		HandlerTask:      NewHandlerTaskClient(cfg),
		Node:             NewNodeClient(cfg),
		SagaTask:         NewSagaTaskClient(cfg),
		SideEffectTask:   NewSideEffectTaskClient(cfg),
		TaskContext:      NewTaskContextClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		CompensationTask: NewCompensationTaskClient(cfg),
		Entry:            NewEntryClient(cfg),
		Execution:        NewExecutionClient(cfg),
		ExecutionContext: NewExecutionContextClient(cfg),
		HandlerTask:      NewHandlerTaskClient(cfg),
		Node:             NewNodeClient(cfg),
		SagaTask:         NewSagaTaskClient(cfg),
		SideEffectTask:   NewSideEffectTaskClient(cfg),
		TaskContext:      NewTaskContextClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CompensationTask.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.CompensationTask, c.Entry, c.Execution, c.ExecutionContext, c.HandlerTask,
		c.Node, c.SagaTask, c.SideEffectTask, c.TaskContext,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.CompensationTask, c.Entry, c.Execution, c.ExecutionContext, c.HandlerTask,
		c.Node, c.SagaTask, c.SideEffectTask, c.TaskContext,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CompensationTaskMutation:
		return c.CompensationTask.mutate(ctx, m)
	case *EntryMutation:
		return c.Entry.mutate(ctx, m)
	case *ExecutionMutation:
		return c.Execution.mutate(ctx, m)
	case *ExecutionContextMutation:
		return c.ExecutionContext.mutate(ctx, m)
	case *HandlerTaskMutation:
		return c.HandlerTask.mutate(ctx, m)
	case *NodeMutation:
		return c.Node.mutate(ctx, m)
	case *SagaTaskMutation:
		return c.SagaTask.mutate(ctx, m)
	case *SideEffectTaskMutation:
		return c.SideEffectTask.mutate(ctx, m)
	case *TaskContextMutation:
		return c.TaskContext.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CompensationTaskClient is a client for the CompensationTask schema.
type CompensationTaskClient struct {
	config
}

// NewCompensationTaskClient returns a client for the CompensationTask from the given config.
func NewCompensationTaskClient(c config) *CompensationTaskClient {
	return &CompensationTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `compensationtask.Hooks(f(g(h())))`.
func (c *CompensationTaskClient) Use(hooks ...Hook) {
	c.hooks.CompensationTask = append(c.hooks.CompensationTask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `compensationtask.Intercept(f(g(h())))`.
func (c *CompensationTaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.CompensationTask = append(c.inters.CompensationTask, interceptors...)
}

// Create returns a builder for creating a CompensationTask entity.
func (c *CompensationTaskClient) Create() *CompensationTaskCreate {
	mutation := newCompensationTaskMutation(c.config, OpCreate)
	return &CompensationTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CompensationTask entities.
func (c *CompensationTaskClient) CreateBulk(builders ...*CompensationTaskCreate) *CompensationTaskCreateBulk {
	return &CompensationTaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CompensationTaskClient) MapCreateBulk(slice any, setFunc func(*CompensationTaskCreate, int)) *CompensationTaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CompensationTaskCreateBulk{err: fmt.Errorf("calling to CompensationTaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CompensationTaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CompensationTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CompensationTask.
func (c *CompensationTaskClient) Update() *CompensationTaskUpdate {
	mutation := newCompensationTaskMutation(c.config, OpUpdate)
	return &CompensationTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompensationTaskClient) UpdateOne(ct *CompensationTask) *CompensationTaskUpdateOne {
	mutation := newCompensationTaskMutation(c.config, OpUpdateOne, withCompensationTask(ct))
	return &CompensationTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompensationTaskClient) UpdateOneID(id int) *CompensationTaskUpdateOne {
	mutation := newCompensationTaskMutation(c.config, OpUpdateOne, withCompensationTaskID(id))
	return &CompensationTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CompensationTask.
func (c *CompensationTaskClient) Delete() *CompensationTaskDelete {
	mutation := newCompensationTaskMutation(c.config, OpDelete)
	return &CompensationTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompensationTaskClient) DeleteOne(ct *CompensationTask) *CompensationTaskDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CompensationTaskClient) DeleteOneID(id int) *CompensationTaskDeleteOne {
	builder := c.Delete().Where(compensationtask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompensationTaskDeleteOne{builder}
}

// Query returns a query builder for CompensationTask.
func (c *CompensationTaskClient) Query() *CompensationTaskQuery {
	return &CompensationTaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCompensationTask},
		inters: c.Interceptors(),
	}
}

// Get returns a CompensationTask entity by its id.
func (c *CompensationTaskClient) Get(ctx context.Context, id int) (*CompensationTask, error) {
	return c.Query().Where(compensationtask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompensationTaskClient) GetX(ctx context.Context, id int) *CompensationTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNode queries the node edge of a CompensationTask.
func (c *CompensationTaskClient) QueryNode(ct *CompensationTask) *NodeQuery {
	query := (&NodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(compensationtask.Table, compensationtask.FieldID, id),
			sqlgraph.To(node.Table, node.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, compensationtask.NodeTable, compensationtask.NodeColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompensationTaskClient) Hooks() []Hook {
	return c.hooks.CompensationTask
}

// Interceptors returns the client interceptors.
func (c *CompensationTaskClient) Interceptors() []Interceptor {
	return c.inters.CompensationTask
}

func (c *CompensationTaskClient) mutate(ctx context.Context, m *CompensationTaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CompensationTaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CompensationTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CompensationTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CompensationTaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CompensationTask mutation op: %q", m.Op())
	}
}

// EntryClient is a client for the Entry schema.
type EntryClient struct {
	config
}

// NewEntryClient returns a client for the Entry from the given config.
func NewEntryClient(c config) *EntryClient {
	return &EntryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entry.Hooks(f(g(h())))`.
func (c *EntryClient) Use(hooks ...Hook) {
	c.hooks.Entry = append(c.hooks.Entry, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `entry.Intercept(f(g(h())))`.
func (c *EntryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Entry = append(c.inters.Entry, interceptors...)
}

// Create returns a builder for creating a Entry entity.
func (c *EntryClient) Create() *EntryCreate {
	mutation := newEntryMutation(c.config, OpCreate)
	return &EntryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Entry entities.
func (c *EntryClient) CreateBulk(builders ...*EntryCreate) *EntryCreateBulk {
	return &EntryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EntryClient) MapCreateBulk(slice any, setFunc func(*EntryCreate, int)) *EntryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EntryCreateBulk{err: fmt.Errorf("calling to EntryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EntryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EntryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Entry.
func (c *EntryClient) Update() *EntryUpdate {
	mutation := newEntryMutation(c.config, OpUpdate)
	return &EntryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntryClient) UpdateOne(e *Entry) *EntryUpdateOne {
	mutation := newEntryMutation(c.config, OpUpdateOne, withEntry(e))
	return &EntryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntryClient) UpdateOneID(id int) *EntryUpdateOne {
	mutation := newEntryMutation(c.config, OpUpdateOne, withEntryID(id))
	return &EntryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Entry.
func (c *EntryClient) Delete() *EntryDelete {
	mutation := newEntryMutation(c.config, OpDelete)
	return &EntryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntryClient) DeleteOne(e *Entry) *EntryDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntryClient) DeleteOneID(id int) *EntryDeleteOne {
	builder := c.Delete().Where(entry.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntryDeleteOne{builder}
}

// Query returns a query builder for Entry.
func (c *EntryClient) Query() *EntryQuery {
	return &EntryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEntry},
		inters: c.Interceptors(),
	}
}

// Get returns a Entry entity by its id.
func (c *EntryClient) Get(ctx context.Context, id int) (*Entry, error) {
	return c.Query().Where(entry.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntryClient) GetX(ctx context.Context, id int) *Entry {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExecutionContext queries the execution_context edge of a Entry.
func (c *EntryClient) QueryExecutionContext(e *Entry) *ExecutionContextQuery {
	query := (&ExecutionContextClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entry.Table, entry.FieldID, id),
			sqlgraph.To(executioncontext.Table, executioncontext.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, entry.ExecutionContextTable, entry.ExecutionContextColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHandlerTask queries the handler_task edge of a Entry.
func (c *EntryClient) QueryHandlerTask(e *Entry) *HandlerTaskQuery {
	query := (&HandlerTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entry.Table, entry.FieldID, id),
			sqlgraph.To(handlertask.Table, handlertask.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, entry.HandlerTaskTable, entry.HandlerTaskColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySagaStepTask queries the saga_step_task edge of a Entry.
func (c *EntryClient) QuerySagaStepTask(e *Entry) *SagaTaskQuery {
	query := (&SagaTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entry.Table, entry.FieldID, id),
			sqlgraph.To(sagatask.Table, sagatask.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, entry.SagaStepTaskTable, entry.SagaStepTaskColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySideEffectTask queries the side_effect_task edge of a Entry.
func (c *EntryClient) QuerySideEffectTask(e *Entry) *SideEffectTaskQuery {
	query := (&SideEffectTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entry.Table, entry.FieldID, id),
			sqlgraph.To(sideeffecttask.Table, sideeffecttask.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, entry.SideEffectTaskTable, entry.SideEffectTaskColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompensationTask queries the compensation_task edge of a Entry.
func (c *EntryClient) QueryCompensationTask(e *Entry) *CompensationTaskQuery {
	query := (&CompensationTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entry.Table, entry.FieldID, id),
			sqlgraph.To(compensationtask.Table, compensationtask.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, entry.CompensationTaskTable, entry.CompensationTaskColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EntryClient) Hooks() []Hook {
	return c.hooks.Entry
}

// Interceptors returns the client interceptors.
func (c *EntryClient) Interceptors() []Interceptor {
	return c.inters.Entry
}

func (c *EntryClient) mutate(ctx context.Context, m *EntryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EntryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EntryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EntryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EntryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Entry mutation op: %q", m.Op())
	}
}

// ExecutionClient is a client for the Execution schema.
type ExecutionClient struct {
	config
}

// NewExecutionClient returns a client for the Execution from the given config.
func NewExecutionClient(c config) *ExecutionClient {
	return &ExecutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `execution.Hooks(f(g(h())))`.
func (c *ExecutionClient) Use(hooks ...Hook) {
	c.hooks.Execution = append(c.hooks.Execution, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `execution.Intercept(f(g(h())))`.
func (c *ExecutionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Execution = append(c.inters.Execution, interceptors...)
}

// Create returns a builder for creating a Execution entity.
func (c *ExecutionClient) Create() *ExecutionCreate {
	mutation := newExecutionMutation(c.config, OpCreate)
	return &ExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Execution entities.
func (c *ExecutionClient) CreateBulk(builders ...*ExecutionCreate) *ExecutionCreateBulk {
	return &ExecutionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExecutionClient) MapCreateBulk(slice any, setFunc func(*ExecutionCreate, int)) *ExecutionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExecutionCreateBulk{err: fmt.Errorf("calling to ExecutionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExecutionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExecutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Execution.
func (c *ExecutionClient) Update() *ExecutionUpdate {
	mutation := newExecutionMutation(c.config, OpUpdate)
	return &ExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExecutionClient) UpdateOne(e *Execution) *ExecutionUpdateOne {
	mutation := newExecutionMutation(c.config, OpUpdateOne, withExecution(e))
	return &ExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExecutionClient) UpdateOneID(id string) *ExecutionUpdateOne {
	mutation := newExecutionMutation(c.config, OpUpdateOne, withExecutionID(id))
	return &ExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Execution.
func (c *ExecutionClient) Delete() *ExecutionDelete {
	mutation := newExecutionMutation(c.config, OpDelete)
	return &ExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExecutionClient) DeleteOne(e *Execution) *ExecutionDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExecutionClient) DeleteOneID(id string) *ExecutionDeleteOne {
	builder := c.Delete().Where(execution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExecutionDeleteOne{builder}
}

// Query returns a query builder for Execution.
func (c *ExecutionClient) Query() *ExecutionQuery {
	return &ExecutionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExecution},
		inters: c.Interceptors(),
	}
}

// Get returns a Execution entity by its id.
func (c *ExecutionClient) Get(ctx context.Context, id string) (*Execution, error) {
	return c.Query().Where(execution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExecutionClient) GetX(ctx context.Context, id string) *Execution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExecutionContext queries the execution_context edge of a Execution.
func (c *ExecutionClient) QueryExecutionContext(e *Execution) *ExecutionContextQuery {
	query := (&ExecutionContextClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(execution.Table, execution.FieldID, id),
			sqlgraph.To(executioncontext.Table, executioncontext.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, execution.ExecutionContextTable, execution.ExecutionContextColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExecutionClient) Hooks() []Hook {
	return c.hooks.Execution
}

// Interceptors returns the client interceptors.
func (c *ExecutionClient) Interceptors() []Interceptor {
	return c.inters.Execution
}

func (c *ExecutionClient) mutate(ctx context.Context, m *ExecutionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Execution mutation op: %q", m.Op())
	}
}

// ExecutionContextClient is a client for the ExecutionContext schema.
type ExecutionContextClient struct {
	config
}

// NewExecutionContextClient returns a client for the ExecutionContext from the given config.
func NewExecutionContextClient(c config) *ExecutionContextClient {
	return &ExecutionContextClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `executioncontext.Hooks(f(g(h())))`.
func (c *ExecutionContextClient) Use(hooks ...Hook) {
	c.hooks.ExecutionContext = append(c.hooks.ExecutionContext, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `executioncontext.Intercept(f(g(h())))`.
func (c *ExecutionContextClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExecutionContext = append(c.inters.ExecutionContext, interceptors...)
}

// Create returns a builder for creating a ExecutionContext entity.
func (c *ExecutionContextClient) Create() *ExecutionContextCreate {
	mutation := newExecutionContextMutation(c.config, OpCreate)
	return &ExecutionContextCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExecutionContext entities.
func (c *ExecutionContextClient) CreateBulk(builders ...*ExecutionContextCreate) *ExecutionContextCreateBulk {
	return &ExecutionContextCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExecutionContextClient) MapCreateBulk(slice any, setFunc func(*ExecutionContextCreate, int)) *ExecutionContextCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExecutionContextCreateBulk{err: fmt.Errorf("calling to ExecutionContextClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExecutionContextCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExecutionContextCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExecutionContext.
func (c *ExecutionContextClient) Update() *ExecutionContextUpdate {
	mutation := newExecutionContextMutation(c.config, OpUpdate)
	return &ExecutionContextUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExecutionContextClient) UpdateOne(ec *ExecutionContext) *ExecutionContextUpdateOne {
	mutation := newExecutionContextMutation(c.config, OpUpdateOne, withExecutionContext(ec))
	return &ExecutionContextUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExecutionContextClient) UpdateOneID(id string) *ExecutionContextUpdateOne {
	mutation := newExecutionContextMutation(c.config, OpUpdateOne, withExecutionContextID(id))
	return &ExecutionContextUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExecutionContext.
func (c *ExecutionContextClient) Delete() *ExecutionContextDelete {
	mutation := newExecutionContextMutation(c.config, OpDelete)
	return &ExecutionContextDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExecutionContextClient) DeleteOne(ec *ExecutionContext) *ExecutionContextDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExecutionContextClient) DeleteOneID(id string) *ExecutionContextDeleteOne {
	builder := c.Delete().Where(executioncontext.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExecutionContextDeleteOne{builder}
}

// Query returns a query builder for ExecutionContext.
func (c *ExecutionContextClient) Query() *ExecutionContextQuery {
	return &ExecutionContextQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExecutionContext},
		inters: c.Interceptors(),
	}
}

// Get returns a ExecutionContext entity by its id.
func (c *ExecutionContextClient) Get(ctx context.Context, id string) (*ExecutionContext, error) {
	return c.Query().Where(executioncontext.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExecutionContextClient) GetX(ctx context.Context, id string) *ExecutionContext {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExecutionContextClient) Hooks() []Hook {
	return c.hooks.ExecutionContext
}

// Interceptors returns the client interceptors.
func (c *ExecutionContextClient) Interceptors() []Interceptor {
	return c.inters.ExecutionContext
}

func (c *ExecutionContextClient) mutate(ctx context.Context, m *ExecutionContextMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExecutionContextCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExecutionContextUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExecutionContextUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExecutionContextDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExecutionContext mutation op: %q", m.Op())
	}
}

// HandlerTaskClient is a client for the HandlerTask schema.
type HandlerTaskClient struct {
	config
}

// NewHandlerTaskClient returns a client for the HandlerTask from the given config.
func NewHandlerTaskClient(c config) *HandlerTaskClient {
	return &HandlerTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `handlertask.Hooks(f(g(h())))`.
func (c *HandlerTaskClient) Use(hooks ...Hook) {
	c.hooks.HandlerTask = append(c.hooks.HandlerTask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `handlertask.Intercept(f(g(h())))`.
func (c *HandlerTaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.HandlerTask = append(c.inters.HandlerTask, interceptors...)
}

// Create returns a builder for creating a HandlerTask entity.
func (c *HandlerTaskClient) Create() *HandlerTaskCreate {
	mutation := newHandlerTaskMutation(c.config, OpCreate)
	return &HandlerTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HandlerTask entities.
func (c *HandlerTaskClient) CreateBulk(builders ...*HandlerTaskCreate) *HandlerTaskCreateBulk {
	return &HandlerTaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HandlerTaskClient) MapCreateBulk(slice any, setFunc func(*HandlerTaskCreate, int)) *HandlerTaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HandlerTaskCreateBulk{err: fmt.Errorf("calling to HandlerTaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HandlerTaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HandlerTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HandlerTask.
func (c *HandlerTaskClient) Update() *HandlerTaskUpdate {
	mutation := newHandlerTaskMutation(c.config, OpUpdate)
	return &HandlerTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HandlerTaskClient) UpdateOne(ht *HandlerTask) *HandlerTaskUpdateOne {
	mutation := newHandlerTaskMutation(c.config, OpUpdateOne, withHandlerTask(ht))
	return &HandlerTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HandlerTaskClient) UpdateOneID(id string) *HandlerTaskUpdateOne {
	mutation := newHandlerTaskMutation(c.config, OpUpdateOne, withHandlerTaskID(id))
	return &HandlerTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HandlerTask.
func (c *HandlerTaskClient) Delete() *HandlerTaskDelete {
	mutation := newHandlerTaskMutation(c.config, OpDelete)
	return &HandlerTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HandlerTaskClient) DeleteOne(ht *HandlerTask) *HandlerTaskDeleteOne {
	return c.DeleteOneID(ht.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HandlerTaskClient) DeleteOneID(id string) *HandlerTaskDeleteOne {
	builder := c.Delete().Where(handlertask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HandlerTaskDeleteOne{builder}
}

// Query returns a query builder for HandlerTask.
func (c *HandlerTaskClient) Query() *HandlerTaskQuery {
	return &HandlerTaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHandlerTask},
		inters: c.Interceptors(),
	}
}

// Get returns a HandlerTask entity by its id.
func (c *HandlerTaskClient) Get(ctx context.Context, id string) (*HandlerTask, error) {
	return c.Query().Where(handlertask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HandlerTaskClient) GetX(ctx context.Context, id string) *HandlerTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTaskContext queries the task_context edge of a HandlerTask.
func (c *HandlerTaskClient) QueryTaskContext(ht *HandlerTask) *TaskContextQuery {
	query := (&TaskContextClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ht.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(handlertask.Table, handlertask.FieldID, id),
			sqlgraph.To(taskcontext.Table, taskcontext.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, handlertask.TaskContextTable, handlertask.TaskContextColumn),
		)
		fromV = sqlgraph.Neighbors(ht.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExecutionContext queries the execution_context edge of a HandlerTask.
func (c *HandlerTaskClient) QueryExecutionContext(ht *HandlerTask) *ExecutionContextQuery {
	query := (&ExecutionContextClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ht.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(handlertask.Table, handlertask.FieldID, id),
			sqlgraph.To(executioncontext.Table, executioncontext.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, handlertask.ExecutionContextTable, handlertask.ExecutionContextColumn),
		)
		fromV = sqlgraph.Neighbors(ht.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNode queries the node edge of a HandlerTask.
func (c *HandlerTaskClient) QueryNode(ht *HandlerTask) *NodeQuery {
	query := (&NodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ht.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(handlertask.Table, handlertask.FieldID, id),
			sqlgraph.To(node.Table, node.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, handlertask.NodeTable, handlertask.NodeColumn),
		)
		fromV = sqlgraph.Neighbors(ht.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HandlerTaskClient) Hooks() []Hook {
	return c.hooks.HandlerTask
}

// Interceptors returns the client interceptors.
func (c *HandlerTaskClient) Interceptors() []Interceptor {
	return c.inters.HandlerTask
}

func (c *HandlerTaskClient) mutate(ctx context.Context, m *HandlerTaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HandlerTaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HandlerTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HandlerTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HandlerTaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HandlerTask mutation op: %q", m.Op())
	}
}

// NodeClient is a client for the Node schema.
type NodeClient struct {
	config
}

// NewNodeClient returns a client for the Node from the given config.
func NewNodeClient(c config) *NodeClient {
	return &NodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `node.Hooks(f(g(h())))`.
func (c *NodeClient) Use(hooks ...Hook) {
	c.hooks.Node = append(c.hooks.Node, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `node.Intercept(f(g(h())))`.
func (c *NodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Node = append(c.inters.Node, interceptors...)
}

// Create returns a builder for creating a Node entity.
func (c *NodeClient) Create() *NodeCreate {
	mutation := newNodeMutation(c.config, OpCreate)
	return &NodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Node entities.
func (c *NodeClient) CreateBulk(builders ...*NodeCreate) *NodeCreateBulk {
	return &NodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NodeClient) MapCreateBulk(slice any, setFunc func(*NodeCreate, int)) *NodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NodeCreateBulk{err: fmt.Errorf("calling to NodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Node.
func (c *NodeClient) Update() *NodeUpdate {
	mutation := newNodeMutation(c.config, OpUpdate)
	return &NodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NodeClient) UpdateOne(n *Node) *NodeUpdateOne {
	mutation := newNodeMutation(c.config, OpUpdateOne, withNode(n))
	return &NodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NodeClient) UpdateOneID(id string) *NodeUpdateOne {
	mutation := newNodeMutation(c.config, OpUpdateOne, withNodeID(id))
	return &NodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Node.
func (c *NodeClient) Delete() *NodeDelete {
	mutation := newNodeMutation(c.config, OpDelete)
	return &NodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NodeClient) DeleteOne(n *Node) *NodeDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NodeClient) DeleteOneID(id string) *NodeDeleteOne {
	builder := c.Delete().Where(node.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NodeDeleteOne{builder}
}

// Query returns a query builder for Node.
func (c *NodeClient) Query() *NodeQuery {
	return &NodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNode},
		inters: c.Interceptors(),
	}
}

// Get returns a Node entity by its id.
func (c *NodeClient) Get(ctx context.Context, id string) (*Node, error) {
	return c.Query().Where(node.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NodeClient) GetX(ctx context.Context, id string) *Node {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChildren queries the children edge of a Node.
func (c *NodeClient) QueryChildren(n *Node) *NodeQuery {
	query := (&NodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(node.Table, node.FieldID, id),
			sqlgraph.To(node.Table, node.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, node.ChildrenTable, node.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Node.
func (c *NodeClient) QueryParent(n *Node) *NodeQuery {
	query := (&NodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(node.Table, node.FieldID, id),
			sqlgraph.To(node.Table, node.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, node.ParentTable, node.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHandlerTask queries the handler_task edge of a Node.
func (c *NodeClient) QueryHandlerTask(n *Node) *HandlerTaskQuery {
	query := (&HandlerTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(node.Table, node.FieldID, id),
			sqlgraph.To(handlertask.Table, handlertask.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, node.HandlerTaskTable, node.HandlerTaskColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySagaStepTask queries the saga_step_task edge of a Node.
func (c *NodeClient) QuerySagaStepTask(n *Node) *SagaTaskQuery {
	query := (&SagaTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(node.Table, node.FieldID, id),
			sqlgraph.To(sagatask.Table, sagatask.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, node.SagaStepTaskTable, node.SagaStepTaskColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySideEffectTask queries the side_effect_task edge of a Node.
func (c *NodeClient) QuerySideEffectTask(n *Node) *SideEffectTaskQuery {
	query := (&SideEffectTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(node.Table, node.FieldID, id),
			sqlgraph.To(sideeffecttask.Table, sideeffecttask.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, node.SideEffectTaskTable, node.SideEffectTaskColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompensationTask queries the compensation_task edge of a Node.
func (c *NodeClient) QueryCompensationTask(n *Node) *CompensationTaskQuery {
	query := (&CompensationTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(node.Table, node.FieldID, id),
			sqlgraph.To(compensationtask.Table, compensationtask.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, node.CompensationTaskTable, node.CompensationTaskColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NodeClient) Hooks() []Hook {
	return c.hooks.Node
}

// Interceptors returns the client interceptors.
func (c *NodeClient) Interceptors() []Interceptor {
	return c.inters.Node
}

func (c *NodeClient) mutate(ctx context.Context, m *NodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Node mutation op: %q", m.Op())
	}
}

// SagaTaskClient is a client for the SagaTask schema.
type SagaTaskClient struct {
	config
}

// NewSagaTaskClient returns a client for the SagaTask from the given config.
func NewSagaTaskClient(c config) *SagaTaskClient {
	return &SagaTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sagatask.Hooks(f(g(h())))`.
func (c *SagaTaskClient) Use(hooks ...Hook) {
	c.hooks.SagaTask = append(c.hooks.SagaTask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sagatask.Intercept(f(g(h())))`.
func (c *SagaTaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.SagaTask = append(c.inters.SagaTask, interceptors...)
}

// Create returns a builder for creating a SagaTask entity.
func (c *SagaTaskClient) Create() *SagaTaskCreate {
	mutation := newSagaTaskMutation(c.config, OpCreate)
	return &SagaTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SagaTask entities.
func (c *SagaTaskClient) CreateBulk(builders ...*SagaTaskCreate) *SagaTaskCreateBulk {
	return &SagaTaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SagaTaskClient) MapCreateBulk(slice any, setFunc func(*SagaTaskCreate, int)) *SagaTaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SagaTaskCreateBulk{err: fmt.Errorf("calling to SagaTaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SagaTaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SagaTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SagaTask.
func (c *SagaTaskClient) Update() *SagaTaskUpdate {
	mutation := newSagaTaskMutation(c.config, OpUpdate)
	return &SagaTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SagaTaskClient) UpdateOne(st *SagaTask) *SagaTaskUpdateOne {
	mutation := newSagaTaskMutation(c.config, OpUpdateOne, withSagaTask(st))
	return &SagaTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SagaTaskClient) UpdateOneID(id int) *SagaTaskUpdateOne {
	mutation := newSagaTaskMutation(c.config, OpUpdateOne, withSagaTaskID(id))
	return &SagaTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SagaTask.
func (c *SagaTaskClient) Delete() *SagaTaskDelete {
	mutation := newSagaTaskMutation(c.config, OpDelete)
	return &SagaTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SagaTaskClient) DeleteOne(st *SagaTask) *SagaTaskDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SagaTaskClient) DeleteOneID(id int) *SagaTaskDeleteOne {
	builder := c.Delete().Where(sagatask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SagaTaskDeleteOne{builder}
}

// Query returns a query builder for SagaTask.
func (c *SagaTaskClient) Query() *SagaTaskQuery {
	return &SagaTaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSagaTask},
		inters: c.Interceptors(),
	}
}

// Get returns a SagaTask entity by its id.
func (c *SagaTaskClient) Get(ctx context.Context, id int) (*SagaTask, error) {
	return c.Query().Where(sagatask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SagaTaskClient) GetX(ctx context.Context, id int) *SagaTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNode queries the node edge of a SagaTask.
func (c *SagaTaskClient) QueryNode(st *SagaTask) *NodeQuery {
	query := (&NodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sagatask.Table, sagatask.FieldID, id),
			sqlgraph.To(node.Table, node.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, sagatask.NodeTable, sagatask.NodeColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SagaTaskClient) Hooks() []Hook {
	return c.hooks.SagaTask
}

// Interceptors returns the client interceptors.
func (c *SagaTaskClient) Interceptors() []Interceptor {
	return c.inters.SagaTask
}

func (c *SagaTaskClient) mutate(ctx context.Context, m *SagaTaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SagaTaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SagaTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SagaTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SagaTaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SagaTask mutation op: %q", m.Op())
	}
}

// SideEffectTaskClient is a client for the SideEffectTask schema.
type SideEffectTaskClient struct {
	config
}

// NewSideEffectTaskClient returns a client for the SideEffectTask from the given config.
func NewSideEffectTaskClient(c config) *SideEffectTaskClient {
	return &SideEffectTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sideeffecttask.Hooks(f(g(h())))`.
func (c *SideEffectTaskClient) Use(hooks ...Hook) {
	c.hooks.SideEffectTask = append(c.hooks.SideEffectTask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sideeffecttask.Intercept(f(g(h())))`.
func (c *SideEffectTaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.SideEffectTask = append(c.inters.SideEffectTask, interceptors...)
}

// Create returns a builder for creating a SideEffectTask entity.
func (c *SideEffectTaskClient) Create() *SideEffectTaskCreate {
	mutation := newSideEffectTaskMutation(c.config, OpCreate)
	return &SideEffectTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SideEffectTask entities.
func (c *SideEffectTaskClient) CreateBulk(builders ...*SideEffectTaskCreate) *SideEffectTaskCreateBulk {
	return &SideEffectTaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SideEffectTaskClient) MapCreateBulk(slice any, setFunc func(*SideEffectTaskCreate, int)) *SideEffectTaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SideEffectTaskCreateBulk{err: fmt.Errorf("calling to SideEffectTaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SideEffectTaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SideEffectTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SideEffectTask.
func (c *SideEffectTaskClient) Update() *SideEffectTaskUpdate {
	mutation := newSideEffectTaskMutation(c.config, OpUpdate)
	return &SideEffectTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SideEffectTaskClient) UpdateOne(set *SideEffectTask) *SideEffectTaskUpdateOne {
	mutation := newSideEffectTaskMutation(c.config, OpUpdateOne, withSideEffectTask(set))
	return &SideEffectTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SideEffectTaskClient) UpdateOneID(id int) *SideEffectTaskUpdateOne {
	mutation := newSideEffectTaskMutation(c.config, OpUpdateOne, withSideEffectTaskID(id))
	return &SideEffectTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SideEffectTask.
func (c *SideEffectTaskClient) Delete() *SideEffectTaskDelete {
	mutation := newSideEffectTaskMutation(c.config, OpDelete)
	return &SideEffectTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SideEffectTaskClient) DeleteOne(set *SideEffectTask) *SideEffectTaskDeleteOne {
	return c.DeleteOneID(set.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SideEffectTaskClient) DeleteOneID(id int) *SideEffectTaskDeleteOne {
	builder := c.Delete().Where(sideeffecttask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SideEffectTaskDeleteOne{builder}
}

// Query returns a query builder for SideEffectTask.
func (c *SideEffectTaskClient) Query() *SideEffectTaskQuery {
	return &SideEffectTaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSideEffectTask},
		inters: c.Interceptors(),
	}
}

// Get returns a SideEffectTask entity by its id.
func (c *SideEffectTaskClient) Get(ctx context.Context, id int) (*SideEffectTask, error) {
	return c.Query().Where(sideeffecttask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SideEffectTaskClient) GetX(ctx context.Context, id int) *SideEffectTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNode queries the node edge of a SideEffectTask.
func (c *SideEffectTaskClient) QueryNode(set *SideEffectTask) *NodeQuery {
	query := (&NodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := set.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sideeffecttask.Table, sideeffecttask.FieldID, id),
			sqlgraph.To(node.Table, node.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, sideeffecttask.NodeTable, sideeffecttask.NodeColumn),
		)
		fromV = sqlgraph.Neighbors(set.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SideEffectTaskClient) Hooks() []Hook {
	return c.hooks.SideEffectTask
}

// Interceptors returns the client interceptors.
func (c *SideEffectTaskClient) Interceptors() []Interceptor {
	return c.inters.SideEffectTask
}

func (c *SideEffectTaskClient) mutate(ctx context.Context, m *SideEffectTaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SideEffectTaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SideEffectTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SideEffectTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SideEffectTaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SideEffectTask mutation op: %q", m.Op())
	}
}

// TaskContextClient is a client for the TaskContext schema.
type TaskContextClient struct {
	config
}

// NewTaskContextClient returns a client for the TaskContext from the given config.
func NewTaskContextClient(c config) *TaskContextClient {
	return &TaskContextClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taskcontext.Hooks(f(g(h())))`.
func (c *TaskContextClient) Use(hooks ...Hook) {
	c.hooks.TaskContext = append(c.hooks.TaskContext, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `taskcontext.Intercept(f(g(h())))`.
func (c *TaskContextClient) Intercept(interceptors ...Interceptor) {
	c.inters.TaskContext = append(c.inters.TaskContext, interceptors...)
}

// Create returns a builder for creating a TaskContext entity.
func (c *TaskContextClient) Create() *TaskContextCreate {
	mutation := newTaskContextMutation(c.config, OpCreate)
	return &TaskContextCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskContext entities.
func (c *TaskContextClient) CreateBulk(builders ...*TaskContextCreate) *TaskContextCreateBulk {
	return &TaskContextCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaskContextClient) MapCreateBulk(slice any, setFunc func(*TaskContextCreate, int)) *TaskContextCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaskContextCreateBulk{err: fmt.Errorf("calling to TaskContextClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaskContextCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaskContextCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskContext.
func (c *TaskContextClient) Update() *TaskContextUpdate {
	mutation := newTaskContextMutation(c.config, OpUpdate)
	return &TaskContextUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskContextClient) UpdateOne(tc *TaskContext) *TaskContextUpdateOne {
	mutation := newTaskContextMutation(c.config, OpUpdateOne, withTaskContext(tc))
	return &TaskContextUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskContextClient) UpdateOneID(id string) *TaskContextUpdateOne {
	mutation := newTaskContextMutation(c.config, OpUpdateOne, withTaskContextID(id))
	return &TaskContextUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskContext.
func (c *TaskContextClient) Delete() *TaskContextDelete {
	mutation := newTaskContextMutation(c.config, OpDelete)
	return &TaskContextDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskContextClient) DeleteOne(tc *TaskContext) *TaskContextDeleteOne {
	return c.DeleteOneID(tc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskContextClient) DeleteOneID(id string) *TaskContextDeleteOne {
	builder := c.Delete().Where(taskcontext.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskContextDeleteOne{builder}
}

// Query returns a query builder for TaskContext.
func (c *TaskContextClient) Query() *TaskContextQuery {
	return &TaskContextQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTaskContext},
		inters: c.Interceptors(),
	}
}

// Get returns a TaskContext entity by its id.
func (c *TaskContextClient) Get(ctx context.Context, id string) (*TaskContext, error) {
	return c.Query().Where(taskcontext.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskContextClient) GetX(ctx context.Context, id string) *TaskContext {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskContextClient) Hooks() []Hook {
	return c.hooks.TaskContext
}

// Interceptors returns the client interceptors.
func (c *TaskContextClient) Interceptors() []Interceptor {
	return c.inters.TaskContext
}

func (c *TaskContextClient) mutate(ctx context.Context, m *TaskContextMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskContextCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskContextUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskContextUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskContextDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TaskContext mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		CompensationTask, Entry, Execution, ExecutionContext, HandlerTask, Node,
		SagaTask, SideEffectTask, TaskContext []ent.Hook
	}
	inters struct {
		CompensationTask, Entry, Execution, ExecutionContext, HandlerTask, Node,
		SagaTask, SideEffectTask, TaskContext []ent.Interceptor
	}
)
