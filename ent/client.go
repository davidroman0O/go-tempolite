// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/davidroman0O/go-tempolite/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/handlerexecution"
	"github.com/davidroman0O/go-tempolite/ent/handlertask"
	"github.com/davidroman0O/go-tempolite/ent/sagaexecution"
	"github.com/davidroman0O/go-tempolite/ent/sagastepexecution"
	"github.com/davidroman0O/go-tempolite/ent/sideeffectresult"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ExecutionContext is the client for interacting with the ExecutionContext builders.
	ExecutionContext *ExecutionContextClient
	// HandlerExecution is the client for interacting with the HandlerExecution builders.
	HandlerExecution *HandlerExecutionClient
	// HandlerTask is the client for interacting with the HandlerTask builders.
	HandlerTask *HandlerTaskClient
	// SagaExecution is the client for interacting with the SagaExecution builders.
	SagaExecution *SagaExecutionClient
	// SagaStepExecution is the client for interacting with the SagaStepExecution builders.
	SagaStepExecution *SagaStepExecutionClient
	// SideEffectResult is the client for interacting with the SideEffectResult builders.
	SideEffectResult *SideEffectResultClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ExecutionContext = NewExecutionContextClient(c.config)
	c.HandlerExecution = NewHandlerExecutionClient(c.config)
	c.HandlerTask = NewHandlerTaskClient(c.config)
	c.SagaExecution = NewSagaExecutionClient(c.config)
	c.SagaStepExecution = NewSagaStepExecutionClient(c.config)
	c.SideEffectResult = NewSideEffectResultClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		ExecutionContext:  NewExecutionContextClient(cfg),
		HandlerExecution:  NewHandlerExecutionClient(cfg),
		HandlerTask:       NewHandlerTaskClient(cfg),
		SagaExecution:     NewSagaExecutionClient(cfg),
		SagaStepExecution: NewSagaStepExecutionClient(cfg),
		SideEffectResult:  NewSideEffectResultClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		ExecutionContext:  NewExecutionContextClient(cfg),
		HandlerExecution:  NewHandlerExecutionClient(cfg),
		HandlerTask:       NewHandlerTaskClient(cfg),
		SagaExecution:     NewSagaExecutionClient(cfg),
		SagaStepExecution: NewSagaStepExecutionClient(cfg),
		SideEffectResult:  NewSideEffectResultClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ExecutionContext.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.ExecutionContext, c.HandlerExecution, c.HandlerTask, c.SagaExecution,
		c.SagaStepExecution, c.SideEffectResult,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.ExecutionContext, c.HandlerExecution, c.HandlerTask, c.SagaExecution,
		c.SagaStepExecution, c.SideEffectResult,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ExecutionContextMutation:
		return c.ExecutionContext.mutate(ctx, m)
	case *HandlerExecutionMutation:
		return c.HandlerExecution.mutate(ctx, m)
	case *HandlerTaskMutation:
		return c.HandlerTask.mutate(ctx, m)
	case *SagaExecutionMutation:
		return c.SagaExecution.mutate(ctx, m)
	case *SagaStepExecutionMutation:
		return c.SagaStepExecution.mutate(ctx, m)
	case *SideEffectResultMutation:
		return c.SideEffectResult.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ExecutionContextClient is a client for the ExecutionContext schema.
type ExecutionContextClient struct {
	config
}

// NewExecutionContextClient returns a client for the ExecutionContext from the given config.
func NewExecutionContextClient(c config) *ExecutionContextClient {
	return &ExecutionContextClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `executioncontext.Hooks(f(g(h())))`.
func (c *ExecutionContextClient) Use(hooks ...Hook) {
	c.hooks.ExecutionContext = append(c.hooks.ExecutionContext, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `executioncontext.Intercept(f(g(h())))`.
func (c *ExecutionContextClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExecutionContext = append(c.inters.ExecutionContext, interceptors...)
}

// Create returns a builder for creating a ExecutionContext entity.
func (c *ExecutionContextClient) Create() *ExecutionContextCreate {
	mutation := newExecutionContextMutation(c.config, OpCreate)
	return &ExecutionContextCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExecutionContext entities.
func (c *ExecutionContextClient) CreateBulk(builders ...*ExecutionContextCreate) *ExecutionContextCreateBulk {
	return &ExecutionContextCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExecutionContextClient) MapCreateBulk(slice any, setFunc func(*ExecutionContextCreate, int)) *ExecutionContextCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExecutionContextCreateBulk{err: fmt.Errorf("calling to ExecutionContextClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExecutionContextCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExecutionContextCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExecutionContext.
func (c *ExecutionContextClient) Update() *ExecutionContextUpdate {
	mutation := newExecutionContextMutation(c.config, OpUpdate)
	return &ExecutionContextUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExecutionContextClient) UpdateOne(ec *ExecutionContext) *ExecutionContextUpdateOne {
	mutation := newExecutionContextMutation(c.config, OpUpdateOne, withExecutionContext(ec))
	return &ExecutionContextUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExecutionContextClient) UpdateOneID(id string) *ExecutionContextUpdateOne {
	mutation := newExecutionContextMutation(c.config, OpUpdateOne, withExecutionContextID(id))
	return &ExecutionContextUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExecutionContext.
func (c *ExecutionContextClient) Delete() *ExecutionContextDelete {
	mutation := newExecutionContextMutation(c.config, OpDelete)
	return &ExecutionContextDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExecutionContextClient) DeleteOne(ec *ExecutionContext) *ExecutionContextDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExecutionContextClient) DeleteOneID(id string) *ExecutionContextDeleteOne {
	builder := c.Delete().Where(executioncontext.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExecutionContextDeleteOne{builder}
}

// Query returns a query builder for ExecutionContext.
func (c *ExecutionContextClient) Query() *ExecutionContextQuery {
	return &ExecutionContextQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExecutionContext},
		inters: c.Interceptors(),
	}
}

// Get returns a ExecutionContext entity by its id.
func (c *ExecutionContextClient) Get(ctx context.Context, id string) (*ExecutionContext, error) {
	return c.Query().Where(executioncontext.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExecutionContextClient) GetX(ctx context.Context, id string) *ExecutionContext {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHandlerExecutions queries the handler_executions edge of a ExecutionContext.
func (c *ExecutionContextClient) QueryHandlerExecutions(ec *ExecutionContext) *HandlerExecutionQuery {
	query := (&HandlerExecutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(executioncontext.Table, executioncontext.FieldID, id),
			sqlgraph.To(handlerexecution.Table, handlerexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, executioncontext.HandlerExecutionsTable, executioncontext.HandlerExecutionsColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySideEffectResults queries the side_effect_results edge of a ExecutionContext.
func (c *ExecutionContextClient) QuerySideEffectResults(ec *ExecutionContext) *SideEffectResultQuery {
	query := (&SideEffectResultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(executioncontext.Table, executioncontext.FieldID, id),
			sqlgraph.To(sideeffectresult.Table, sideeffectresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, executioncontext.SideEffectResultsTable, executioncontext.SideEffectResultsColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySagaExecutions queries the saga_executions edge of a ExecutionContext.
func (c *ExecutionContextClient) QuerySagaExecutions(ec *ExecutionContext) *SagaExecutionQuery {
	query := (&SagaExecutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(executioncontext.Table, executioncontext.FieldID, id),
			sqlgraph.To(sagaexecution.Table, sagaexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, executioncontext.SagaExecutionsTable, executioncontext.SagaExecutionsColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExecutionContextClient) Hooks() []Hook {
	return c.hooks.ExecutionContext
}

// Interceptors returns the client interceptors.
func (c *ExecutionContextClient) Interceptors() []Interceptor {
	return c.inters.ExecutionContext
}

func (c *ExecutionContextClient) mutate(ctx context.Context, m *ExecutionContextMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExecutionContextCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExecutionContextUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExecutionContextUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExecutionContextDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExecutionContext mutation op: %q", m.Op())
	}
}

// HandlerExecutionClient is a client for the HandlerExecution schema.
type HandlerExecutionClient struct {
	config
}

// NewHandlerExecutionClient returns a client for the HandlerExecution from the given config.
func NewHandlerExecutionClient(c config) *HandlerExecutionClient {
	return &HandlerExecutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `handlerexecution.Hooks(f(g(h())))`.
func (c *HandlerExecutionClient) Use(hooks ...Hook) {
	c.hooks.HandlerExecution = append(c.hooks.HandlerExecution, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `handlerexecution.Intercept(f(g(h())))`.
func (c *HandlerExecutionClient) Intercept(interceptors ...Interceptor) {
	c.inters.HandlerExecution = append(c.inters.HandlerExecution, interceptors...)
}

// Create returns a builder for creating a HandlerExecution entity.
func (c *HandlerExecutionClient) Create() *HandlerExecutionCreate {
	mutation := newHandlerExecutionMutation(c.config, OpCreate)
	return &HandlerExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HandlerExecution entities.
func (c *HandlerExecutionClient) CreateBulk(builders ...*HandlerExecutionCreate) *HandlerExecutionCreateBulk {
	return &HandlerExecutionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HandlerExecutionClient) MapCreateBulk(slice any, setFunc func(*HandlerExecutionCreate, int)) *HandlerExecutionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HandlerExecutionCreateBulk{err: fmt.Errorf("calling to HandlerExecutionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HandlerExecutionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HandlerExecutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HandlerExecution.
func (c *HandlerExecutionClient) Update() *HandlerExecutionUpdate {
	mutation := newHandlerExecutionMutation(c.config, OpUpdate)
	return &HandlerExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HandlerExecutionClient) UpdateOne(he *HandlerExecution) *HandlerExecutionUpdateOne {
	mutation := newHandlerExecutionMutation(c.config, OpUpdateOne, withHandlerExecution(he))
	return &HandlerExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HandlerExecutionClient) UpdateOneID(id string) *HandlerExecutionUpdateOne {
	mutation := newHandlerExecutionMutation(c.config, OpUpdateOne, withHandlerExecutionID(id))
	return &HandlerExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HandlerExecution.
func (c *HandlerExecutionClient) Delete() *HandlerExecutionDelete {
	mutation := newHandlerExecutionMutation(c.config, OpDelete)
	return &HandlerExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HandlerExecutionClient) DeleteOne(he *HandlerExecution) *HandlerExecutionDeleteOne {
	return c.DeleteOneID(he.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HandlerExecutionClient) DeleteOneID(id string) *HandlerExecutionDeleteOne {
	builder := c.Delete().Where(handlerexecution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HandlerExecutionDeleteOne{builder}
}

// Query returns a query builder for HandlerExecution.
func (c *HandlerExecutionClient) Query() *HandlerExecutionQuery {
	return &HandlerExecutionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHandlerExecution},
		inters: c.Interceptors(),
	}
}

// Get returns a HandlerExecution entity by its id.
func (c *HandlerExecutionClient) Get(ctx context.Context, id string) (*HandlerExecution, error) {
	return c.Query().Where(handlerexecution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HandlerExecutionClient) GetX(ctx context.Context, id string) *HandlerExecution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExecutionContext queries the execution_context edge of a HandlerExecution.
func (c *HandlerExecutionClient) QueryExecutionContext(he *HandlerExecution) *ExecutionContextQuery {
	query := (&ExecutionContextClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := he.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(handlerexecution.Table, handlerexecution.FieldID, id),
			sqlgraph.To(executioncontext.Table, executioncontext.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, handlerexecution.ExecutionContextTable, handlerexecution.ExecutionContextColumn),
		)
		fromV = sqlgraph.Neighbors(he.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a HandlerExecution.
func (c *HandlerExecutionClient) QueryParent(he *HandlerExecution) *HandlerExecutionQuery {
	query := (&HandlerExecutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := he.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(handlerexecution.Table, handlerexecution.FieldID, id),
			sqlgraph.To(handlerexecution.Table, handlerexecution.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, handlerexecution.ParentTable, handlerexecution.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(he.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a HandlerExecution.
func (c *HandlerExecutionClient) QueryChildren(he *HandlerExecution) *HandlerExecutionQuery {
	query := (&HandlerExecutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := he.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(handlerexecution.Table, handlerexecution.FieldID, id),
			sqlgraph.To(handlerexecution.Table, handlerexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, handlerexecution.ChildrenTable, handlerexecution.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(he.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTasks queries the tasks edge of a HandlerExecution.
func (c *HandlerExecutionClient) QueryTasks(he *HandlerExecution) *HandlerTaskQuery {
	query := (&HandlerTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := he.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(handlerexecution.Table, handlerexecution.FieldID, id),
			sqlgraph.To(handlertask.Table, handlertask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, handlerexecution.TasksTable, handlerexecution.TasksColumn),
		)
		fromV = sqlgraph.Neighbors(he.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySagaStepExecution queries the saga_step_execution edge of a HandlerExecution.
func (c *HandlerExecutionClient) QuerySagaStepExecution(he *HandlerExecution) *SagaStepExecutionQuery {
	query := (&SagaStepExecutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := he.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(handlerexecution.Table, handlerexecution.FieldID, id),
			sqlgraph.To(sagastepexecution.Table, sagastepexecution.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, handlerexecution.SagaStepExecutionTable, handlerexecution.SagaStepExecutionColumn),
		)
		fromV = sqlgraph.Neighbors(he.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HandlerExecutionClient) Hooks() []Hook {
	return c.hooks.HandlerExecution
}

// Interceptors returns the client interceptors.
func (c *HandlerExecutionClient) Interceptors() []Interceptor {
	return c.inters.HandlerExecution
}

func (c *HandlerExecutionClient) mutate(ctx context.Context, m *HandlerExecutionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HandlerExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HandlerExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HandlerExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HandlerExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HandlerExecution mutation op: %q", m.Op())
	}
}

// HandlerTaskClient is a client for the HandlerTask schema.
type HandlerTaskClient struct {
	config
}

// NewHandlerTaskClient returns a client for the HandlerTask from the given config.
func NewHandlerTaskClient(c config) *HandlerTaskClient {
	return &HandlerTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `handlertask.Hooks(f(g(h())))`.
func (c *HandlerTaskClient) Use(hooks ...Hook) {
	c.hooks.HandlerTask = append(c.hooks.HandlerTask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `handlertask.Intercept(f(g(h())))`.
func (c *HandlerTaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.HandlerTask = append(c.inters.HandlerTask, interceptors...)
}

// Create returns a builder for creating a HandlerTask entity.
func (c *HandlerTaskClient) Create() *HandlerTaskCreate {
	mutation := newHandlerTaskMutation(c.config, OpCreate)
	return &HandlerTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HandlerTask entities.
func (c *HandlerTaskClient) CreateBulk(builders ...*HandlerTaskCreate) *HandlerTaskCreateBulk {
	return &HandlerTaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HandlerTaskClient) MapCreateBulk(slice any, setFunc func(*HandlerTaskCreate, int)) *HandlerTaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HandlerTaskCreateBulk{err: fmt.Errorf("calling to HandlerTaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HandlerTaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HandlerTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HandlerTask.
func (c *HandlerTaskClient) Update() *HandlerTaskUpdate {
	mutation := newHandlerTaskMutation(c.config, OpUpdate)
	return &HandlerTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HandlerTaskClient) UpdateOne(ht *HandlerTask) *HandlerTaskUpdateOne {
	mutation := newHandlerTaskMutation(c.config, OpUpdateOne, withHandlerTask(ht))
	return &HandlerTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HandlerTaskClient) UpdateOneID(id string) *HandlerTaskUpdateOne {
	mutation := newHandlerTaskMutation(c.config, OpUpdateOne, withHandlerTaskID(id))
	return &HandlerTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HandlerTask.
func (c *HandlerTaskClient) Delete() *HandlerTaskDelete {
	mutation := newHandlerTaskMutation(c.config, OpDelete)
	return &HandlerTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HandlerTaskClient) DeleteOne(ht *HandlerTask) *HandlerTaskDeleteOne {
	return c.DeleteOneID(ht.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HandlerTaskClient) DeleteOneID(id string) *HandlerTaskDeleteOne {
	builder := c.Delete().Where(handlertask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HandlerTaskDeleteOne{builder}
}

// Query returns a query builder for HandlerTask.
func (c *HandlerTaskClient) Query() *HandlerTaskQuery {
	return &HandlerTaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHandlerTask},
		inters: c.Interceptors(),
	}
}

// Get returns a HandlerTask entity by its id.
func (c *HandlerTaskClient) Get(ctx context.Context, id string) (*HandlerTask, error) {
	return c.Query().Where(handlertask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HandlerTaskClient) GetX(ctx context.Context, id string) *HandlerTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHandlerExecution queries the handler_execution edge of a HandlerTask.
func (c *HandlerTaskClient) QueryHandlerExecution(ht *HandlerTask) *HandlerExecutionQuery {
	query := (&HandlerExecutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ht.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(handlertask.Table, handlertask.FieldID, id),
			sqlgraph.To(handlerexecution.Table, handlerexecution.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, handlertask.HandlerExecutionTable, handlertask.HandlerExecutionColumn),
		)
		fromV = sqlgraph.Neighbors(ht.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HandlerTaskClient) Hooks() []Hook {
	return c.hooks.HandlerTask
}

// Interceptors returns the client interceptors.
func (c *HandlerTaskClient) Interceptors() []Interceptor {
	return c.inters.HandlerTask
}

func (c *HandlerTaskClient) mutate(ctx context.Context, m *HandlerTaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HandlerTaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HandlerTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HandlerTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HandlerTaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HandlerTask mutation op: %q", m.Op())
	}
}

// SagaExecutionClient is a client for the SagaExecution schema.
type SagaExecutionClient struct {
	config
}

// NewSagaExecutionClient returns a client for the SagaExecution from the given config.
func NewSagaExecutionClient(c config) *SagaExecutionClient {
	return &SagaExecutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sagaexecution.Hooks(f(g(h())))`.
func (c *SagaExecutionClient) Use(hooks ...Hook) {
	c.hooks.SagaExecution = append(c.hooks.SagaExecution, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sagaexecution.Intercept(f(g(h())))`.
func (c *SagaExecutionClient) Intercept(interceptors ...Interceptor) {
	c.inters.SagaExecution = append(c.inters.SagaExecution, interceptors...)
}

// Create returns a builder for creating a SagaExecution entity.
func (c *SagaExecutionClient) Create() *SagaExecutionCreate {
	mutation := newSagaExecutionMutation(c.config, OpCreate)
	return &SagaExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SagaExecution entities.
func (c *SagaExecutionClient) CreateBulk(builders ...*SagaExecutionCreate) *SagaExecutionCreateBulk {
	return &SagaExecutionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SagaExecutionClient) MapCreateBulk(slice any, setFunc func(*SagaExecutionCreate, int)) *SagaExecutionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SagaExecutionCreateBulk{err: fmt.Errorf("calling to SagaExecutionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SagaExecutionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SagaExecutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SagaExecution.
func (c *SagaExecutionClient) Update() *SagaExecutionUpdate {
	mutation := newSagaExecutionMutation(c.config, OpUpdate)
	return &SagaExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SagaExecutionClient) UpdateOne(se *SagaExecution) *SagaExecutionUpdateOne {
	mutation := newSagaExecutionMutation(c.config, OpUpdateOne, withSagaExecution(se))
	return &SagaExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SagaExecutionClient) UpdateOneID(id string) *SagaExecutionUpdateOne {
	mutation := newSagaExecutionMutation(c.config, OpUpdateOne, withSagaExecutionID(id))
	return &SagaExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SagaExecution.
func (c *SagaExecutionClient) Delete() *SagaExecutionDelete {
	mutation := newSagaExecutionMutation(c.config, OpDelete)
	return &SagaExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SagaExecutionClient) DeleteOne(se *SagaExecution) *SagaExecutionDeleteOne {
	return c.DeleteOneID(se.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SagaExecutionClient) DeleteOneID(id string) *SagaExecutionDeleteOne {
	builder := c.Delete().Where(sagaexecution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SagaExecutionDeleteOne{builder}
}

// Query returns a query builder for SagaExecution.
func (c *SagaExecutionClient) Query() *SagaExecutionQuery {
	return &SagaExecutionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSagaExecution},
		inters: c.Interceptors(),
	}
}

// Get returns a SagaExecution entity by its id.
func (c *SagaExecutionClient) Get(ctx context.Context, id string) (*SagaExecution, error) {
	return c.Query().Where(sagaexecution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SagaExecutionClient) GetX(ctx context.Context, id string) *SagaExecution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExecutionContext queries the execution_context edge of a SagaExecution.
func (c *SagaExecutionClient) QueryExecutionContext(se *SagaExecution) *ExecutionContextQuery {
	query := (&ExecutionContextClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := se.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sagaexecution.Table, sagaexecution.FieldID, id),
			sqlgraph.To(executioncontext.Table, executioncontext.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sagaexecution.ExecutionContextTable, sagaexecution.ExecutionContextColumn),
		)
		fromV = sqlgraph.Neighbors(se.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySteps queries the steps edge of a SagaExecution.
func (c *SagaExecutionClient) QuerySteps(se *SagaExecution) *SagaStepExecutionQuery {
	query := (&SagaStepExecutionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := se.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sagaexecution.Table, sagaexecution.FieldID, id),
			sqlgraph.To(sagastepexecution.Table, sagastepexecution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sagaexecution.StepsTable, sagaexecution.StepsColumn),
		)
		fromV = sqlgraph.Neighbors(se.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SagaExecutionClient) Hooks() []Hook {
	return c.hooks.SagaExecution
}

// Interceptors returns the client interceptors.
func (c *SagaExecutionClient) Interceptors() []Interceptor {
	return c.inters.SagaExecution
}

func (c *SagaExecutionClient) mutate(ctx context.Context, m *SagaExecutionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SagaExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SagaExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SagaExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SagaExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SagaExecution mutation op: %q", m.Op())
	}
}

// SagaStepExecutionClient is a client for the SagaStepExecution schema.
type SagaStepExecutionClient struct {
	config
}

// NewSagaStepExecutionClient returns a client for the SagaStepExecution from the given config.
func NewSagaStepExecutionClient(c config) *SagaStepExecutionClient {
	return &SagaStepExecutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sagastepexecution.Hooks(f(g(h())))`.
func (c *SagaStepExecutionClient) Use(hooks ...Hook) {
	c.hooks.SagaStepExecution = append(c.hooks.SagaStepExecution, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sagastepexecution.Intercept(f(g(h())))`.
func (c *SagaStepExecutionClient) Intercept(interceptors ...Interceptor) {
	c.inters.SagaStepExecution = append(c.inters.SagaStepExecution, interceptors...)
}

// Create returns a builder for creating a SagaStepExecution entity.
func (c *SagaStepExecutionClient) Create() *SagaStepExecutionCreate {
	mutation := newSagaStepExecutionMutation(c.config, OpCreate)
	return &SagaStepExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SagaStepExecution entities.
func (c *SagaStepExecutionClient) CreateBulk(builders ...*SagaStepExecutionCreate) *SagaStepExecutionCreateBulk {
	return &SagaStepExecutionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SagaStepExecutionClient) MapCreateBulk(slice any, setFunc func(*SagaStepExecutionCreate, int)) *SagaStepExecutionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SagaStepExecutionCreateBulk{err: fmt.Errorf("calling to SagaStepExecutionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SagaStepExecutionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SagaStepExecutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SagaStepExecution.
func (c *SagaStepExecutionClient) Update() *SagaStepExecutionUpdate {
	mutation := newSagaStepExecutionMutation(c.config, OpUpdate)
	return &SagaStepExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SagaStepExecutionClient) UpdateOne(sse *SagaStepExecution) *SagaStepExecutionUpdateOne {
	mutation := newSagaStepExecutionMutation(c.config, OpUpdateOne, withSagaStepExecution(sse))
	return &SagaStepExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SagaStepExecutionClient) UpdateOneID(id string) *SagaStepExecutionUpdateOne {
	mutation := newSagaStepExecutionMutation(c.config, OpUpdateOne, withSagaStepExecutionID(id))
	return &SagaStepExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SagaStepExecution.
func (c *SagaStepExecutionClient) Delete() *SagaStepExecutionDelete {
	mutation := newSagaStepExecutionMutation(c.config, OpDelete)
	return &SagaStepExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SagaStepExecutionClient) DeleteOne(sse *SagaStepExecution) *SagaStepExecutionDeleteOne {
	return c.DeleteOneID(sse.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SagaStepExecutionClient) DeleteOneID(id string) *SagaStepExecutionDeleteOne {
	builder := c.Delete().Where(sagastepexecution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SagaStepExecutionDeleteOne{builder}
}

// Query returns a query builder for SagaStepExecution.
func (c *SagaStepExecutionClient) Query() *SagaStepExecutionQuery {
	return &SagaStepExecutionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSagaStepExecution},
		inters: c.Interceptors(),
	}
}

// Get returns a SagaStepExecution entity by its id.
func (c *SagaStepExecutionClient) Get(ctx context.Context, id string) (*SagaStepExecution, error) {
	return c.Query().Where(sagastepexecution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SagaStepExecutionClient) GetX(ctx context.Context, id string) *SagaStepExecution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SagaStepExecutionClient) Hooks() []Hook {
	return c.hooks.SagaStepExecution
}

// Interceptors returns the client interceptors.
func (c *SagaStepExecutionClient) Interceptors() []Interceptor {
	return c.inters.SagaStepExecution
}

func (c *SagaStepExecutionClient) mutate(ctx context.Context, m *SagaStepExecutionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SagaStepExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SagaStepExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SagaStepExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SagaStepExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SagaStepExecution mutation op: %q", m.Op())
	}
}

// SideEffectResultClient is a client for the SideEffectResult schema.
type SideEffectResultClient struct {
	config
}

// NewSideEffectResultClient returns a client for the SideEffectResult from the given config.
func NewSideEffectResultClient(c config) *SideEffectResultClient {
	return &SideEffectResultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sideeffectresult.Hooks(f(g(h())))`.
func (c *SideEffectResultClient) Use(hooks ...Hook) {
	c.hooks.SideEffectResult = append(c.hooks.SideEffectResult, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sideeffectresult.Intercept(f(g(h())))`.
func (c *SideEffectResultClient) Intercept(interceptors ...Interceptor) {
	c.inters.SideEffectResult = append(c.inters.SideEffectResult, interceptors...)
}

// Create returns a builder for creating a SideEffectResult entity.
func (c *SideEffectResultClient) Create() *SideEffectResultCreate {
	mutation := newSideEffectResultMutation(c.config, OpCreate)
	return &SideEffectResultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SideEffectResult entities.
func (c *SideEffectResultClient) CreateBulk(builders ...*SideEffectResultCreate) *SideEffectResultCreateBulk {
	return &SideEffectResultCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SideEffectResultClient) MapCreateBulk(slice any, setFunc func(*SideEffectResultCreate, int)) *SideEffectResultCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SideEffectResultCreateBulk{err: fmt.Errorf("calling to SideEffectResultClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SideEffectResultCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SideEffectResultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SideEffectResult.
func (c *SideEffectResultClient) Update() *SideEffectResultUpdate {
	mutation := newSideEffectResultMutation(c.config, OpUpdate)
	return &SideEffectResultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SideEffectResultClient) UpdateOne(ser *SideEffectResult) *SideEffectResultUpdateOne {
	mutation := newSideEffectResultMutation(c.config, OpUpdateOne, withSideEffectResult(ser))
	return &SideEffectResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SideEffectResultClient) UpdateOneID(id string) *SideEffectResultUpdateOne {
	mutation := newSideEffectResultMutation(c.config, OpUpdateOne, withSideEffectResultID(id))
	return &SideEffectResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SideEffectResult.
func (c *SideEffectResultClient) Delete() *SideEffectResultDelete {
	mutation := newSideEffectResultMutation(c.config, OpDelete)
	return &SideEffectResultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SideEffectResultClient) DeleteOne(ser *SideEffectResult) *SideEffectResultDeleteOne {
	return c.DeleteOneID(ser.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SideEffectResultClient) DeleteOneID(id string) *SideEffectResultDeleteOne {
	builder := c.Delete().Where(sideeffectresult.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SideEffectResultDeleteOne{builder}
}

// Query returns a query builder for SideEffectResult.
func (c *SideEffectResultClient) Query() *SideEffectResultQuery {
	return &SideEffectResultQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSideEffectResult},
		inters: c.Interceptors(),
	}
}

// Get returns a SideEffectResult entity by its id.
func (c *SideEffectResultClient) Get(ctx context.Context, id string) (*SideEffectResult, error) {
	return c.Query().Where(sideeffectresult.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SideEffectResultClient) GetX(ctx context.Context, id string) *SideEffectResult {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SideEffectResultClient) Hooks() []Hook {
	return c.hooks.SideEffectResult
}

// Interceptors returns the client interceptors.
func (c *SideEffectResultClient) Interceptors() []Interceptor {
	return c.inters.SideEffectResult
}

func (c *SideEffectResultClient) mutate(ctx context.Context, m *SideEffectResultMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SideEffectResultCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SideEffectResultUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SideEffectResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SideEffectResultDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SideEffectResult mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ExecutionContext, HandlerExecution, HandlerTask, SagaExecution,
		SagaStepExecution, SideEffectResult []ent.Hook
	}
	inters struct {
		ExecutionContext, HandlerExecution, HandlerTask, SagaExecution,
		SagaStepExecution, SideEffectResult []ent.Interceptor
	}
)
