// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/taskcontext"
)

// TaskContextCreate is the builder for creating a TaskContext entity.
type TaskContextCreate struct {
	config
	mutation *TaskContextMutation
	hooks    []Hook
}

// SetRetryCount sets the "RetryCount" field.
func (tcc *TaskContextCreate) SetRetryCount(i int) *TaskContextCreate {
	tcc.mutation.SetRetryCount(i)
	return tcc
}

// SetNillableRetryCount sets the "RetryCount" field if the given value is not nil.
func (tcc *TaskContextCreate) SetNillableRetryCount(i *int) *TaskContextCreate {
	if i != nil {
		tcc.SetRetryCount(*i)
	}
	return tcc
}

// SetMaxRetry sets the "MaxRetry" field.
func (tcc *TaskContextCreate) SetMaxRetry(i int) *TaskContextCreate {
	tcc.mutation.SetMaxRetry(i)
	return tcc
}

// SetNillableMaxRetry sets the "MaxRetry" field if the given value is not nil.
func (tcc *TaskContextCreate) SetNillableMaxRetry(i *int) *TaskContextCreate {
	if i != nil {
		tcc.SetMaxRetry(*i)
	}
	return tcc
}

// SetID sets the "id" field.
func (tcc *TaskContextCreate) SetID(s string) *TaskContextCreate {
	tcc.mutation.SetID(s)
	return tcc
}

// Mutation returns the TaskContextMutation object of the builder.
func (tcc *TaskContextCreate) Mutation() *TaskContextMutation {
	return tcc.mutation
}

// Save creates the TaskContext in the database.
func (tcc *TaskContextCreate) Save(ctx context.Context) (*TaskContext, error) {
	tcc.defaults()
	return withHooks(ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TaskContextCreate) SaveX(ctx context.Context) *TaskContext {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TaskContextCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TaskContextCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TaskContextCreate) defaults() {
	if _, ok := tcc.mutation.RetryCount(); !ok {
		v := taskcontext.DefaultRetryCount
		tcc.mutation.SetRetryCount(v)
	}
	if _, ok := tcc.mutation.MaxRetry(); !ok {
		v := taskcontext.DefaultMaxRetry
		tcc.mutation.SetMaxRetry(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TaskContextCreate) check() error {
	if _, ok := tcc.mutation.RetryCount(); !ok {
		return &ValidationError{Name: "RetryCount", err: errors.New(`ent: missing required field "TaskContext.RetryCount"`)}
	}
	if _, ok := tcc.mutation.MaxRetry(); !ok {
		return &ValidationError{Name: "MaxRetry", err: errors.New(`ent: missing required field "TaskContext.MaxRetry"`)}
	}
	return nil
}

func (tcc *TaskContextCreate) sqlSave(ctx context.Context) (*TaskContext, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TaskContext.ID type: %T", _spec.ID.Value)
		}
	}
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *TaskContextCreate) createSpec() (*TaskContext, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskContext{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(taskcontext.Table, sqlgraph.NewFieldSpec(taskcontext.FieldID, field.TypeString))
	)
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tcc.mutation.RetryCount(); ok {
		_spec.SetField(taskcontext.FieldRetryCount, field.TypeInt, value)
		_node.RetryCount = value
	}
	if value, ok := tcc.mutation.MaxRetry(); ok {
		_spec.SetField(taskcontext.FieldMaxRetry, field.TypeInt, value)
		_node.MaxRetry = value
	}
	return _node, _spec
}

// TaskContextCreateBulk is the builder for creating many TaskContext entities in bulk.
type TaskContextCreateBulk struct {
	config
	err      error
	builders []*TaskContextCreate
}

// Save creates the TaskContext entities in the database.
func (tccb *TaskContextCreateBulk) Save(ctx context.Context) ([]*TaskContext, error) {
	if tccb.err != nil {
		return nil, tccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TaskContext, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskContextMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TaskContextCreateBulk) SaveX(ctx context.Context) []*TaskContext {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TaskContextCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TaskContextCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}
