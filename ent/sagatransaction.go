// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/executionunit"
	"github.com/davidroman0O/go-tempolite/ent/sagacompensation"
	"github.com/davidroman0O/go-tempolite/ent/sagatransaction"
	"github.com/davidroman0O/go-tempolite/ent/task"
)

// SagaTransaction is the model entity for the SagaTransaction schema.
type SagaTransaction struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// NextTransactionName holds the value of the "next_transaction_name" field.
	NextTransactionName string `json:"next_transaction_name,omitempty"`
	// FailureCompensationName holds the value of the "failure_compensation_name" field.
	FailureCompensationName string `json:"failure_compensation_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SagaTransactionQuery when eager-loading is set.
	Edges                            SagaTransactionEdges `json:"edges"`
	execution_unit_saga_transactions *string
	saga_transaction_task            *string
	selectValues                     sql.SelectValues
}

// SagaTransactionEdges holds the relations/edges for other nodes in the graph.
type SagaTransactionEdges struct {
	// ExecutionUnit holds the value of the execution_unit edge.
	ExecutionUnit *ExecutionUnit `json:"execution_unit,omitempty"`
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// Compensation holds the value of the compensation edge.
	Compensation *SagaCompensation `json:"compensation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ExecutionUnitOrErr returns the ExecutionUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SagaTransactionEdges) ExecutionUnitOrErr() (*ExecutionUnit, error) {
	if e.ExecutionUnit != nil {
		return e.ExecutionUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: executionunit.Label}
	}
	return nil, &NotLoadedError{edge: "execution_unit"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SagaTransactionEdges) TaskOrErr() (*Task, error) {
	if e.Task != nil {
		return e.Task, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: task.Label}
	}
	return nil, &NotLoadedError{edge: "task"}
}

// CompensationOrErr returns the Compensation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SagaTransactionEdges) CompensationOrErr() (*SagaCompensation, error) {
	if e.Compensation != nil {
		return e.Compensation, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: sagacompensation.Label}
	}
	return nil, &NotLoadedError{edge: "compensation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SagaTransaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sagatransaction.FieldOrder:
			values[i] = new(sql.NullInt64)
		case sagatransaction.FieldID, sagatransaction.FieldNextTransactionName, sagatransaction.FieldFailureCompensationName:
			values[i] = new(sql.NullString)
		case sagatransaction.ForeignKeys[0]: // execution_unit_saga_transactions
			values[i] = new(sql.NullString)
		case sagatransaction.ForeignKeys[1]: // saga_transaction_task
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SagaTransaction fields.
func (st *SagaTransaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sagatransaction.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				st.ID = value.String
			}
		case sagatransaction.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				st.Order = int(value.Int64)
			}
		case sagatransaction.FieldNextTransactionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field next_transaction_name", values[i])
			} else if value.Valid {
				st.NextTransactionName = value.String
			}
		case sagatransaction.FieldFailureCompensationName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field failure_compensation_name", values[i])
			} else if value.Valid {
				st.FailureCompensationName = value.String
			}
		case sagatransaction.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field execution_unit_saga_transactions", values[i])
			} else if value.Valid {
				st.execution_unit_saga_transactions = new(string)
				*st.execution_unit_saga_transactions = value.String
			}
		case sagatransaction.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field saga_transaction_task", values[i])
			} else if value.Valid {
				st.saga_transaction_task = new(string)
				*st.saga_transaction_task = value.String
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SagaTransaction.
// This includes values selected through modifiers, order, etc.
func (st *SagaTransaction) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// QueryExecutionUnit queries the "execution_unit" edge of the SagaTransaction entity.
func (st *SagaTransaction) QueryExecutionUnit() *ExecutionUnitQuery {
	return NewSagaTransactionClient(st.config).QueryExecutionUnit(st)
}

// QueryTask queries the "task" edge of the SagaTransaction entity.
func (st *SagaTransaction) QueryTask() *TaskQuery {
	return NewSagaTransactionClient(st.config).QueryTask(st)
}

// QueryCompensation queries the "compensation" edge of the SagaTransaction entity.
func (st *SagaTransaction) QueryCompensation() *SagaCompensationQuery {
	return NewSagaTransactionClient(st.config).QueryCompensation(st)
}

// Update returns a builder for updating this SagaTransaction.
// Note that you need to call SagaTransaction.Unwrap() before calling this method if this SagaTransaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SagaTransaction) Update() *SagaTransactionUpdateOne {
	return NewSagaTransactionClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the SagaTransaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SagaTransaction) Unwrap() *SagaTransaction {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SagaTransaction is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SagaTransaction) String() string {
	var builder strings.Builder
	builder.WriteString("SagaTransaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", st.Order))
	builder.WriteString(", ")
	builder.WriteString("next_transaction_name=")
	builder.WriteString(st.NextTransactionName)
	builder.WriteString(", ")
	builder.WriteString("failure_compensation_name=")
	builder.WriteString(st.FailureCompensationName)
	builder.WriteByte(')')
	return builder.String()
}

// SagaTransactions is a parsable slice of SagaTransaction.
type SagaTransactions []*SagaTransaction
