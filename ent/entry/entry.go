// Code generated by ent, DO NOT EDIT.

package entry

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the entry type in the database.
	Label = "entry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTaskID holds the string denoting the taskid field in the database.
	FieldTaskID = "task_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeExecutionContext holds the string denoting the execution_context edge name in mutations.
	EdgeExecutionContext = "execution_context"
	// EdgeHandlerTask holds the string denoting the handler_task edge name in mutations.
	EdgeHandlerTask = "handler_task"
	// EdgeSagaStepTask holds the string denoting the saga_step_task edge name in mutations.
	EdgeSagaStepTask = "saga_step_task"
	// EdgeSideEffectTask holds the string denoting the side_effect_task edge name in mutations.
	EdgeSideEffectTask = "side_effect_task"
	// EdgeCompensationTask holds the string denoting the compensation_task edge name in mutations.
	EdgeCompensationTask = "compensation_task"
	// Table holds the table name of the entry in the database.
	Table = "entries"
	// ExecutionContextTable is the table that holds the execution_context relation/edge.
	ExecutionContextTable = "entries"
	// ExecutionContextInverseTable is the table name for the ExecutionContext entity.
	// It exists in this package in order to avoid circular dependency with the "executioncontext" package.
	ExecutionContextInverseTable = "execution_contexts"
	// ExecutionContextColumn is the table column denoting the execution_context relation/edge.
	ExecutionContextColumn = "entry_execution_context"
	// HandlerTaskTable is the table that holds the handler_task relation/edge.
	HandlerTaskTable = "entries"
	// HandlerTaskInverseTable is the table name for the HandlerTask entity.
	// It exists in this package in order to avoid circular dependency with the "handlertask" package.
	HandlerTaskInverseTable = "handler_tasks"
	// HandlerTaskColumn is the table column denoting the handler_task relation/edge.
	HandlerTaskColumn = "entry_handler_task"
	// SagaStepTaskTable is the table that holds the saga_step_task relation/edge.
	SagaStepTaskTable = "entries"
	// SagaStepTaskInverseTable is the table name for the SagaTask entity.
	// It exists in this package in order to avoid circular dependency with the "sagatask" package.
	SagaStepTaskInverseTable = "saga_tasks"
	// SagaStepTaskColumn is the table column denoting the saga_step_task relation/edge.
	SagaStepTaskColumn = "entry_saga_step_task"
	// SideEffectTaskTable is the table that holds the side_effect_task relation/edge.
	SideEffectTaskTable = "entries"
	// SideEffectTaskInverseTable is the table name for the SideEffectTask entity.
	// It exists in this package in order to avoid circular dependency with the "sideeffecttask" package.
	SideEffectTaskInverseTable = "side_effect_tasks"
	// SideEffectTaskColumn is the table column denoting the side_effect_task relation/edge.
	SideEffectTaskColumn = "entry_side_effect_task"
	// CompensationTaskTable is the table that holds the compensation_task relation/edge.
	CompensationTaskTable = "entries"
	// CompensationTaskInverseTable is the table name for the CompensationTask entity.
	// It exists in this package in order to avoid circular dependency with the "compensationtask" package.
	CompensationTaskInverseTable = "compensation_tasks"
	// CompensationTaskColumn is the table column denoting the compensation_task relation/edge.
	CompensationTaskColumn = "entry_compensation_task"
)

// Columns holds all SQL columns for entry fields.
var Columns = []string{
	FieldID,
	FieldTaskID,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "entries"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"entry_execution_context",
	"entry_handler_task",
	"entry_saga_step_task",
	"entry_side_effect_task",
	"entry_compensation_task",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeHandler      Type = "handler"
	TypeSaga         Type = "saga"
	TypeSideEffect   Type = "side_effect"
	TypeCompensation Type = "compensation"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeHandler, TypeSaga, TypeSideEffect, TypeCompensation:
		return nil
	default:
		return fmt.Errorf("entry: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Entry queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTaskID orders the results by the taskID field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByExecutionContextField orders the results by execution_context field.
func ByExecutionContextField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExecutionContextStep(), sql.OrderByField(field, opts...))
	}
}

// ByHandlerTaskField orders the results by handler_task field.
func ByHandlerTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHandlerTaskStep(), sql.OrderByField(field, opts...))
	}
}

// BySagaStepTaskField orders the results by saga_step_task field.
func BySagaStepTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSagaStepTaskStep(), sql.OrderByField(field, opts...))
	}
}

// BySideEffectTaskField orders the results by side_effect_task field.
func BySideEffectTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSideEffectTaskStep(), sql.OrderByField(field, opts...))
	}
}

// ByCompensationTaskField orders the results by compensation_task field.
func ByCompensationTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompensationTaskStep(), sql.OrderByField(field, opts...))
	}
}
func newExecutionContextStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExecutionContextInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ExecutionContextTable, ExecutionContextColumn),
	)
}
func newHandlerTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HandlerTaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, HandlerTaskTable, HandlerTaskColumn),
	)
}
func newSagaStepTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SagaStepTaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SagaStepTaskTable, SagaStepTaskColumn),
	)
}
func newSideEffectTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SideEffectTaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SideEffectTaskTable, SideEffectTaskColumn),
	)
}
func newCompensationTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompensationTaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CompensationTaskTable, CompensationTaskColumn),
	)
}
