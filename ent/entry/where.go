// Code generated by ent, DO NOT EDIT.

package entry

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Entry {
	return predicate.Entry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Entry {
	return predicate.Entry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Entry {
	return predicate.Entry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Entry {
	return predicate.Entry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Entry {
	return predicate.Entry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Entry {
	return predicate.Entry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Entry {
	return predicate.Entry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Entry {
	return predicate.Entry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Entry {
	return predicate.Entry(sql.FieldLTE(FieldID, id))
}

// TaskID applies equality check predicate on the "taskID" field. It's identical to TaskIDEQ.
func TaskID(v string) predicate.Entry {
	return predicate.Entry(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDEQ applies the EQ predicate on the "taskID" field.
func TaskIDEQ(v string) predicate.Entry {
	return predicate.Entry(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "taskID" field.
func TaskIDNEQ(v string) predicate.Entry {
	return predicate.Entry(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "taskID" field.
func TaskIDIn(vs ...string) predicate.Entry {
	return predicate.Entry(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "taskID" field.
func TaskIDNotIn(vs ...string) predicate.Entry {
	return predicate.Entry(sql.FieldNotIn(FieldTaskID, vs...))
}

// TaskIDGT applies the GT predicate on the "taskID" field.
func TaskIDGT(v string) predicate.Entry {
	return predicate.Entry(sql.FieldGT(FieldTaskID, v))
}

// TaskIDGTE applies the GTE predicate on the "taskID" field.
func TaskIDGTE(v string) predicate.Entry {
	return predicate.Entry(sql.FieldGTE(FieldTaskID, v))
}

// TaskIDLT applies the LT predicate on the "taskID" field.
func TaskIDLT(v string) predicate.Entry {
	return predicate.Entry(sql.FieldLT(FieldTaskID, v))
}

// TaskIDLTE applies the LTE predicate on the "taskID" field.
func TaskIDLTE(v string) predicate.Entry {
	return predicate.Entry(sql.FieldLTE(FieldTaskID, v))
}

// TaskIDContains applies the Contains predicate on the "taskID" field.
func TaskIDContains(v string) predicate.Entry {
	return predicate.Entry(sql.FieldContains(FieldTaskID, v))
}

// TaskIDHasPrefix applies the HasPrefix predicate on the "taskID" field.
func TaskIDHasPrefix(v string) predicate.Entry {
	return predicate.Entry(sql.FieldHasPrefix(FieldTaskID, v))
}

// TaskIDHasSuffix applies the HasSuffix predicate on the "taskID" field.
func TaskIDHasSuffix(v string) predicate.Entry {
	return predicate.Entry(sql.FieldHasSuffix(FieldTaskID, v))
}

// TaskIDEqualFold applies the EqualFold predicate on the "taskID" field.
func TaskIDEqualFold(v string) predicate.Entry {
	return predicate.Entry(sql.FieldEqualFold(FieldTaskID, v))
}

// TaskIDContainsFold applies the ContainsFold predicate on the "taskID" field.
func TaskIDContainsFold(v string) predicate.Entry {
	return predicate.Entry(sql.FieldContainsFold(FieldTaskID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Entry {
	return predicate.Entry(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Entry {
	return predicate.Entry(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Entry {
	return predicate.Entry(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Entry {
	return predicate.Entry(sql.FieldNotIn(FieldType, vs...))
}

// HasExecutionContext applies the HasEdge predicate on the "execution_context" edge.
func HasExecutionContext() predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ExecutionContextTable, ExecutionContextColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionContextWith applies the HasEdge predicate on the "execution_context" edge with a given conditions (other predicates).
func HasExecutionContextWith(preds ...predicate.ExecutionContext) predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := newExecutionContextStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHandlerTask applies the HasEdge predicate on the "handler_task" edge.
func HasHandlerTask() predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, HandlerTaskTable, HandlerTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHandlerTaskWith applies the HasEdge predicate on the "handler_task" edge with a given conditions (other predicates).
func HasHandlerTaskWith(preds ...predicate.HandlerTask) predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := newHandlerTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSagaStepTask applies the HasEdge predicate on the "saga_step_task" edge.
func HasSagaStepTask() predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SagaStepTaskTable, SagaStepTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSagaStepTaskWith applies the HasEdge predicate on the "saga_step_task" edge with a given conditions (other predicates).
func HasSagaStepTaskWith(preds ...predicate.SagaTask) predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := newSagaStepTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSideEffectTask applies the HasEdge predicate on the "side_effect_task" edge.
func HasSideEffectTask() predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SideEffectTaskTable, SideEffectTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSideEffectTaskWith applies the HasEdge predicate on the "side_effect_task" edge with a given conditions (other predicates).
func HasSideEffectTaskWith(preds ...predicate.SideEffectTask) predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := newSideEffectTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompensationTask applies the HasEdge predicate on the "compensation_task" edge.
func HasCompensationTask() predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CompensationTaskTable, CompensationTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompensationTaskWith applies the HasEdge predicate on the "compensation_task" edge with a given conditions (other predicates).
func HasCompensationTaskWith(preds ...predicate.CompensationTask) predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := newCompensationTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Entry) predicate.Entry {
	return predicate.Entry(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Entry) predicate.Entry {
	return predicate.Entry(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Entry) predicate.Entry {
	return predicate.Entry(sql.NotPredicates(p))
}
