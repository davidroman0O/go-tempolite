// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/compensationtask"
	"github.com/davidroman0O/go-tempolite/ent/entry"
	"github.com/davidroman0O/go-tempolite/ent/executioncontext"
	"github.com/davidroman0O/go-tempolite/ent/handlertask"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/sagatask"
	"github.com/davidroman0O/go-tempolite/ent/sideeffecttask"
)

// EntryUpdate is the builder for updating Entry entities.
type EntryUpdate struct {
	config
	hooks    []Hook
	mutation *EntryMutation
}

// Where appends a list predicates to the EntryUpdate builder.
func (eu *EntryUpdate) Where(ps ...predicate.Entry) *EntryUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetTaskID sets the "taskID" field.
func (eu *EntryUpdate) SetTaskID(s string) *EntryUpdate {
	eu.mutation.SetTaskID(s)
	return eu
}

// SetNillableTaskID sets the "taskID" field if the given value is not nil.
func (eu *EntryUpdate) SetNillableTaskID(s *string) *EntryUpdate {
	if s != nil {
		eu.SetTaskID(*s)
	}
	return eu
}

// SetType sets the "type" field.
func (eu *EntryUpdate) SetType(e entry.Type) *EntryUpdate {
	eu.mutation.SetType(e)
	return eu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (eu *EntryUpdate) SetNillableType(e *entry.Type) *EntryUpdate {
	if e != nil {
		eu.SetType(*e)
	}
	return eu
}

// SetExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID.
func (eu *EntryUpdate) SetExecutionContextID(id string) *EntryUpdate {
	eu.mutation.SetExecutionContextID(id)
	return eu
}

// SetNillableExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID if the given value is not nil.
func (eu *EntryUpdate) SetNillableExecutionContextID(id *string) *EntryUpdate {
	if id != nil {
		eu = eu.SetExecutionContextID(*id)
	}
	return eu
}

// SetExecutionContext sets the "execution_context" edge to the ExecutionContext entity.
func (eu *EntryUpdate) SetExecutionContext(e *ExecutionContext) *EntryUpdate {
	return eu.SetExecutionContextID(e.ID)
}

// SetHandlerTaskID sets the "handler_task" edge to the HandlerTask entity by ID.
func (eu *EntryUpdate) SetHandlerTaskID(id string) *EntryUpdate {
	eu.mutation.SetHandlerTaskID(id)
	return eu
}

// SetNillableHandlerTaskID sets the "handler_task" edge to the HandlerTask entity by ID if the given value is not nil.
func (eu *EntryUpdate) SetNillableHandlerTaskID(id *string) *EntryUpdate {
	if id != nil {
		eu = eu.SetHandlerTaskID(*id)
	}
	return eu
}

// SetHandlerTask sets the "handler_task" edge to the HandlerTask entity.
func (eu *EntryUpdate) SetHandlerTask(h *HandlerTask) *EntryUpdate {
	return eu.SetHandlerTaskID(h.ID)
}

// SetSagaStepTaskID sets the "saga_step_task" edge to the SagaTask entity by ID.
func (eu *EntryUpdate) SetSagaStepTaskID(id int) *EntryUpdate {
	eu.mutation.SetSagaStepTaskID(id)
	return eu
}

// SetNillableSagaStepTaskID sets the "saga_step_task" edge to the SagaTask entity by ID if the given value is not nil.
func (eu *EntryUpdate) SetNillableSagaStepTaskID(id *int) *EntryUpdate {
	if id != nil {
		eu = eu.SetSagaStepTaskID(*id)
	}
	return eu
}

// SetSagaStepTask sets the "saga_step_task" edge to the SagaTask entity.
func (eu *EntryUpdate) SetSagaStepTask(s *SagaTask) *EntryUpdate {
	return eu.SetSagaStepTaskID(s.ID)
}

// SetSideEffectTaskID sets the "side_effect_task" edge to the SideEffectTask entity by ID.
func (eu *EntryUpdate) SetSideEffectTaskID(id int) *EntryUpdate {
	eu.mutation.SetSideEffectTaskID(id)
	return eu
}

// SetNillableSideEffectTaskID sets the "side_effect_task" edge to the SideEffectTask entity by ID if the given value is not nil.
func (eu *EntryUpdate) SetNillableSideEffectTaskID(id *int) *EntryUpdate {
	if id != nil {
		eu = eu.SetSideEffectTaskID(*id)
	}
	return eu
}

// SetSideEffectTask sets the "side_effect_task" edge to the SideEffectTask entity.
func (eu *EntryUpdate) SetSideEffectTask(s *SideEffectTask) *EntryUpdate {
	return eu.SetSideEffectTaskID(s.ID)
}

// SetCompensationTaskID sets the "compensation_task" edge to the CompensationTask entity by ID.
func (eu *EntryUpdate) SetCompensationTaskID(id int) *EntryUpdate {
	eu.mutation.SetCompensationTaskID(id)
	return eu
}

// SetNillableCompensationTaskID sets the "compensation_task" edge to the CompensationTask entity by ID if the given value is not nil.
func (eu *EntryUpdate) SetNillableCompensationTaskID(id *int) *EntryUpdate {
	if id != nil {
		eu = eu.SetCompensationTaskID(*id)
	}
	return eu
}

// SetCompensationTask sets the "compensation_task" edge to the CompensationTask entity.
func (eu *EntryUpdate) SetCompensationTask(c *CompensationTask) *EntryUpdate {
	return eu.SetCompensationTaskID(c.ID)
}

// Mutation returns the EntryMutation object of the builder.
func (eu *EntryUpdate) Mutation() *EntryMutation {
	return eu.mutation
}

// ClearExecutionContext clears the "execution_context" edge to the ExecutionContext entity.
func (eu *EntryUpdate) ClearExecutionContext() *EntryUpdate {
	eu.mutation.ClearExecutionContext()
	return eu
}

// ClearHandlerTask clears the "handler_task" edge to the HandlerTask entity.
func (eu *EntryUpdate) ClearHandlerTask() *EntryUpdate {
	eu.mutation.ClearHandlerTask()
	return eu
}

// ClearSagaStepTask clears the "saga_step_task" edge to the SagaTask entity.
func (eu *EntryUpdate) ClearSagaStepTask() *EntryUpdate {
	eu.mutation.ClearSagaStepTask()
	return eu
}

// ClearSideEffectTask clears the "side_effect_task" edge to the SideEffectTask entity.
func (eu *EntryUpdate) ClearSideEffectTask() *EntryUpdate {
	eu.mutation.ClearSideEffectTask()
	return eu
}

// ClearCompensationTask clears the "compensation_task" edge to the CompensationTask entity.
func (eu *EntryUpdate) ClearCompensationTask() *EntryUpdate {
	eu.mutation.ClearCompensationTask()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EntryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EntryUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EntryUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EntryUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EntryUpdate) check() error {
	if v, ok := eu.mutation.GetType(); ok {
		if err := entry.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Entry.type": %w`, err)}
		}
	}
	return nil
}

func (eu *EntryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(entry.Table, entry.Columns, sqlgraph.NewFieldSpec(entry.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.TaskID(); ok {
		_spec.SetField(entry.FieldTaskID, field.TypeString, value)
	}
	if value, ok := eu.mutation.GetType(); ok {
		_spec.SetField(entry.FieldType, field.TypeEnum, value)
	}
	if eu.mutation.ExecutionContextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.ExecutionContextTable,
			Columns: []string{entry.ExecutionContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExecutionContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.ExecutionContextTable,
			Columns: []string{entry.ExecutionContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.HandlerTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.HandlerTaskTable,
			Columns: []string{entry.HandlerTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(handlertask.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.HandlerTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.HandlerTaskTable,
			Columns: []string{entry.HandlerTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(handlertask.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SagaStepTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.SagaStepTaskTable,
			Columns: []string{entry.SagaStepTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagatask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SagaStepTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.SagaStepTaskTable,
			Columns: []string{entry.SagaStepTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagatask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SideEffectTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.SideEffectTaskTable,
			Columns: []string{entry.SideEffectTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffecttask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SideEffectTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.SideEffectTaskTable,
			Columns: []string{entry.SideEffectTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffecttask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CompensationTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.CompensationTaskTable,
			Columns: []string{entry.CompensationTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compensationtask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CompensationTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.CompensationTaskTable,
			Columns: []string{entry.CompensationTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compensationtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EntryUpdateOne is the builder for updating a single Entry entity.
type EntryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntryMutation
}

// SetTaskID sets the "taskID" field.
func (euo *EntryUpdateOne) SetTaskID(s string) *EntryUpdateOne {
	euo.mutation.SetTaskID(s)
	return euo
}

// SetNillableTaskID sets the "taskID" field if the given value is not nil.
func (euo *EntryUpdateOne) SetNillableTaskID(s *string) *EntryUpdateOne {
	if s != nil {
		euo.SetTaskID(*s)
	}
	return euo
}

// SetType sets the "type" field.
func (euo *EntryUpdateOne) SetType(e entry.Type) *EntryUpdateOne {
	euo.mutation.SetType(e)
	return euo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (euo *EntryUpdateOne) SetNillableType(e *entry.Type) *EntryUpdateOne {
	if e != nil {
		euo.SetType(*e)
	}
	return euo
}

// SetExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID.
func (euo *EntryUpdateOne) SetExecutionContextID(id string) *EntryUpdateOne {
	euo.mutation.SetExecutionContextID(id)
	return euo
}

// SetNillableExecutionContextID sets the "execution_context" edge to the ExecutionContext entity by ID if the given value is not nil.
func (euo *EntryUpdateOne) SetNillableExecutionContextID(id *string) *EntryUpdateOne {
	if id != nil {
		euo = euo.SetExecutionContextID(*id)
	}
	return euo
}

// SetExecutionContext sets the "execution_context" edge to the ExecutionContext entity.
func (euo *EntryUpdateOne) SetExecutionContext(e *ExecutionContext) *EntryUpdateOne {
	return euo.SetExecutionContextID(e.ID)
}

// SetHandlerTaskID sets the "handler_task" edge to the HandlerTask entity by ID.
func (euo *EntryUpdateOne) SetHandlerTaskID(id string) *EntryUpdateOne {
	euo.mutation.SetHandlerTaskID(id)
	return euo
}

// SetNillableHandlerTaskID sets the "handler_task" edge to the HandlerTask entity by ID if the given value is not nil.
func (euo *EntryUpdateOne) SetNillableHandlerTaskID(id *string) *EntryUpdateOne {
	if id != nil {
		euo = euo.SetHandlerTaskID(*id)
	}
	return euo
}

// SetHandlerTask sets the "handler_task" edge to the HandlerTask entity.
func (euo *EntryUpdateOne) SetHandlerTask(h *HandlerTask) *EntryUpdateOne {
	return euo.SetHandlerTaskID(h.ID)
}

// SetSagaStepTaskID sets the "saga_step_task" edge to the SagaTask entity by ID.
func (euo *EntryUpdateOne) SetSagaStepTaskID(id int) *EntryUpdateOne {
	euo.mutation.SetSagaStepTaskID(id)
	return euo
}

// SetNillableSagaStepTaskID sets the "saga_step_task" edge to the SagaTask entity by ID if the given value is not nil.
func (euo *EntryUpdateOne) SetNillableSagaStepTaskID(id *int) *EntryUpdateOne {
	if id != nil {
		euo = euo.SetSagaStepTaskID(*id)
	}
	return euo
}

// SetSagaStepTask sets the "saga_step_task" edge to the SagaTask entity.
func (euo *EntryUpdateOne) SetSagaStepTask(s *SagaTask) *EntryUpdateOne {
	return euo.SetSagaStepTaskID(s.ID)
}

// SetSideEffectTaskID sets the "side_effect_task" edge to the SideEffectTask entity by ID.
func (euo *EntryUpdateOne) SetSideEffectTaskID(id int) *EntryUpdateOne {
	euo.mutation.SetSideEffectTaskID(id)
	return euo
}

// SetNillableSideEffectTaskID sets the "side_effect_task" edge to the SideEffectTask entity by ID if the given value is not nil.
func (euo *EntryUpdateOne) SetNillableSideEffectTaskID(id *int) *EntryUpdateOne {
	if id != nil {
		euo = euo.SetSideEffectTaskID(*id)
	}
	return euo
}

// SetSideEffectTask sets the "side_effect_task" edge to the SideEffectTask entity.
func (euo *EntryUpdateOne) SetSideEffectTask(s *SideEffectTask) *EntryUpdateOne {
	return euo.SetSideEffectTaskID(s.ID)
}

// SetCompensationTaskID sets the "compensation_task" edge to the CompensationTask entity by ID.
func (euo *EntryUpdateOne) SetCompensationTaskID(id int) *EntryUpdateOne {
	euo.mutation.SetCompensationTaskID(id)
	return euo
}

// SetNillableCompensationTaskID sets the "compensation_task" edge to the CompensationTask entity by ID if the given value is not nil.
func (euo *EntryUpdateOne) SetNillableCompensationTaskID(id *int) *EntryUpdateOne {
	if id != nil {
		euo = euo.SetCompensationTaskID(*id)
	}
	return euo
}

// SetCompensationTask sets the "compensation_task" edge to the CompensationTask entity.
func (euo *EntryUpdateOne) SetCompensationTask(c *CompensationTask) *EntryUpdateOne {
	return euo.SetCompensationTaskID(c.ID)
}

// Mutation returns the EntryMutation object of the builder.
func (euo *EntryUpdateOne) Mutation() *EntryMutation {
	return euo.mutation
}

// ClearExecutionContext clears the "execution_context" edge to the ExecutionContext entity.
func (euo *EntryUpdateOne) ClearExecutionContext() *EntryUpdateOne {
	euo.mutation.ClearExecutionContext()
	return euo
}

// ClearHandlerTask clears the "handler_task" edge to the HandlerTask entity.
func (euo *EntryUpdateOne) ClearHandlerTask() *EntryUpdateOne {
	euo.mutation.ClearHandlerTask()
	return euo
}

// ClearSagaStepTask clears the "saga_step_task" edge to the SagaTask entity.
func (euo *EntryUpdateOne) ClearSagaStepTask() *EntryUpdateOne {
	euo.mutation.ClearSagaStepTask()
	return euo
}

// ClearSideEffectTask clears the "side_effect_task" edge to the SideEffectTask entity.
func (euo *EntryUpdateOne) ClearSideEffectTask() *EntryUpdateOne {
	euo.mutation.ClearSideEffectTask()
	return euo
}

// ClearCompensationTask clears the "compensation_task" edge to the CompensationTask entity.
func (euo *EntryUpdateOne) ClearCompensationTask() *EntryUpdateOne {
	euo.mutation.ClearCompensationTask()
	return euo
}

// Where appends a list predicates to the EntryUpdate builder.
func (euo *EntryUpdateOne) Where(ps ...predicate.Entry) *EntryUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EntryUpdateOne) Select(field string, fields ...string) *EntryUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Entry entity.
func (euo *EntryUpdateOne) Save(ctx context.Context) (*Entry, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EntryUpdateOne) SaveX(ctx context.Context) *Entry {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EntryUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EntryUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EntryUpdateOne) check() error {
	if v, ok := euo.mutation.GetType(); ok {
		if err := entry.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Entry.type": %w`, err)}
		}
	}
	return nil
}

func (euo *EntryUpdateOne) sqlSave(ctx context.Context) (_node *Entry, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entry.Table, entry.Columns, sqlgraph.NewFieldSpec(entry.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Entry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entry.FieldID)
		for _, f := range fields {
			if !entry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.TaskID(); ok {
		_spec.SetField(entry.FieldTaskID, field.TypeString, value)
	}
	if value, ok := euo.mutation.GetType(); ok {
		_spec.SetField(entry.FieldType, field.TypeEnum, value)
	}
	if euo.mutation.ExecutionContextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.ExecutionContextTable,
			Columns: []string{entry.ExecutionContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExecutionContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.ExecutionContextTable,
			Columns: []string{entry.ExecutionContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(executioncontext.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.HandlerTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.HandlerTaskTable,
			Columns: []string{entry.HandlerTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(handlertask.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.HandlerTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.HandlerTaskTable,
			Columns: []string{entry.HandlerTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(handlertask.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SagaStepTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.SagaStepTaskTable,
			Columns: []string{entry.SagaStepTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagatask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SagaStepTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.SagaStepTaskTable,
			Columns: []string{entry.SagaStepTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagatask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SideEffectTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.SideEffectTaskTable,
			Columns: []string{entry.SideEffectTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffecttask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SideEffectTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.SideEffectTaskTable,
			Columns: []string{entry.SideEffectTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sideeffecttask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CompensationTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.CompensationTaskTable,
			Columns: []string{entry.CompensationTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compensationtask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CompensationTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entry.CompensationTaskTable,
			Columns: []string{entry.CompensationTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(compensationtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Entry{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
