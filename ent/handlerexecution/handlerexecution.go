// Code generated by ent, DO NOT EDIT.

package handlerexecution

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the handlerexecution type in the database.
	Label = "handler_execution"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRunID holds the string denoting the run_id field in the database.
	FieldRunID = "run_id"
	// FieldHandlerName holds the string denoting the handler_name field in the database.
	FieldHandlerName = "handler_name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldRetryCount holds the string denoting the retry_count field in the database.
	FieldRetryCount = "retry_count"
	// FieldMaxRetries holds the string denoting the max_retries field in the database.
	FieldMaxRetries = "max_retries"
	// EdgeExecutionContext holds the string denoting the execution_context edge name in mutations.
	EdgeExecutionContext = "execution_context"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// Table holds the table name of the handlerexecution in the database.
	Table = "handler_executions"
	// ExecutionContextTable is the table that holds the execution_context relation/edge.
	ExecutionContextTable = "handler_executions"
	// ExecutionContextInverseTable is the table name for the ExecutionContext entity.
	// It exists in this package in order to avoid circular dependency with the "executioncontext" package.
	ExecutionContextInverseTable = "execution_contexts"
	// ExecutionContextColumn is the table column denoting the execution_context relation/edge.
	ExecutionContextColumn = "execution_context_handler_executions"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "handler_executions"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "handler_execution_children"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "handler_executions"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "handler_execution_children"
	// TasksTable is the table that holds the tasks relation/edge.
	TasksTable = "handler_tasks"
	// TasksInverseTable is the table name for the HandlerTask entity.
	// It exists in this package in order to avoid circular dependency with the "handlertask" package.
	TasksInverseTable = "handler_tasks"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "handler_execution_tasks"
)

// Columns holds all SQL columns for handlerexecution fields.
var Columns = []string{
	FieldID,
	FieldRunID,
	FieldHandlerName,
	FieldStatus,
	FieldStartTime,
	FieldEndTime,
	FieldRetryCount,
	FieldMaxRetries,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "handler_executions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"execution_context_handler_executions",
	"handler_execution_children",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRetryCount holds the default value on creation for the "retry_count" field.
	DefaultRetryCount int
	// DefaultMaxRetries holds the default value on creation for the "max_retries" field.
	DefaultMaxRetries int
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending   Status = "pending"
	StatusRunning   Status = "running"
	StatusCompleted Status = "completed"
	StatusFailed    Status = "failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusRunning, StatusCompleted, StatusFailed:
		return nil
	default:
		return fmt.Errorf("handlerexecution: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the HandlerExecution queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRunID orders the results by the run_id field.
func ByRunID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRunID, opts...).ToFunc()
}

// ByHandlerName orders the results by the handler_name field.
func ByHandlerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandlerName, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByRetryCount orders the results by the retry_count field.
func ByRetryCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryCount, opts...).ToFunc()
}

// ByMaxRetries orders the results by the max_retries field.
func ByMaxRetries(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxRetries, opts...).ToFunc()
}

// ByExecutionContextField orders the results by execution_context field.
func ByExecutionContextField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExecutionContextStep(), sql.OrderByField(field, opts...))
	}
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildrenCount orders the results by children count.
func ByChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildrenStep(), opts...)
	}
}

// ByChildren orders the results by children terms.
func ByChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTasksCount orders the results by tasks count.
func ByTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTasksStep(), opts...)
	}
}

// ByTasks orders the results by tasks terms.
func ByTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newExecutionContextStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExecutionContextInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExecutionContextTable, ExecutionContextColumn),
	)
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
	)
}
func newTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
	)
}
