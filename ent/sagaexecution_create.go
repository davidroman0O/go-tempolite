// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/saga"
	"github.com/davidroman0O/go-tempolite/ent/sagaexecution"
	"github.com/davidroman0O/go-tempolite/ent/sagastepexecution"
)

// SagaExecutionCreate is the builder for creating a SagaExecution entity.
type SagaExecutionCreate struct {
	config
	mutation *SagaExecutionMutation
	hooks    []Hook
}

// SetRunID sets the "run_id" field.
func (sec *SagaExecutionCreate) SetRunID(s string) *SagaExecutionCreate {
	sec.mutation.SetRunID(s)
	return sec
}

// SetStatus sets the "status" field.
func (sec *SagaExecutionCreate) SetStatus(s sagaexecution.Status) *SagaExecutionCreate {
	sec.mutation.SetStatus(s)
	return sec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sec *SagaExecutionCreate) SetNillableStatus(s *sagaexecution.Status) *SagaExecutionCreate {
	if s != nil {
		sec.SetStatus(*s)
	}
	return sec
}

// SetAttempt sets the "attempt" field.
func (sec *SagaExecutionCreate) SetAttempt(i int) *SagaExecutionCreate {
	sec.mutation.SetAttempt(i)
	return sec
}

// SetNillableAttempt sets the "attempt" field if the given value is not nil.
func (sec *SagaExecutionCreate) SetNillableAttempt(i *int) *SagaExecutionCreate {
	if i != nil {
		sec.SetAttempt(*i)
	}
	return sec
}

// SetOutput sets the "output" field.
func (sec *SagaExecutionCreate) SetOutput(i []interface{}) *SagaExecutionCreate {
	sec.mutation.SetOutput(i)
	return sec
}

// SetStartedAt sets the "started_at" field.
func (sec *SagaExecutionCreate) SetStartedAt(t time.Time) *SagaExecutionCreate {
	sec.mutation.SetStartedAt(t)
	return sec
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (sec *SagaExecutionCreate) SetNillableStartedAt(t *time.Time) *SagaExecutionCreate {
	if t != nil {
		sec.SetStartedAt(*t)
	}
	return sec
}

// SetUpdatedAt sets the "updated_at" field.
func (sec *SagaExecutionCreate) SetUpdatedAt(t time.Time) *SagaExecutionCreate {
	sec.mutation.SetUpdatedAt(t)
	return sec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sec *SagaExecutionCreate) SetNillableUpdatedAt(t *time.Time) *SagaExecutionCreate {
	if t != nil {
		sec.SetUpdatedAt(*t)
	}
	return sec
}

// SetID sets the "id" field.
func (sec *SagaExecutionCreate) SetID(s string) *SagaExecutionCreate {
	sec.mutation.SetID(s)
	return sec
}

// SetSagaID sets the "saga" edge to the Saga entity by ID.
func (sec *SagaExecutionCreate) SetSagaID(id string) *SagaExecutionCreate {
	sec.mutation.SetSagaID(id)
	return sec
}

// SetSaga sets the "saga" edge to the Saga entity.
func (sec *SagaExecutionCreate) SetSaga(s *Saga) *SagaExecutionCreate {
	return sec.SetSagaID(s.ID)
}

// AddStepIDs adds the "steps" edge to the SagaStepExecution entity by IDs.
func (sec *SagaExecutionCreate) AddStepIDs(ids ...string) *SagaExecutionCreate {
	sec.mutation.AddStepIDs(ids...)
	return sec
}

// AddSteps adds the "steps" edges to the SagaStepExecution entity.
func (sec *SagaExecutionCreate) AddSteps(s ...*SagaStepExecution) *SagaExecutionCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sec.AddStepIDs(ids...)
}

// Mutation returns the SagaExecutionMutation object of the builder.
func (sec *SagaExecutionCreate) Mutation() *SagaExecutionMutation {
	return sec.mutation
}

// Save creates the SagaExecution in the database.
func (sec *SagaExecutionCreate) Save(ctx context.Context) (*SagaExecution, error) {
	sec.defaults()
	return withHooks(ctx, sec.sqlSave, sec.mutation, sec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sec *SagaExecutionCreate) SaveX(ctx context.Context) *SagaExecution {
	v, err := sec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sec *SagaExecutionCreate) Exec(ctx context.Context) error {
	_, err := sec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sec *SagaExecutionCreate) ExecX(ctx context.Context) {
	if err := sec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sec *SagaExecutionCreate) defaults() {
	if _, ok := sec.mutation.Status(); !ok {
		v := sagaexecution.DefaultStatus
		sec.mutation.SetStatus(v)
	}
	if _, ok := sec.mutation.Attempt(); !ok {
		v := sagaexecution.DefaultAttempt
		sec.mutation.SetAttempt(v)
	}
	if _, ok := sec.mutation.StartedAt(); !ok {
		v := sagaexecution.DefaultStartedAt()
		sec.mutation.SetStartedAt(v)
	}
	if _, ok := sec.mutation.UpdatedAt(); !ok {
		v := sagaexecution.DefaultUpdatedAt()
		sec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sec *SagaExecutionCreate) check() error {
	if _, ok := sec.mutation.RunID(); !ok {
		return &ValidationError{Name: "run_id", err: errors.New(`ent: missing required field "SagaExecution.run_id"`)}
	}
	if _, ok := sec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SagaExecution.status"`)}
	}
	if v, ok := sec.mutation.Status(); ok {
		if err := sagaexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SagaExecution.status": %w`, err)}
		}
	}
	if _, ok := sec.mutation.Attempt(); !ok {
		return &ValidationError{Name: "attempt", err: errors.New(`ent: missing required field "SagaExecution.attempt"`)}
	}
	if _, ok := sec.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`ent: missing required field "SagaExecution.started_at"`)}
	}
	if _, ok := sec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SagaExecution.updated_at"`)}
	}
	if len(sec.mutation.SagaIDs()) == 0 {
		return &ValidationError{Name: "saga", err: errors.New(`ent: missing required edge "SagaExecution.saga"`)}
	}
	return nil
}

func (sec *SagaExecutionCreate) sqlSave(ctx context.Context) (*SagaExecution, error) {
	if err := sec.check(); err != nil {
		return nil, err
	}
	_node, _spec := sec.createSpec()
	if err := sqlgraph.CreateNode(ctx, sec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SagaExecution.ID type: %T", _spec.ID.Value)
		}
	}
	sec.mutation.id = &_node.ID
	sec.mutation.done = true
	return _node, nil
}

func (sec *SagaExecutionCreate) createSpec() (*SagaExecution, *sqlgraph.CreateSpec) {
	var (
		_node = &SagaExecution{config: sec.config}
		_spec = sqlgraph.NewCreateSpec(sagaexecution.Table, sqlgraph.NewFieldSpec(sagaexecution.FieldID, field.TypeString))
	)
	if id, ok := sec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sec.mutation.RunID(); ok {
		_spec.SetField(sagaexecution.FieldRunID, field.TypeString, value)
		_node.RunID = value
	}
	if value, ok := sec.mutation.Status(); ok {
		_spec.SetField(sagaexecution.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := sec.mutation.Attempt(); ok {
		_spec.SetField(sagaexecution.FieldAttempt, field.TypeInt, value)
		_node.Attempt = value
	}
	if value, ok := sec.mutation.Output(); ok {
		_spec.SetField(sagaexecution.FieldOutput, field.TypeJSON, value)
		_node.Output = value
	}
	if value, ok := sec.mutation.StartedAt(); ok {
		_spec.SetField(sagaexecution.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := sec.mutation.UpdatedAt(); ok {
		_spec.SetField(sagaexecution.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sec.mutation.SagaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sagaexecution.SagaTable,
			Columns: []string{sagaexecution.SagaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(saga.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.saga_executions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sec.mutation.StepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sagaexecution.StepsTable,
			Columns: []string{sagaexecution.StepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sagastepexecution.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SagaExecutionCreateBulk is the builder for creating many SagaExecution entities in bulk.
type SagaExecutionCreateBulk struct {
	config
	err      error
	builders []*SagaExecutionCreate
}

// Save creates the SagaExecution entities in the database.
func (secb *SagaExecutionCreateBulk) Save(ctx context.Context) ([]*SagaExecution, error) {
	if secb.err != nil {
		return nil, secb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(secb.builders))
	nodes := make([]*SagaExecution, len(secb.builders))
	mutators := make([]Mutator, len(secb.builders))
	for i := range secb.builders {
		func(i int, root context.Context) {
			builder := secb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SagaExecutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, secb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, secb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, secb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (secb *SagaExecutionCreateBulk) SaveX(ctx context.Context) []*SagaExecution {
	v, err := secb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (secb *SagaExecutionCreateBulk) Exec(ctx context.Context) error {
	_, err := secb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (secb *SagaExecutionCreateBulk) ExecX(ctx context.Context) {
	if err := secb.Exec(ctx); err != nil {
		panic(err)
	}
}
