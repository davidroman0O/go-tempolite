// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/sagastepexecution"
)

// SagaStepExecutionCreate is the builder for creating a SagaStepExecution entity.
type SagaStepExecutionCreate struct {
	config
	mutation *SagaStepExecutionMutation
	hooks    []Hook
}

// SetSagaExecutionID sets the "saga_execution_id" field.
func (ssec *SagaStepExecutionCreate) SetSagaExecutionID(s string) *SagaStepExecutionCreate {
	ssec.mutation.SetSagaExecutionID(s)
	return ssec
}

// SetStepNumber sets the "step_number" field.
func (ssec *SagaStepExecutionCreate) SetStepNumber(i int) *SagaStepExecutionCreate {
	ssec.mutation.SetStepNumber(i)
	return ssec
}

// SetStatus sets the "status" field.
func (ssec *SagaStepExecutionCreate) SetStatus(s sagastepexecution.Status) *SagaStepExecutionCreate {
	ssec.mutation.SetStatus(s)
	return ssec
}

// SetStartTime sets the "start_time" field.
func (ssec *SagaStepExecutionCreate) SetStartTime(t time.Time) *SagaStepExecutionCreate {
	ssec.mutation.SetStartTime(t)
	return ssec
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (ssec *SagaStepExecutionCreate) SetNillableStartTime(t *time.Time) *SagaStepExecutionCreate {
	if t != nil {
		ssec.SetStartTime(*t)
	}
	return ssec
}

// SetEndTime sets the "end_time" field.
func (ssec *SagaStepExecutionCreate) SetEndTime(t time.Time) *SagaStepExecutionCreate {
	ssec.mutation.SetEndTime(t)
	return ssec
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ssec *SagaStepExecutionCreate) SetNillableEndTime(t *time.Time) *SagaStepExecutionCreate {
	if t != nil {
		ssec.SetEndTime(*t)
	}
	return ssec
}

// SetID sets the "id" field.
func (ssec *SagaStepExecutionCreate) SetID(s string) *SagaStepExecutionCreate {
	ssec.mutation.SetID(s)
	return ssec
}

// Mutation returns the SagaStepExecutionMutation object of the builder.
func (ssec *SagaStepExecutionCreate) Mutation() *SagaStepExecutionMutation {
	return ssec.mutation
}

// Save creates the SagaStepExecution in the database.
func (ssec *SagaStepExecutionCreate) Save(ctx context.Context) (*SagaStepExecution, error) {
	return withHooks(ctx, ssec.sqlSave, ssec.mutation, ssec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssec *SagaStepExecutionCreate) SaveX(ctx context.Context) *SagaStepExecution {
	v, err := ssec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssec *SagaStepExecutionCreate) Exec(ctx context.Context) error {
	_, err := ssec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssec *SagaStepExecutionCreate) ExecX(ctx context.Context) {
	if err := ssec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssec *SagaStepExecutionCreate) check() error {
	if _, ok := ssec.mutation.SagaExecutionID(); !ok {
		return &ValidationError{Name: "saga_execution_id", err: errors.New(`ent: missing required field "SagaStepExecution.saga_execution_id"`)}
	}
	if _, ok := ssec.mutation.StepNumber(); !ok {
		return &ValidationError{Name: "step_number", err: errors.New(`ent: missing required field "SagaStepExecution.step_number"`)}
	}
	if _, ok := ssec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SagaStepExecution.status"`)}
	}
	if v, ok := ssec.mutation.Status(); ok {
		if err := sagastepexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SagaStepExecution.status": %w`, err)}
		}
	}
	return nil
}

func (ssec *SagaStepExecutionCreate) sqlSave(ctx context.Context) (*SagaStepExecution, error) {
	if err := ssec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SagaStepExecution.ID type: %T", _spec.ID.Value)
		}
	}
	ssec.mutation.id = &_node.ID
	ssec.mutation.done = true
	return _node, nil
}

func (ssec *SagaStepExecutionCreate) createSpec() (*SagaStepExecution, *sqlgraph.CreateSpec) {
	var (
		_node = &SagaStepExecution{config: ssec.config}
		_spec = sqlgraph.NewCreateSpec(sagastepexecution.Table, sqlgraph.NewFieldSpec(sagastepexecution.FieldID, field.TypeString))
	)
	if id, ok := ssec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ssec.mutation.SagaExecutionID(); ok {
		_spec.SetField(sagastepexecution.FieldSagaExecutionID, field.TypeString, value)
		_node.SagaExecutionID = value
	}
	if value, ok := ssec.mutation.StepNumber(); ok {
		_spec.SetField(sagastepexecution.FieldStepNumber, field.TypeInt, value)
		_node.StepNumber = value
	}
	if value, ok := ssec.mutation.Status(); ok {
		_spec.SetField(sagastepexecution.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ssec.mutation.StartTime(); ok {
		_spec.SetField(sagastepexecution.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := ssec.mutation.EndTime(); ok {
		_spec.SetField(sagastepexecution.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	return _node, _spec
}

// SagaStepExecutionCreateBulk is the builder for creating many SagaStepExecution entities in bulk.
type SagaStepExecutionCreateBulk struct {
	config
	err      error
	builders []*SagaStepExecutionCreate
}

// Save creates the SagaStepExecution entities in the database.
func (ssecb *SagaStepExecutionCreateBulk) Save(ctx context.Context) ([]*SagaStepExecution, error) {
	if ssecb.err != nil {
		return nil, ssecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ssecb.builders))
	nodes := make([]*SagaStepExecution, len(ssecb.builders))
	mutators := make([]Mutator, len(ssecb.builders))
	for i := range ssecb.builders {
		func(i int, root context.Context) {
			builder := ssecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SagaStepExecutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ssecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ssecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ssecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ssecb *SagaStepExecutionCreateBulk) SaveX(ctx context.Context) []*SagaStepExecution {
	v, err := ssecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssecb *SagaStepExecutionCreateBulk) Exec(ctx context.Context) error {
	_, err := ssecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssecb *SagaStepExecutionCreateBulk) ExecX(ctx context.Context) {
	if err := ssecb.Exec(ctx); err != nil {
		panic(err)
	}
}
