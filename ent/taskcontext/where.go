// Code generated by ent, DO NOT EDIT.

package taskcontext

import (
	"entgo.io/ent/dialect/sql"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldContainsFold(FieldID, id))
}

// RetryCount applies equality check predicate on the "RetryCount" field. It's identical to RetryCountEQ.
func RetryCount(v int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldEQ(FieldRetryCount, v))
}

// MaxRetry applies equality check predicate on the "MaxRetry" field. It's identical to MaxRetryEQ.
func MaxRetry(v int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldEQ(FieldMaxRetry, v))
}

// RetryCountEQ applies the EQ predicate on the "RetryCount" field.
func RetryCountEQ(v int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldEQ(FieldRetryCount, v))
}

// RetryCountNEQ applies the NEQ predicate on the "RetryCount" field.
func RetryCountNEQ(v int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldNEQ(FieldRetryCount, v))
}

// RetryCountIn applies the In predicate on the "RetryCount" field.
func RetryCountIn(vs ...int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldIn(FieldRetryCount, vs...))
}

// RetryCountNotIn applies the NotIn predicate on the "RetryCount" field.
func RetryCountNotIn(vs ...int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldNotIn(FieldRetryCount, vs...))
}

// RetryCountGT applies the GT predicate on the "RetryCount" field.
func RetryCountGT(v int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldGT(FieldRetryCount, v))
}

// RetryCountGTE applies the GTE predicate on the "RetryCount" field.
func RetryCountGTE(v int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldGTE(FieldRetryCount, v))
}

// RetryCountLT applies the LT predicate on the "RetryCount" field.
func RetryCountLT(v int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldLT(FieldRetryCount, v))
}

// RetryCountLTE applies the LTE predicate on the "RetryCount" field.
func RetryCountLTE(v int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldLTE(FieldRetryCount, v))
}

// MaxRetryEQ applies the EQ predicate on the "MaxRetry" field.
func MaxRetryEQ(v int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldEQ(FieldMaxRetry, v))
}

// MaxRetryNEQ applies the NEQ predicate on the "MaxRetry" field.
func MaxRetryNEQ(v int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldNEQ(FieldMaxRetry, v))
}

// MaxRetryIn applies the In predicate on the "MaxRetry" field.
func MaxRetryIn(vs ...int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldIn(FieldMaxRetry, vs...))
}

// MaxRetryNotIn applies the NotIn predicate on the "MaxRetry" field.
func MaxRetryNotIn(vs ...int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldNotIn(FieldMaxRetry, vs...))
}

// MaxRetryGT applies the GT predicate on the "MaxRetry" field.
func MaxRetryGT(v int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldGT(FieldMaxRetry, v))
}

// MaxRetryGTE applies the GTE predicate on the "MaxRetry" field.
func MaxRetryGTE(v int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldGTE(FieldMaxRetry, v))
}

// MaxRetryLT applies the LT predicate on the "MaxRetry" field.
func MaxRetryLT(v int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldLT(FieldMaxRetry, v))
}

// MaxRetryLTE applies the LTE predicate on the "MaxRetry" field.
func MaxRetryLTE(v int) predicate.TaskContext {
	return predicate.TaskContext(sql.FieldLTE(FieldMaxRetry, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TaskContext) predicate.TaskContext {
	return predicate.TaskContext(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TaskContext) predicate.TaskContext {
	return predicate.TaskContext(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TaskContext) predicate.TaskContext {
	return predicate.TaskContext(sql.NotPredicates(p))
}
