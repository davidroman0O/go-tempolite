// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/sagastepexecution"
)

// SagaStepExecutionDelete is the builder for deleting a SagaStepExecution entity.
type SagaStepExecutionDelete struct {
	config
	hooks    []Hook
	mutation *SagaStepExecutionMutation
}

// Where appends a list predicates to the SagaStepExecutionDelete builder.
func (ssed *SagaStepExecutionDelete) Where(ps ...predicate.SagaStepExecution) *SagaStepExecutionDelete {
	ssed.mutation.Where(ps...)
	return ssed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ssed *SagaStepExecutionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ssed.sqlExec, ssed.mutation, ssed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ssed *SagaStepExecutionDelete) ExecX(ctx context.Context) int {
	n, err := ssed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ssed *SagaStepExecutionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sagastepexecution.Table, sqlgraph.NewFieldSpec(sagastepexecution.FieldID, field.TypeString))
	if ps := ssed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ssed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ssed.mutation.done = true
	return affected, err
}

// SagaStepExecutionDeleteOne is the builder for deleting a single SagaStepExecution entity.
type SagaStepExecutionDeleteOne struct {
	ssed *SagaStepExecutionDelete
}

// Where appends a list predicates to the SagaStepExecutionDelete builder.
func (ssedo *SagaStepExecutionDeleteOne) Where(ps ...predicate.SagaStepExecution) *SagaStepExecutionDeleteOne {
	ssedo.ssed.mutation.Where(ps...)
	return ssedo
}

// Exec executes the deletion query.
func (ssedo *SagaStepExecutionDeleteOne) Exec(ctx context.Context) error {
	n, err := ssedo.ssed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sagastepexecution.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ssedo *SagaStepExecutionDeleteOne) ExecX(ctx context.Context) {
	if err := ssedo.Exec(ctx); err != nil {
		panic(err)
	}
}
