// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/davidroman0O/go-tempolite/ent/predicate"
	"github.com/davidroman0O/go-tempolite/ent/sagaexecution"
	"github.com/davidroman0O/go-tempolite/ent/sagastepexecution"
)

// SagaStepExecutionQuery is the builder for querying SagaStepExecution entities.
type SagaStepExecutionQuery struct {
	config
	ctx               *QueryContext
	order             []sagastepexecution.OrderOption
	inters            []Interceptor
	predicates        []predicate.SagaStepExecution
	withSagaExecution *SagaExecutionQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SagaStepExecutionQuery builder.
func (sseq *SagaStepExecutionQuery) Where(ps ...predicate.SagaStepExecution) *SagaStepExecutionQuery {
	sseq.predicates = append(sseq.predicates, ps...)
	return sseq
}

// Limit the number of records to be returned by this query.
func (sseq *SagaStepExecutionQuery) Limit(limit int) *SagaStepExecutionQuery {
	sseq.ctx.Limit = &limit
	return sseq
}

// Offset to start from.
func (sseq *SagaStepExecutionQuery) Offset(offset int) *SagaStepExecutionQuery {
	sseq.ctx.Offset = &offset
	return sseq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sseq *SagaStepExecutionQuery) Unique(unique bool) *SagaStepExecutionQuery {
	sseq.ctx.Unique = &unique
	return sseq
}

// Order specifies how the records should be ordered.
func (sseq *SagaStepExecutionQuery) Order(o ...sagastepexecution.OrderOption) *SagaStepExecutionQuery {
	sseq.order = append(sseq.order, o...)
	return sseq
}

// QuerySagaExecution chains the current query on the "saga_execution" edge.
func (sseq *SagaStepExecutionQuery) QuerySagaExecution() *SagaExecutionQuery {
	query := (&SagaExecutionClient{config: sseq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sseq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sseq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sagastepexecution.Table, sagastepexecution.FieldID, selector),
			sqlgraph.To(sagaexecution.Table, sagaexecution.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sagastepexecution.SagaExecutionTable, sagastepexecution.SagaExecutionColumn),
		)
		fromU = sqlgraph.SetNeighbors(sseq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SagaStepExecution entity from the query.
// Returns a *NotFoundError when no SagaStepExecution was found.
func (sseq *SagaStepExecutionQuery) First(ctx context.Context) (*SagaStepExecution, error) {
	nodes, err := sseq.Limit(1).All(setContextOp(ctx, sseq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sagastepexecution.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sseq *SagaStepExecutionQuery) FirstX(ctx context.Context) *SagaStepExecution {
	node, err := sseq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SagaStepExecution ID from the query.
// Returns a *NotFoundError when no SagaStepExecution ID was found.
func (sseq *SagaStepExecutionQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sseq.Limit(1).IDs(setContextOp(ctx, sseq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sagastepexecution.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sseq *SagaStepExecutionQuery) FirstIDX(ctx context.Context) string {
	id, err := sseq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SagaStepExecution entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SagaStepExecution entity is found.
// Returns a *NotFoundError when no SagaStepExecution entities are found.
func (sseq *SagaStepExecutionQuery) Only(ctx context.Context) (*SagaStepExecution, error) {
	nodes, err := sseq.Limit(2).All(setContextOp(ctx, sseq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sagastepexecution.Label}
	default:
		return nil, &NotSingularError{sagastepexecution.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sseq *SagaStepExecutionQuery) OnlyX(ctx context.Context) *SagaStepExecution {
	node, err := sseq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SagaStepExecution ID in the query.
// Returns a *NotSingularError when more than one SagaStepExecution ID is found.
// Returns a *NotFoundError when no entities are found.
func (sseq *SagaStepExecutionQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sseq.Limit(2).IDs(setContextOp(ctx, sseq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sagastepexecution.Label}
	default:
		err = &NotSingularError{sagastepexecution.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sseq *SagaStepExecutionQuery) OnlyIDX(ctx context.Context) string {
	id, err := sseq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SagaStepExecutions.
func (sseq *SagaStepExecutionQuery) All(ctx context.Context) ([]*SagaStepExecution, error) {
	ctx = setContextOp(ctx, sseq.ctx, ent.OpQueryAll)
	if err := sseq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SagaStepExecution, *SagaStepExecutionQuery]()
	return withInterceptors[[]*SagaStepExecution](ctx, sseq, qr, sseq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sseq *SagaStepExecutionQuery) AllX(ctx context.Context) []*SagaStepExecution {
	nodes, err := sseq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SagaStepExecution IDs.
func (sseq *SagaStepExecutionQuery) IDs(ctx context.Context) (ids []string, err error) {
	if sseq.ctx.Unique == nil && sseq.path != nil {
		sseq.Unique(true)
	}
	ctx = setContextOp(ctx, sseq.ctx, ent.OpQueryIDs)
	if err = sseq.Select(sagastepexecution.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sseq *SagaStepExecutionQuery) IDsX(ctx context.Context) []string {
	ids, err := sseq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sseq *SagaStepExecutionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sseq.ctx, ent.OpQueryCount)
	if err := sseq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sseq, querierCount[*SagaStepExecutionQuery](), sseq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sseq *SagaStepExecutionQuery) CountX(ctx context.Context) int {
	count, err := sseq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sseq *SagaStepExecutionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sseq.ctx, ent.OpQueryExist)
	switch _, err := sseq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sseq *SagaStepExecutionQuery) ExistX(ctx context.Context) bool {
	exist, err := sseq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SagaStepExecutionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sseq *SagaStepExecutionQuery) Clone() *SagaStepExecutionQuery {
	if sseq == nil {
		return nil
	}
	return &SagaStepExecutionQuery{
		config:            sseq.config,
		ctx:               sseq.ctx.Clone(),
		order:             append([]sagastepexecution.OrderOption{}, sseq.order...),
		inters:            append([]Interceptor{}, sseq.inters...),
		predicates:        append([]predicate.SagaStepExecution{}, sseq.predicates...),
		withSagaExecution: sseq.withSagaExecution.Clone(),
		// clone intermediate query.
		sql:  sseq.sql.Clone(),
		path: sseq.path,
	}
}

// WithSagaExecution tells the query-builder to eager-load the nodes that are connected to
// the "saga_execution" edge. The optional arguments are used to configure the query builder of the edge.
func (sseq *SagaStepExecutionQuery) WithSagaExecution(opts ...func(*SagaExecutionQuery)) *SagaStepExecutionQuery {
	query := (&SagaExecutionClient{config: sseq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sseq.withSagaExecution = query
	return sseq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HandlerName string `json:"handler_name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SagaStepExecution.Query().
//		GroupBy(sagastepexecution.FieldHandlerName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sseq *SagaStepExecutionQuery) GroupBy(field string, fields ...string) *SagaStepExecutionGroupBy {
	sseq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SagaStepExecutionGroupBy{build: sseq}
	grbuild.flds = &sseq.ctx.Fields
	grbuild.label = sagastepexecution.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HandlerName string `json:"handler_name,omitempty"`
//	}
//
//	client.SagaStepExecution.Query().
//		Select(sagastepexecution.FieldHandlerName).
//		Scan(ctx, &v)
func (sseq *SagaStepExecutionQuery) Select(fields ...string) *SagaStepExecutionSelect {
	sseq.ctx.Fields = append(sseq.ctx.Fields, fields...)
	sbuild := &SagaStepExecutionSelect{SagaStepExecutionQuery: sseq}
	sbuild.label = sagastepexecution.Label
	sbuild.flds, sbuild.scan = &sseq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SagaStepExecutionSelect configured with the given aggregations.
func (sseq *SagaStepExecutionQuery) Aggregate(fns ...AggregateFunc) *SagaStepExecutionSelect {
	return sseq.Select().Aggregate(fns...)
}

func (sseq *SagaStepExecutionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sseq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sseq); err != nil {
				return err
			}
		}
	}
	for _, f := range sseq.ctx.Fields {
		if !sagastepexecution.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sseq.path != nil {
		prev, err := sseq.path(ctx)
		if err != nil {
			return err
		}
		sseq.sql = prev
	}
	return nil
}

func (sseq *SagaStepExecutionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SagaStepExecution, error) {
	var (
		nodes       = []*SagaStepExecution{}
		withFKs     = sseq.withFKs
		_spec       = sseq.querySpec()
		loadedTypes = [1]bool{
			sseq.withSagaExecution != nil,
		}
	)
	if sseq.withSagaExecution != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, sagastepexecution.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SagaStepExecution).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SagaStepExecution{config: sseq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sseq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sseq.withSagaExecution; query != nil {
		if err := sseq.loadSagaExecution(ctx, query, nodes, nil,
			func(n *SagaStepExecution, e *SagaExecution) { n.Edges.SagaExecution = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sseq *SagaStepExecutionQuery) loadSagaExecution(ctx context.Context, query *SagaExecutionQuery, nodes []*SagaStepExecution, init func(*SagaStepExecution), assign func(*SagaStepExecution, *SagaExecution)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*SagaStepExecution)
	for i := range nodes {
		if nodes[i].saga_execution_steps == nil {
			continue
		}
		fk := *nodes[i].saga_execution_steps
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sagaexecution.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "saga_execution_steps" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sseq *SagaStepExecutionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sseq.querySpec()
	_spec.Node.Columns = sseq.ctx.Fields
	if len(sseq.ctx.Fields) > 0 {
		_spec.Unique = sseq.ctx.Unique != nil && *sseq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sseq.driver, _spec)
}

func (sseq *SagaStepExecutionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(sagastepexecution.Table, sagastepexecution.Columns, sqlgraph.NewFieldSpec(sagastepexecution.FieldID, field.TypeString))
	_spec.From = sseq.sql
	if unique := sseq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sseq.path != nil {
		_spec.Unique = true
	}
	if fields := sseq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sagastepexecution.FieldID)
		for i := range fields {
			if fields[i] != sagastepexecution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sseq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sseq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sseq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sseq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sseq *SagaStepExecutionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sseq.driver.Dialect())
	t1 := builder.Table(sagastepexecution.Table)
	columns := sseq.ctx.Fields
	if len(columns) == 0 {
		columns = sagastepexecution.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sseq.sql != nil {
		selector = sseq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sseq.ctx.Unique != nil && *sseq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sseq.predicates {
		p(selector)
	}
	for _, p := range sseq.order {
		p(selector)
	}
	if offset := sseq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sseq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SagaStepExecutionGroupBy is the group-by builder for SagaStepExecution entities.
type SagaStepExecutionGroupBy struct {
	selector
	build *SagaStepExecutionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ssegb *SagaStepExecutionGroupBy) Aggregate(fns ...AggregateFunc) *SagaStepExecutionGroupBy {
	ssegb.fns = append(ssegb.fns, fns...)
	return ssegb
}

// Scan applies the selector query and scans the result into the given value.
func (ssegb *SagaStepExecutionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ssegb.build.ctx, ent.OpQueryGroupBy)
	if err := ssegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SagaStepExecutionQuery, *SagaStepExecutionGroupBy](ctx, ssegb.build, ssegb, ssegb.build.inters, v)
}

func (ssegb *SagaStepExecutionGroupBy) sqlScan(ctx context.Context, root *SagaStepExecutionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ssegb.fns))
	for _, fn := range ssegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ssegb.flds)+len(ssegb.fns))
		for _, f := range *ssegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ssegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ssegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SagaStepExecutionSelect is the builder for selecting fields of SagaStepExecution entities.
type SagaStepExecutionSelect struct {
	*SagaStepExecutionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sses *SagaStepExecutionSelect) Aggregate(fns ...AggregateFunc) *SagaStepExecutionSelect {
	sses.fns = append(sses.fns, fns...)
	return sses
}

// Scan applies the selector query and scans the result into the given value.
func (sses *SagaStepExecutionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sses.ctx, ent.OpQuerySelect)
	if err := sses.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SagaStepExecutionQuery, *SagaStepExecutionSelect](ctx, sses.SagaStepExecutionQuery, sses, sses.inters, v)
}

func (sses *SagaStepExecutionSelect) sqlScan(ctx context.Context, root *SagaStepExecutionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sses.fns))
	for _, fn := range sses.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sses.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sses.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
